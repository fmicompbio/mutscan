[{"path":"https://fmicompbio.github.io/mutscan/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2022 Friedrich Miescher Institute Biomedical Research Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"https://fmicompbio.github.io/mutscan/articles/mutscan.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"Multiplexed assays of variant effect analysis with `mutscan`","text":"mutscan provides functionality processing visualizing Multiplexed Assays Variant Effect (MAVE) similar types data, starting single-end paired-end FASTQ files. broad range library designs can processed, encompassing experiments considering either single protein combinations multiple proteins (e.g., aimed studying protein-protein interactions). figure provides high-level overview mutscan functionality, described detail following sections. Overview mutscan functionality. digestFastqs() function processes sequencing library, possibly consisting multiple (pairs ) FASTQ files, separately, generates output object containing, among things, count table summary filtering steps. summarizeExperiment() function takes one objects combines SummarizedExperiment object, can used downstream analysis plotting statistical testing.","code":""},{"path":"https://fmicompbio.github.io/mutscan/articles/mutscan.html","id":"example-data","dir":"Articles","previous_headings":"","what":"Example data","title":"Multiplexed assays of variant effect analysis with `mutscan`","text":"mutscan package contains several small example FASTQ files representing different types experiments: transInput_{1,2}.fastq.gz, transOutput_{1,2}.fastq.gz - data TRANS experiment [@Diss2018]. forward reverse reads correspond mutated FOS JUN sequences, respectively. read consists UMI sequence, followed constant sequence variable region. cisInput_{1,2}.fastq.gz, cisOutput_{1,2}.fastq.gz - data CIS experiment [@Diss2018]. forward reverse reads correspond mutated FOS sequence. read consists UMI sequence, followed constant sequence variable region. GSE102901_cis_se.rds - SummarizedExperiment object obtained processing full CIS data [@Diss2018]. leujunt0_{1,2}.fastq.gz - unpublished data; forward read corresponds unmutated sequence one 46 leucine zipper sequences, reverse read corresponds mutated JUN sequences. read contains (frame-shifted) primer sequence, followed variable region.","code":"datadir <- system.file(\"extdata\", package = \"mutscan\") dir(datadir) #>  [1] \"cisInput_1.fastq.gz\"                 \"cisInput_2.fastq.gz\"                 #>  [3] \"cisOutput_1.fastq.gz\"                \"cisOutput_2.fastq.gz\"                #>  [5] \"GSE102901_cis_se.rds\"                \"leujunt0_1.fastq.gz\"                 #>  [7] \"leujunt0_2.fastq.gz\"                 \"multipleVariableRegions_R1.fastq.gz\" #>  [9] \"multipleVariableRegions_R2.fastq.gz\" \"multipleVariableRegions_truth.rds\"   #> [11] \"transInput_1.fastq.gz\"               \"transInput_2.fastq.gz\"               #> [13] \"transOutput_1.fastq.gz\"              \"transOutput_2.fastq.gz\""},{"path":[]},{"path":"https://fmicompbio.github.io/mutscan/articles/mutscan.html","id":"read-composition-specification","dir":"Articles","previous_headings":"Processing Multiplexed Assays of Variant Effect data","what":"Read composition specification","title":"Multiplexed assays of variant effect analysis with `mutscan`","text":"main function processing Multiplexed Assays Variant Effect FASTQ files digestFastqs(). function requires specification paths compressed FASTQ file(s) composition reads files. composition specified user, given form character string indicating parts constituting respective read, integer vector specifying lengths individual parts. permitted components : S (skip) - nucleotide(s) skip U (UMI) - UMI sequence C (constant) - constant sequence, can used e.g. estimate sequencing error rate available V (variable) - nucleotides corresponding variable region P (primer) - primer sequence, may appear nonspecified position read whose position defines start end position components. read can several components type (e.g., skipped nucleotides beginning end, two variable regions separated primer). cases, mutscan concatenate components type processing, recording lengths individual components. example, read following composition: [1 skipped nt] - [10 nt UMI] - [18 nt constant sequence] - [96 nt variable region] specified digestFastqs() elements string \"SUCV\", element length vector c(1, 10, 18, 96). package can also accommodate designs primer sequences. situation, primer acts ‘anchor’, read composition primer specified. example, read following composition: [unknown sequence] - [10 nt primer] - [variable region, constituting remainder read] represented elements string \"SPV\", element length vector c(-1, 10, -1), -1 indicates corresponding read part consists remaining part read, accounted specified parts. addition, sequence primer must specified, read primer present discarded. forward reverse reads can different compositions. user can also specify whether variable parts forward /reverse reads reverse complemented processed, whether variable regions forward reverse reads merged single consensus sequence.","code":""},{"path":"https://fmicompbio.github.io/mutscan/articles/mutscan.html","id":"filtering","dir":"Articles","previous_headings":"Processing Multiplexed Assays of Variant Effect data","what":"Filtering","title":"Multiplexed assays of variant effect analysis with `mutscan`","text":"addition reading FASTQ files, digestFastqs() function perform series filtering steps, following order: Search perfect matches forward/reverse adapter sequences, filter read pair match found either forward reverse read. Search perfect matches forward/reverse primer sequences, filter read pair found. Filter reads whose length compatible indicated composition. forward reverse variable regions merged, filter read pairs valid overlap found. Filter read pair average quality variable region avePhredMin either forward reverse read (consensus sequence merged). Filter read pair number Ns variable region exceeds variableNMax. Filter read pair number Ns combined forward reverse UMI sequence exceeds umiNMax. wild type (reference) sequences provided (via wildTypeForward /wildTypeReverse), filter reads multiple best matches among provided wild type sequences. Filter read pair mutated base quality mutatedPhredMin. Filter read pair number mutated codons exceeds nbrMutatedCodonsMax number mutated nucleotides exceeds nbrMutatedBasesMax. Filter read pair mutated codons match codons encoded forbiddenMutatedCodons. Filter read pair many mutations constant sequence, multiple equally close best hits among provided constant sequences. Reads filtered one step processed (thus contribute count reads filtered reasons).","code":""},{"path":"https://fmicompbio.github.io/mutscan/articles/mutscan.html","id":"processing-trans-data","dir":"Articles","previous_headings":"","what":"Processing TRANS data","title":"Multiplexed assays of variant effect analysis with `mutscan`","text":", illustrate processing provided TRANS experiment example data. filter reads adapter match, average phred quality 20, Ns UMI variable sequence, one mutated codon, mutated codon ending T (represented NNW value forbiddenMutatedCodonsForward forbiddenMutatedCodonsReverse arguments). order identify number mutations, provide wild type sequences FOS JUN (forward reverse reads, respectively). additionally name final mutants according positions sequences mutated codons. digestFastqs() function returns list four elements. parameters list records parameter values used processing, well mutscan version time processing. filterSummary data.frame contains summary number reads filtered step. Note given filtering step, reads retained previous filters considered. numbers filter column names indicate order filters. summaryTable provides number reads unique UMIs observed variable sequence pair. underscore strings sequence column indicate separation forward reverse wild type sequences. addition, table contains column mutantName, provides shorthand notation mutant. format values column combination WTS.xx.NNN (separated _), WTS provides name closest matching wild type sequence (one, unnamed wild type sequence provided, name f/r depending corresponds forward/reverse read, respectively). xx part indicates mutated codon nucleotide number, NNN gives observed sequence mutated codon nucleotide. sequence without mutations named WTS.0.WT, , , WTS name matching wild type sequence. Finally, errorStatistics data.frame lists number matching mismatching bases constant sequences, stratified phred quality score (0 99). errorStatistics output can used estimate sequencing error rate:","code":"transInput <- digestFastqs(     fastqForward = file.path(datadir, \"transInput_1.fastq.gz\"),     fastqReverse = file.path(datadir, \"transInput_2.fastq.gz\"),     mergeForwardReverse = FALSE,      revComplForward = FALSE,      revComplReverse = FALSE,     adapterForward = \"GGAAGAGCACACGTC\",      adapterReverse = \"GGAAGAGCGTCGTGT\",      elementsForward = \"SUCV\",     elementsReverse = \"SUCV\",     elementLengthsForward = c(1, 10, 18, 96),     elementLengthsReverse = c(1, 8, 20, 96),     constantForward = \"AACCGGAGGAGGGAGCTG\",     constantReverse = \"GAAAAAGGAAGCTGGAGAGA\",      avePhredMinForward = 20,      avePhredMinReverse = 20,     variableNMaxForward = 0,      variableNMaxReverse = 0,      umiNMax = 0,     wildTypeForward = c(FOS = \"ACTGATACACTCCAAGCGGAGACAGACCAACTAGAAGATGAGAAGTCTGCTTTGCAGACCGAGATTGCCAACCTGCTGAAGGAGAAGGAAAAACTA\"),      wildTypeReverse = c(JUN = \"ATCGCCCGGCTGGAGGAAAAAGTGAAAACCTTGAAAGCTCAGAACTCGGAGCTGGCGTCCACGGCCAACATGCTCAGGGAACAGGTGGCACAGCTT\"),      nbrMutatedCodonsMaxForward = 1,      nbrMutatedCodonsMaxReverse = 1,     forbiddenMutatedCodonsForward = \"NNW\",      forbiddenMutatedCodonsReverse = \"NNW\",     mutNameDelimiter = \".\",      constantMaxDistForward = -1,     constantMaxDistReverse = -1,     verbose = FALSE ) transInput$parameters #> $fastqForward #> [1] \"/Users/runner/work/_temp/Library/mutscan/extdata/transInput_1.fastq.gz\" #>  #> $fastqReverse #> [1] \"/Users/runner/work/_temp/Library/mutscan/extdata/transInput_2.fastq.gz\" #>  #> $mergeForwardReverse #> [1] FALSE #>  #> $minOverlap #> [1] 0 #>  #> $maxOverlap #> [1] 0 #>  #> $minMergedLength #> [1] 0 #>  #> $maxMergedLength #> [1] 0 #>  #> $maxFracMismatchOverlap #> [1] 1 #>  #> $greedyOverlap #> [1] TRUE #>  #> $revComplForward #> [1] FALSE #>  #> $revComplReverse #> [1] FALSE #>  #> $elementsForward #> [1] \"SUCV\" #>  #> $elementLengthsForward #> [1]  1 10 18 96 #>  #> $elementsReverse #> [1] \"SUCV\" #>  #> $elementLengthsReverse #> [1]  1  8 20 96 #>  #> $adapterForward #> [1] \"GGAAGAGCACACGTC\" #>  #> $adapterReverse #> [1] \"GGAAGAGCGTCGTGT\" #>  #> $primerForward #> [1] \"\" #>  #> $primerReverse #> [1] \"\" #>  #> $wildTypeForward #>                                                                                                FOS  #> \"ACTGATACACTCCAAGCGGAGACAGACCAACTAGAAGATGAGAAGTCTGCTTTGCAGACCGAGATTGCCAACCTGCTGAAGGAGAAGGAAAAACTA\"  #>  #> $wildTypeReverse #>                                                                                                JUN  #> \"ATCGCCCGGCTGGAGGAAAAAGTGAAAACCTTGAAAGCTCAGAACTCGGAGCTGGCGTCCACGGCCAACATGCTCAGGGAACAGGTGGCACAGCTT\"  #>  #> $constantForward #> [1] \"AACCGGAGGAGGGAGCTG\" #>  #> $constantReverse #> [1] \"GAAAAAGGAAGCTGGAGAGA\" #>  #> $avePhredMinForward #> [1] 20 #>  #> $avePhredMinReverse #> [1] 20 #>  #> $variableNMaxForward #> [1] 0 #>  #> $variableNMaxReverse #> [1] 0 #>  #> $umiNMax #> [1] 0 #>  #> $nbrMutatedCodonsMaxForward #> [1] 1 #>  #> $nbrMutatedCodonsMaxReverse #> [1] 1 #>  #> $nbrMutatedBasesMaxForward #> [1] -1 #>  #> $nbrMutatedBasesMaxReverse #> [1] -1 #>  #> $forbiddenMutatedCodonsForward #>  [1] \"AAA\" \"AAT\" \"ACA\" \"ACT\" \"AGA\" \"AGT\" \"ATA\" \"ATT\" \"CAA\" \"CAT\" \"CCA\" \"CCT\" #> [13] \"CGA\" \"CGT\" \"CTA\" \"CTT\" \"GAA\" \"GAT\" \"GCA\" \"GCT\" \"GGA\" \"GGT\" \"GTA\" \"GTT\" #> [25] \"TAA\" \"TAT\" \"TCA\" \"TCT\" \"TGA\" \"TGT\" \"TTA\" \"TTT\" #>  #> $forbiddenMutatedCodonsReverse #>  [1] \"AAA\" \"AAT\" \"ACA\" \"ACT\" \"AGA\" \"AGT\" \"ATA\" \"ATT\" \"CAA\" \"CAT\" \"CCA\" \"CCT\" #> [13] \"CGA\" \"CGT\" \"CTA\" \"CTT\" \"GAA\" \"GAT\" \"GCA\" \"GCT\" \"GGA\" \"GGT\" \"GTA\" \"GTT\" #> [25] \"TAA\" \"TAT\" \"TCA\" \"TCT\" \"TGA\" \"TGT\" \"TTA\" \"TTT\" #>  #> $useTreeWTmatch #> [1] FALSE #>  #> $collapseToWTForward #> [1] FALSE #>  #> $collapseToWTReverse #> [1] FALSE #>  #> $mutatedPhredMinForward #> [1] 0 #>  #> $mutatedPhredMinReverse #> [1] 0 #>  #> $mutNameDelimiter #> [1] \".\" #>  #> $constantMaxDistForward #> [1] -1 #>  #> $constantMaxDistReverse #> [1] -1 #>  #> $umiCollapseMaxDist #> [1] 0 #>  #> $filteredReadsFastqForward #> [1] \"\" #>  #> $filteredReadsFastqReverse #> [1] \"\" #>  #> $maxNReads #> [1] -1 #>  #> $nThreads #> [1] 1 #>  #> $chunkSize #> [1] 100000 #>  #> $maxReadLength #> [1] 1024 #>  #> $processingInfo #> [1] \"Processed by mutscan v0.3.4 on 2025-01-20 12:24:18.811561\" transInput$filterSummary #>   nbrTotal f1_nbrAdapter f2_nbrNoPrimer f3_nbrReadWrongLength #> 1     1000           314              0                     0 #>   f4_nbrNoValidOverlap f5_nbrAvgVarQualTooLow f6_nbrTooManyNinVar #> 1                    0                      7                   0 #>   f7_nbrTooManyNinUMI f8_nbrTooManyBestWTHits f9_nbrMutQualTooLow #> 1                   0                       0                   0 #>   f10a_nbrTooManyMutCodons f10b_nbrTooManyMutBases f11_nbrForbiddenCodons #> 1                      392                       0                      8 #>   f12_nbrTooManyMutConstant f13_nbrTooManyBestConstantHits nbrRetained #> 1                         0                              0         279 head(transInput$summaryTable) #>            mutantName #> 1 FOS.0.WT_JUN.13.CCC #> 2 FOS.0.WT_JUN.13.CTC #> 3  FOS.0.WT_JUN.2.TCC #> 4 FOS.0.WT_JUN.20.ACC #> 5 FOS.0.WT_JUN.30.AGG #> 6 FOS.0.WT_JUN.30.GGG #>                                                                                                                                                                                            sequence #> 1 ACTGATACACTCCAAGCGGAGACAGACCAACTAGAAGATGAGAAGTCTGCTTTGCAGACCGAGATTGCCAACCTGCTGAAGGAGAAGGAAAAACTA_ATCGCCCGGCTGGAGGAAAAAGTGAAAACCTTGAAACCCCAGAACTCGGAGCTGGCGTCCACGGCCAACATGCTCAGGGAACAGGTGGCACAGCTT #> 2 ACTGATACACTCCAAGCGGAGACAGACCAACTAGAAGATGAGAAGTCTGCTTTGCAGACCGAGATTGCCAACCTGCTGAAGGAGAAGGAAAAACTA_ATCGCCCGGCTGGAGGAAAAAGTGAAAACCTTGAAACTCCAGAACTCGGAGCTGGCGTCCACGGCCAACATGCTCAGGGAACAGGTGGCACAGCTT #> 3 ACTGATACACTCCAAGCGGAGACAGACCAACTAGAAGATGAGAAGTCTGCTTTGCAGACCGAGATTGCCAACCTGCTGAAGGAGAAGGAAAAACTA_ATCTCCCGGCTGGAGGAAAAAGTGAAAACCTTGAAAGCTCAGAACTCGGAGCTGGCGTCCACGGCCAACATGCTCAGGGAACAGGTGGCACAGCTT #> 4 ACTGATACACTCCAAGCGGAGACAGACCAACTAGAAGATGAGAAGTCTGCTTTGCAGACCGAGATTGCCAACCTGCTGAAGGAGAAGGAAAAACTA_ATCGCCCGGCTGGAGGAAAAAGTGAAAACCTTGAAAGCTCAGAACTCGGAGCTGGCGACCACGGCCAACATGCTCAGGGAACAGGTGGCACAGCTT #> 5 ACTGATACACTCCAAGCGGAGACAGACCAACTAGAAGATGAGAAGTCTGCTTTGCAGACCGAGATTGCCAACCTGCTGAAGGAGAAGGAAAAACTA_ATCGCCCGGCTGGAGGAAAAAGTGAAAACCTTGAAAGCTCAGAACTCGGAGCTGGCGTCCACGGCCAACATGCTCAGGGAACAGGTGAGGCAGCTT #> 6 ACTGATACACTCCAAGCGGAGACAGACCAACTAGAAGATGAGAAGTCTGCTTTGCAGACCGAGATTGCCAACCTGCTGAAGGAGAAGGAAAAACTA_ATCGCCCGGCTGGAGGAAAAAGTGAAAACCTTGAAAGCTCAGAACTCGGAGCTGGCGTCCACGGCCAACATGCTCAGGGAACAGGTGGGGCAGCTT #>   nbrReads maxNbrReads nbrUmis nbrMutBases nbrMutCodons nbrMutAAs varLengths #> 1        1           1       1           2            1         1      96_96 #> 2        1           1       1           3            1         1      96_96 #> 3        1           1       1           1            1         1      96_96 #> 4        1           1       1           1            1         1      96_96 #> 5        1           1       1           3            1         1      96_96 #> 6        1           1       1           2            1         1      96_96 #>                        mutantNameBase     mutantNameCodon #> 1          FOS.0.WT_JUN.37.C_JUN.39.C FOS.0.WT_JUN.13.CCC #> 2 FOS.0.WT_JUN.37.C_JUN.38.T_JUN.39.C FOS.0.WT_JUN.13.CTC #> 3                    FOS.0.WT_JUN.4.T  FOS.0.WT_JUN.2.TCC #> 4                   FOS.0.WT_JUN.58.A FOS.0.WT_JUN.20.ACC #> 5 FOS.0.WT_JUN.88.A_JUN.89.G_JUN.90.G FOS.0.WT_JUN.30.AGG #> 6          FOS.0.WT_JUN.89.G_JUN.90.G FOS.0.WT_JUN.30.GGG #>           mutantNameBaseHGVS      mutantNameAA       mutantNameAAHGVS #> 1 FOS:c_JUN:c.37_39delinsCCC FOS.0.WT_JUN.13.P FOS:p_JUN:p.(Ala13Pro) #> 2 FOS:c_JUN:c.37_39delinsCTC FOS.0.WT_JUN.13.L FOS:p_JUN:p.(Ala13Leu) #> 3           FOS:c_JUN:c.4G>T  FOS.0.WT_JUN.2.S  FOS:p_JUN:p.(Ala2Ser) #> 4          FOS:c_JUN:c.58T>A FOS.0.WT_JUN.20.T FOS:p_JUN:p.(Ser20Thr) #> 5 FOS:c_JUN:c.88_90delinsAGG FOS.0.WT_JUN.30.R FOS:p_JUN:p.(Ala30Arg) #> 6  FOS:c_JUN:c.89_90delinsGG FOS.0.WT_JUN.30.G FOS:p_JUN:p.(Ala30Gly) #>   mutationTypes #> 1 nonsynonymous #> 2 nonsynonymous #> 3 nonsynonymous #> 4 nonsynonymous #> 5 nonsynonymous #> 6 nonsynonymous #>                                                          sequenceAA #> 1 TDTLQAETDQLEDEKSALQTEIANLLKEKEKL_IARLEEKVKTLKPQNSELASTANMLREQVAQL #> 2 TDTLQAETDQLEDEKSALQTEIANLLKEKEKL_IARLEEKVKTLKLQNSELASTANMLREQVAQL #> 3 TDTLQAETDQLEDEKSALQTEIANLLKEKEKL_ISRLEEKVKTLKAQNSELASTANMLREQVAQL #> 4 TDTLQAETDQLEDEKSALQTEIANLLKEKEKL_IARLEEKVKTLKAQNSELATTANMLREQVAQL #> 5 TDTLQAETDQLEDEKSALQTEIANLLKEKEKL_IARLEEKVKTLKAQNSELASTANMLREQVRQL #> 6 TDTLQAETDQLEDEKSALQTEIANLLKEKEKL_IARLEEKVKTLKAQNSELASTANMLREQVGQL transInput$errorStatistics[rowSums(transInput$errorStatistics[, -1]) != 0, ] #>    PhredQuality nbrMatchForward nbrMismatchForward nbrMatchReverse #> 15           14             160                 11             204 #> 23           22              52                  0              14 #> 28           27             302                  4             474 #> 34           33             472                  0             462 #> 38           37            4020                  1            4405 #>    nbrMismatchReverse #> 15                 17 #> 23                  0 #> 28                  3 #> 34                  1 #> 38                  0 (propErrorsConstantF <- sum(transInput$errorStatistics$nbrMismatchForward) /    (nchar(transInput$parameters$constantForward) * transInput$filterSummary$nbrRetained)) #> [1] 0.003185982 (propErrorsConstantR <- sum(transInput$errorStatistics$nbrMismatchReverse) /    (nchar(transInput$parameters$constantReverse) * transInput$filterSummary$nbrRetained)) #> [1] 0.003763441"},{"path":"https://fmicompbio.github.io/mutscan/articles/mutscan.html","id":"processing-cis-data","dir":"Articles","previous_headings":"","what":"Processing CIS data","title":"Multiplexed assays of variant effect analysis with `mutscan`","text":"Next, illustrate processing provided CIS experiment example data. Recall case, forward reverse variable sequence correspond mutated FOS sequence, matching wild type sequence, two components need merged generate single variable sequence (specified via mergeForwardReverse argument). TRANS data, filter reads adapter match, average phred quality 20, Ns UMI variable sequence, one mutated codon, mutated codon ending T (represented NNW value forbiddenMutatedCodonsForward argument). Since forward reverse variable sequences merged one variable sequence, one wild type sequence provided (wildTypeReverse argument ignored specified). summaryTable now provides number reads unique UMIs observed variable sequence, values mutNames column start FOS.","code":"cisInput <- digestFastqs(     fastqForward = file.path(datadir, \"cisInput_1.fastq.gz\"),     fastqReverse = file.path(datadir, \"cisInput_2.fastq.gz\"),     mergeForwardReverse = TRUE,      minOverlap = 0,      maxOverlap = 0,      maxFracMismatchOverlap = 1,      greedyOverlap = TRUE,      revComplForward = FALSE,      revComplReverse = TRUE,     adapterForward = \"GGAAGAGCACACGTC\",      adapterReverse = \"GGAAGAGCGTCGTGT\",      elementsForward = \"SUCV\",      elementsReverse = \"SUCVS\",     elementLengthsForward = c(1, 10, 18, 96),     elementLengthsReverse = c(1, 7, 17, 96, -1),     constantForward = \"AACCGGAGGAGGGAGCTG\",     constantReverse = \"GAGTTCATCCTGGCAGC\",      primerForward = \"\",      primerReverse = \"\",     avePhredMinForward = 20,      avePhredMinReverse = 20,     variableNMaxForward = 0,      variableNMaxReverse = 0,      umiNMax = 0,     wildTypeForward = c(FOS = \"ACTGATACACTCCAAGCGGAGACAGACCAACTAGAAGATGAGAAGTCTGCTTTGCAGACCGAGATTGCCAACCTGCTGAAGGAGAAGGAAAAACTA\"),      wildTypeReverse = \"\",      nbrMutatedCodonsMaxForward = 1,      nbrMutatedCodonsMaxReverse = 1,      forbiddenMutatedCodonsForward = \"NNW\",      forbiddenMutatedCodonsReverse = \"NNW\",     mutNameDelimiter = \".\",      constantMaxDistForward = -1,     constantMaxDistReverse = -1,     verbose = TRUE ) #> done enumerating forbidden codons (32) #> done enumerating forbidden codons (32) #> start reading sequences for file pair 1 of 1... #>     1000 read pairs processed (16.7% retained) #> done reading sequences #> retained 67 unique features cisInput$parameters #> $fastqForward #> [1] \"/Users/runner/work/_temp/Library/mutscan/extdata/cisInput_1.fastq.gz\" #>  #> $fastqReverse #> [1] \"/Users/runner/work/_temp/Library/mutscan/extdata/cisInput_2.fastq.gz\" #>  #> $mergeForwardReverse #> [1] TRUE #>  #> $minOverlap #> [1] 0 #>  #> $maxOverlap #> [1] 0 #>  #> $minMergedLength #> [1] 0 #>  #> $maxMergedLength #> [1] 0 #>  #> $maxFracMismatchOverlap #> [1] 1 #>  #> $greedyOverlap #> [1] TRUE #>  #> $revComplForward #> [1] FALSE #>  #> $revComplReverse #> [1] TRUE #>  #> $elementsForward #> [1] \"SUCV\" #>  #> $elementLengthsForward #> [1]  1 10 18 96 #>  #> $elementsReverse #> [1] \"SUCVS\" #>  #> $elementLengthsReverse #> [1]  1  7 17 96 -1 #>  #> $adapterForward #> [1] \"GGAAGAGCACACGTC\" #>  #> $adapterReverse #> [1] \"GGAAGAGCGTCGTGT\" #>  #> $primerForward #> [1] \"\" #>  #> $primerReverse #> [1] \"\" #>  #> $wildTypeForward #>                                                                                                FOS  #> \"ACTGATACACTCCAAGCGGAGACAGACCAACTAGAAGATGAGAAGTCTGCTTTGCAGACCGAGATTGCCAACCTGCTGAAGGAGAAGGAAAAACTA\"  #>  #> $wildTypeReverse #>  r  #> \"\"  #>  #> $constantForward #> [1] \"AACCGGAGGAGGGAGCTG\" #>  #> $constantReverse #> [1] \"GAGTTCATCCTGGCAGC\" #>  #> $avePhredMinForward #> [1] 20 #>  #> $avePhredMinReverse #> [1] 20 #>  #> $variableNMaxForward #> [1] 0 #>  #> $variableNMaxReverse #> [1] 0 #>  #> $umiNMax #> [1] 0 #>  #> $nbrMutatedCodonsMaxForward #> [1] 1 #>  #> $nbrMutatedCodonsMaxReverse #> [1] 1 #>  #> $nbrMutatedBasesMaxForward #> [1] -1 #>  #> $nbrMutatedBasesMaxReverse #> [1] -1 #>  #> $forbiddenMutatedCodonsForward #>  [1] \"AAA\" \"AAT\" \"ACA\" \"ACT\" \"AGA\" \"AGT\" \"ATA\" \"ATT\" \"CAA\" \"CAT\" \"CCA\" \"CCT\" #> [13] \"CGA\" \"CGT\" \"CTA\" \"CTT\" \"GAA\" \"GAT\" \"GCA\" \"GCT\" \"GGA\" \"GGT\" \"GTA\" \"GTT\" #> [25] \"TAA\" \"TAT\" \"TCA\" \"TCT\" \"TGA\" \"TGT\" \"TTA\" \"TTT\" #>  #> $forbiddenMutatedCodonsReverse #>  [1] \"AAA\" \"AAT\" \"ACA\" \"ACT\" \"AGA\" \"AGT\" \"ATA\" \"ATT\" \"CAA\" \"CAT\" \"CCA\" \"CCT\" #> [13] \"CGA\" \"CGT\" \"CTA\" \"CTT\" \"GAA\" \"GAT\" \"GCA\" \"GCT\" \"GGA\" \"GGT\" \"GTA\" \"GTT\" #> [25] \"TAA\" \"TAT\" \"TCA\" \"TCT\" \"TGA\" \"TGT\" \"TTA\" \"TTT\" #>  #> $useTreeWTmatch #> [1] FALSE #>  #> $collapseToWTForward #> [1] FALSE #>  #> $collapseToWTReverse #> [1] FALSE #>  #> $mutatedPhredMinForward #> [1] 0 #>  #> $mutatedPhredMinReverse #> [1] 0 #>  #> $mutNameDelimiter #> [1] \".\" #>  #> $constantMaxDistForward #> [1] -1 #>  #> $constantMaxDistReverse #> [1] -1 #>  #> $umiCollapseMaxDist #> [1] 0 #>  #> $filteredReadsFastqForward #> [1] \"\" #>  #> $filteredReadsFastqReverse #> [1] \"\" #>  #> $maxNReads #> [1] -1 #>  #> $nThreads #> [1] 1 #>  #> $chunkSize #> [1] 100000 #>  #> $maxReadLength #> [1] 1024 #>  #> $processingInfo #> [1] \"Processed by mutscan v0.3.4 on 2025-01-20 12:24:19.118037\" cisInput$filterSummary #>   nbrTotal f1_nbrAdapter f2_nbrNoPrimer f3_nbrReadWrongLength #> 1     1000           126              0                     0 #>   f4_nbrNoValidOverlap f5_nbrAvgVarQualTooLow f6_nbrTooManyNinVar #> 1                    0                      0                  44 #>   f7_nbrTooManyNinUMI f8_nbrTooManyBestWTHits f9_nbrMutQualTooLow #> 1                   0                       0                   0 #>   f10a_nbrTooManyMutCodons f10b_nbrTooManyMutBases f11_nbrForbiddenCodons #> 1                      581                       0                     82 #>   f12_nbrTooManyMutConstant f13_nbrTooManyBestConstantHits nbrRetained #> 1                         0                              0         167 cisInput$errorStatistics[rowSums(cisInput$errorStatistics[, -1]) != 0, ] #>    PhredQuality nbrMatchForward nbrMismatchForward nbrMatchReverse #> 3             2               0                  0               0 #> 15           14              51                  1              41 #> 23           22              19                  0               0 #> 28           27              79                  1              56 #> 34           33             163                  0              96 #> 38           37            2690                  2            2620 #>    nbrMismatchReverse #> 3                   4 #> 15                  7 #> 23                  0 #> 28                  0 #> 34                  1 #> 38                 14 head(cisInput$summaryTable) #>   mutantName #> 1   FOS.0.WT #> 2  FOS.1.ACC #> 3  FOS.1.ACG #> 4 FOS.11.CTG #> 5 FOS.13.GAC #> 6 FOS.13.GAG #>                                                                                           sequence #> 1 ACTGATACACTCCAAGCGGAGACAGACCAACTAGAAGATGAGAAGTCTGCTTTGCAGACCGAGATTGCCAACCTGCTGAAGGAGAAGGAAAAACTA #> 2 ACCGATACACTCCAAGCGGAGACAGACCAACTAGAAGATGAGAAGTCTGCTTTGCAGACCGAGATTGCCAACCTGCTGAAGGAGAAGGAAAAACTA #> 3 ACGGATACACTCCAAGCGGAGACAGACCAACTAGAAGATGAGAAGTCTGCTTTGCAGACCGAGATTGCCAACCTGCTGAAGGAGAAGGAAAAACTA #> 4 ACTGATACACTCCAAGCGGAGACAGACCAACTGGAAGATGAGAAGTCTGCTTTGCAGACCGAGATTGCCAACCTGCTGAAGGAGAAGGAAAAACTA #> 5 ACTGATACACTCCAAGCGGAGACAGACCAACTAGAAGACGAGAAGTCTGCTTTGCAGACCGAGATTGCCAACCTGCTGAAGGAGAAGGAAAAACTA #> 6 ACTGATACACTCCAAGCGGAGACAGACCAACTAGAAGAGGAGAAGTCTGCTTTGCAGACCGAGATTGCCAACCTGCTGAAGGAGAAGGAAAAACTA #>   nbrReads maxNbrReads nbrUmis nbrMutBases nbrMutCodons nbrMutAAs varLengths #> 1       77          77      77           0            0         0         96 #> 2        2           2       2           1            1         0         96 #> 3        1           1       1           1            1         0         96 #> 4        1           1       1           1            1         0         96 #> 5        1           1       1           1            1         0         96 #> 6        1           1       1           1            1         1         96 #>   mutantNameBase mutantNameCodon mutantNameBaseHGVS mutantNameAA #> 1       FOS.0.WT        FOS.0.WT              FOS:c     FOS.0.WT #> 2        FOS.3.C       FOS.1.ACC         FOS:c.3T>C     FOS.0.WT #> 3        FOS.3.G       FOS.1.ACG         FOS:c.3T>G     FOS.0.WT #> 4       FOS.33.G      FOS.11.CTG        FOS:c.33A>G     FOS.0.WT #> 5       FOS.39.C      FOS.13.GAC        FOS:c.39T>C     FOS.0.WT #> 6       FOS.39.G      FOS.13.GAG        FOS:c.39T>G     FOS.13.E #>   mutantNameAAHGVS mutationTypes                       sequenceAA #> 1            FOS:p               TDTLQAETDQLEDEKSALQTEIANLLKEKEKL #> 2            FOS:p        silent TDTLQAETDQLEDEKSALQTEIANLLKEKEKL #> 3            FOS:p        silent TDTLQAETDQLEDEKSALQTEIANLLKEKEKL #> 4            FOS:p        silent TDTLQAETDQLEDEKSALQTEIANLLKEKEKL #> 5            FOS:p        silent TDTLQAETDQLEDEKSALQTEIANLLKEKEKL #> 6 FOS:p.(Asp13Glu) nonsynonymous TDTLQAETDQLEEEKSALQTEIANLLKEKEKL"},{"path":"https://fmicompbio.github.io/mutscan/articles/mutscan.html","id":"processing-trans-data-with-primers","dir":"Articles","previous_headings":"","what":"Processing TRANS data with primers","title":"Multiplexed assays of variant effect analysis with `mutscan`","text":"Finally, illustrate processing provided example data, first read corresponds one 46 leucine zipper sequences, second read mutated JUN sequence. first need define possible sequences forward read. multiple wild type sequences provided like , mutscan match read find similar one read. Next process data, allowing mismatches forward read, 1 mismatching codon reverse read. Now, assume variable sequence starts immediately provided primers, hence don’t specify UMI/constant sequence lengths. forward read, variable region taken remainder read (primer), whereas reverse read, specify variable sequence length 96.","code":"leu <- c(     ATF2 = \"GATCCTGATGAAAAAAGGAGAAAGTTTTTAGAGCGAAATAGAGCAGCAGCTTCAAGATGCCGACAAAAAAGGAAAGTCTGGGTTCAGTCTTTAGAGAAGAAAGCTGAAGACTTGAGTTCATTAAATGGTCAGCTGCAGAGTGAAGTCACCCTGCTGAGAAATGAAGTGGCACAGCTGAAACAGCTTCTTCTGGCT\",     ATF7 = \"GATCCAGATGAGCGACGGCAGCGCTTTCTGGAGCGCAACCGGGCTGCAGCCTCCCGCTGCCGCCAAAAGCGAAAGCTGTGGGTGTCCTCCCTAGAGAAGAAGGCCGAAGAACTCACTTCTCAGAACATTCAGCTGAGTAATGAAGTCACATTACTACGCAATGAGGTGGCCCAGTTGAAACAGCTACTGTTAGCT\",     CREB5 = \"GATCCGGACGAGAGGCGGCGGAAATTTCTGGAACGGAACCGGGCAGCTGCCACCCGCTGCAGACAGAAGAGGAAGGTCTGGGTGATGTCATTGGAAAAGAAAGCAGAAGAACTCACCCAGACAAACATGCAGCTTCAGAATGAAGTGTCTATGTTGAAAAATGAGGTGGCCCAGCTGAAACAGTTGTTGTTAACA\",     ATF3 = \"GAAGAAGATGAAAGGAAAAAGAGGCGACGAGAAAGAAATAAGATTGCAGCTGCAAAGTGCCGAAACAAGAAGAAGGAGAAGACGGAGTGCCTGCAGAAAGAGTCGGAGAAGCTGGAAAGTGTGAATGCTGAACTGAAGGCTCAGATTGAGGAGCTCAAGAACGAGAAGCAGCATTTGATATACATGCTCAACCTT\",     JDP2 = \"GAGGAAGAGGAGCGAAGGAAAAGGCGCCGGGAGAAGAACAAAGTCGCAGCAGCCCGATGCCGGAACAAGAAGAAGGAGCGCACGGAGTTTCTGCAGCGGGAATCCGAGCGGCTGGAACTCATGAACGCAGAGCTGAAGACCCAGATTGAGGAGCTGAAGCAGGAGCGGCAGCAGCTCATCCTGATGCTGAACCGA\",     ATF4 = \"GAGAAACTGGATAAGAAGCTGAAAAAAATGGAGCAAAACAAGACAGCAGCCACTAGGTACCGCCAGAAGAAGAGGGCGGAGCAGGAGGCTCTTACTGGTGAGTGCAAAGAGCTGGAAAAGAAGAACGAGGCTCTAAAAGAGAGGGCGGATTCCCTGGCCAAGGAGATCCAGTACCTGAAAGATTTGATAGAAGAG\",     ATF5 = \"ACCCGAGGGGACCGCAAGCAAAAGAAGAGAGACCAGAACAAGTCGGCGGCTCTGAGGTACCGCCAGCGGAAGCGGGCAGAGGGTGAGGCCCTGGAGGGCGAGTGCCAGGGGCTGGAGGCACGGAATCGCGAGCTGAAGGAACGGGCAGAGTCCGTGGAGCGCGAGATCCAGTACGTCAAGGACCTGCTCATCGAG\",     CREBZF = \"AGTCCCCGGAAGGCGGCGGCGGCCGCTGCCCGCCTTAATCGACTGAAGAAGAAGGAGTACGTGATGGGGCTGGAGAGTCGAGTCCGGGGTCTGGCAGCCGAGAACCAGGAGCTGCGGGCCGAGAATCGGGAGCTGGGCAAACGCGTACAGGCACTGCAGGAGGAGAGTCGCTACCTACGGGCAGTCTTAGCCAAC\",     BATF2 = \"CCCAAGGAGCAACAAAGGCAGCTGAAGAAGCAGAAGAACCGGGCAGCCGCCCAGCGAAGCCGGCAGAAGCACACAGACAAGGCAGACGCCCTGCACCAGCAGCACGAGTCTCTGGAAAAAGACAACCTCGCCCTGCGGAAGGAGATCCAGTCCCTGCAGGCCGAGCTGGCGTGGTGGAGCCGGACCCTGCACGTG\",     BATF3 = \"GAGGATGATGACAGGAAGGTCCGAAGGAGAGAAAAAAACCGAGTTGCTGCTCAGAGAAGTCGGAAGAAGCAGACCCAGAAGGCTGACAAGCTCCATGAGGAATATGAGAGCCTGGAGCAAGAAAACACCATGCTGCGGAGAGAGATCGGGAAGCTGACAGAGGAGCTGAAGCACCTGACAGAGGCACTGAAGGAG\",     CEBPE = \"AAAGATAGCCTTGAGTACCGGCTGAGGCGGGAGCGCAACAACATCGCCGTGCGCAAGAGCCGAGACAAGGCCAAGAGGCGCATTCTGGAGACGCAGCAGAAGGTGCTGGAGTACATGGCAGAGAACGAGCGCCTCCGCAGCCGCGTGGAGCAGCTCACCCAGGAGCTAGACACCCTCCGCAACCTCTTCCGCCAG\",     BACH1 = \"CTGGATTGTATCCATGATATTCGAAGAAGAAGTAAAAACAGAATTGCTGCACAGCGCTGTCGCAAGAGAAAACTTGACTGTATACAGAATCTTGAATCAGAAATTGAGAAGCTGCAAAGTGAAAAGGAGAGCTTGTTGAAGGAAAGAGATCACATTTTGTCAACTCTGGGTGAGACAAAGCAGAACCTAACTGGA\",     BACH2 = \"TTAGAGTTTATTCATGATGTCCGACGGCGCAGCAAGAACCGCATCGCGGCCCAGCGCTGCCGCAAAAGGAAACTGGACTGTATTCAGAATTTAGAATGTGAAATCCGCAAATTGGTGTGTGAGAAAGAGAAACTGTTGTCAGAGAGGAATCAACTGAAAGCATGCATGGGGGAACTGTTGGACAACTTCTCCTGC\",     NFE2L1 = \"CTGAGCCTCATCCGAGACATCCGGCGCCGGGGCAAGAACAAGATGGCGGCGCAGAACTGCCGCAAGCGCAAGCTGGACACCATCCTGAATCTGGAGCGTGATGTGGAGGACCTGCAGCGTGACAAAGCCCGGCTGCTGCGGGAGAAAGTGGAGTTCCTGCGCTCCCTGCGACAGATGAAGCAGAAGGTCCAGAGC\",     NFE2 = \"CTAGCGCTAGTCCGGGACATCCGACGACGGGGCAAAAACAAGGTGGCAGCCCAGAACTGCCGCAAGAGGAAGCTGGAAACCATTGTGCAGCTGGAGCGGGAGCTGGAGCGGCTGACCAATGAACGGGAGCGGCTTCTCAGGGCCCGCGGGGAGGCAGACCGGACCCTGGAGGTCATGCGCCAACAGCTGACAGAG\",     NFIL3 = \"AAGAAAGATGCTATGTATTGGGAAAAAAGGCGGAAAAATAATGAAGCTGCCAAAAGATCTCGTGAGAAGCGTCGACTGAATGACCTGGTTTTAGAGAACAAACTAATTGCACTGGGAGAAGAAAACGCCACTTTAAAAGCTGAGCTGCTTTCACTAAAATTAAAGTTTGGTTTAATTAGCTCCACAGCATATGCT\",     FOS = \"GAAGAAGAAGAGAAAAGGAGAATCCGAAGGGAAAGGAATAAGATGGCTGCAGCCAAATGCCGCAACCGGAGGAGGGAGCTGACTGATACACTCCAAGCGGAGACAGACCAACTAGAAGATGAGAAGTCTGCTTTGCAGACCGAGATTGCCAACCTGCTGAAGGAGAAGGAAAAACTAGAGTTCATCCTGGCAGCT\",     FOSB = \"GAGGAAGAGGAGAAGCGAAGGGTGCGCCGGGAACGAAATAAACTAGCAGCAGCTAAATGCAGGAACCGGCGGAGGGAGCTGACCGACCGACTCCAGGCGGAGACAGATCAGTTGGAGGAAGAAAAAGCAGAGCTGGAGTCGGAGATCGCCGAGCTCCAAAAGGAGAAGGAACGTCTGGAGTTTGTGCTGGTGGCC\",     FOSL1 = \"GAGGAAGAGGAGCGCCGCCGAGTAAGGCGCGAGCGGAACAAGCTGGCTGCGGCCAAGTGCAGGAACCGGAGGAAGGAACTGACCGACTTCCTGCAGGCGGAGACTGACAAACTGGAAGATGAGAAATCTGGGCTGCAGCGAGAGATTGAGGAGCTGCAGAAGCAGAAGGAGCGCCTAGAGCTGGTGCTGGAAGCC\",     FOSL2 = \"GAAGAGGAGGAGAAGCGTCGCATCCGGCGGGAGAGGAACAAGCTGGCTGCAGCCAAGTGCCGGAACCGACGCCGGGAGCTGACAGAGAAGCTGCAGGCGGAGACAGAGGAGCTGGAGGAGGAGAAGTCAGGCCTGCAGAAGGAGATTGCTGAGCTGCAGAAGGAGAAGGAGAAGCTGGAGTTCATGTTGGTGGCT\",     MAFB = \"GTGATCCGCCTGAAGCAGAAGCGGCGGACCCTGAAGAACCGGGGCTACGCCCAGTCTTGCAGGTATAAACGCGTCCAGCAGAAGCACCACCTGGAGAATGAGAAGACGCAGCTCATTCAGCAGGTGGAGCAGCTTAAGCAGGAGGTGTCCCGGCTGGCCCGCGAGAGAGACGCCTACAAGGTCAAGTGCGAGAAA\",     JUN = \"CAGGAGCGGATCAAGGCGGAGAGGAAGCGCATGAGGAACCGCATCGCTGCCTCCAAGTGCCGAAAAAGGAAGCTGGAGAGAATCGCCCGGCTGGAGGAAAAAGTGAAAACCTTGAAAGCTCAGAACTCGGAGCTGGCGTCCACGGCCAACATGCTCAGGGAACAGGTGGCACAGCTTAAACAGAAAGTCATGAAC\",     JUNB = \"CAAGAGCGCATCAAAGTGGAGCGCAAGCGGCTGCGGAACCGGCTGGCGGCCACCAAGTGCCGGAAGCGGAAGCTGGAGCGCATCGCGCGCCTGGAGGACAAGGTGAAGACGCTCAAGGCCGAGAACGCGGGGCTGTCGAGTACCGCCGGCCTCCTCCGGGAGCAGGTGGCCCAGCTCAAACAGAAGGTCATGACC\",     JUND = \"CAGGAGCGCATCAAGGCGGAGCGCAAGCGGCTGCGCAACCGCATCGCCGCCTCCAAGTGCCGCAAGCGCAAGCTGGAGCGCATCTCGCGCCTGGAAGAGAAAGTGAAGACCCTCAAGAGTCAGAACACGGAGCTGGCGTCCACGGCGAGCCTGCTGCGCGAGCAGGTGGCGCAGCTCAAGCAGAAAGTCCTCAGC\",     CREB3 = \"GAACAAATTCTGAAACGTGTGCGGAGGAAGATTCGAAATAAAAGATCTGCTCAAGAGAGCCGCAGGAAAAAGAAGGTGTATGTTGGGGGTTTAGAGAGCAGGGTCTTGAAATACACAGCCCAGAATATGGAGCTTCAGAACAAAGTACAGCTTCTGGAGGAACAGAATTTGTCCCTTCTAGATCAACTGAGGAAA\",     HLF = \"CTGAAGGATGACAAGTACTGGGCAAGGCGCAGAAAGAACAACATGGCAGCCAAGCGCTCCCGCGACGCCCGGAGGCTGAAAGAGAACCAGATCGCCATCCGGGCCTCGTTCCTGGAGAAGGAGAACTCGGCCCTCCGCCAGGAGGTGGCTGACTTGAGGAAGGAGCTGGGCAAATGCAAGAACATACTTGCCAAG\",     MAFG = \"ATCGTCCAGCTGAAGCAGCGCCGGCGCACGCTCAAGAACCGCGGCTACGCTGCCAGCTGCCGCGTGAAGCGGGTGACGCAGAAGGAGGAGCTGGAGAAGCAGAAGGCGGAGCTGCAGCAGGAGGTGGAGAAGCTGGCCTCAGAGAACGCCAGCATGAAGCTGGAGCTCGACGCGCTGCGCTCCAAGTACGAGGCG\",     MAFK = \"GTGACCCGCCTGAAGCAGCGTCGGCGCACACTCAAGAACCGCGGCTACGCGGCCAGCTGCCGCATCAAGCGGGTGACGCAGAAGGAGGAGCTGGAGCGGCAGCGCGTGGAGCTGCAGCAGGAGGTGGAGAAGCTGGCGCGTGAGAACAGCAGCATGCGGCTGGAGCTGGACGCCCTGCGCTCCAAGTACGAGGCG\",     XBP1 = \"AGCCCCGAGGAGAAGGCGCTGAGGAGGAAACTGAAAAACAGAGTAGCAGCTCAGACTGCCAGAGATCGAAAGAAGGCTCGAATGAGTGAGCTGGAACAGCAAGTGGTAGATTTAGAAGAAGAGAACCAAAAACTTTTGCTAGAAAATCAGCTTTTACGAGAGAAAACTCATGGCCTTGTAGTTGAGAACCAGGAG\",     ATF6 = \"ATTGCTGTGCTAAGGAGACAGCAACGTATGATAAAAAATCGAGAATCCGCTTGTCAGTCTCGCAAGAAGAAGAAAGAATATATGCTAGGGTTAGAGGCGAGATTAAAGGCTGCCCTCTCAGAAAACGAGCAACTGAAGAAAGAAAATGGAACACTGAAGCGGCAGCTGGATGAAGTTGTGTCAGAGAACCAGAGG\",     ATF6B = \"GCAAAGCTGCTGAAGCGGCAGCAGCGAATGATCAAGAACCGGGAGTCAGCCTGCCAGTCCCGGAGAAAGAAGAAAGAGTATCTGCAGGGACTGGAGGCTCGGCTGCAAGCAGTACTGGCTGACAACCAGCAGCTCCGCCGAGAGAATGCTGCCCTCCGGCGGCGGCTGGAGGCCCTGCTGGCTGAAAACAGCGAG\",     CEBPA = \"AAGAACAGCAACGAGTACCGGGTGCGGCGCGAGCGCAACAACATCGCGGTGCGCAAGAGCCGCGACAAGGCCAAGCAGCGCAACGTGGAGACGCAGCAGAAGGTGCTGGAGCTGACCAGTGACAATGACCGCCTGCGCAAGCGGGTGGAACAGCTGAGCCGCGAACTGGACACGCTGCGGGGCATCTTCCGCCAG\",     CEBPB = \"AAGCACAGCGACGAGTACAAGATCCGGCGCGAGCGCAACAACATCGCCGTGCGCAAGAGCCGCGACAAGGCCAAGATGCGCAACCTGGAGACGCAGCACAAGGTCCTGGAGCTCACGGCCGAGAACGAGCGGCTGCAGAAGAAGGTGGAGCAGCTGTCGCGCGAGCTCAGCACCCTGCGGAACTTGTTCAAGCAG\",     CEBPD = \"CGCGGCAGCCCCGAGTACCGGCAGCGGCGCGAGCGCAACAACATCGCCGTGCGCAAGAGCCGCGACAAGGCCAAGCGGCGCAACCAGGAGATGCAGCAGAAGTTGGTGGAGCTGTCGGCTGAGAACGAGAAGCTGCACCAGCGCGTGGAGCAGCTCACGCGGGACCTGGCCGGCCTCCGGCAGTTCTTCAAGCAG\",     CEBPG = \"CGAAACAGTGACGAGTATCGGCAACGCCGAGAGAGGAACAACATGGCTGTGAAAAAGAGCCGGTTGAAAAGCAAGCAGAAAGCACAAGACACACTGCAGAGAGTCAATCAGCTCAAAGAAGAGAATGAACGGTTGGAAGCAAAAATCAAATTGCTGACCAAGGAATTAAGTGTACTCAAAGATTTGTTTCTTGAG\",     CREB1 = \"GAAGCAGCACGAAAGAGAGAGGTCCGTCTAATGAAGAACAGGGAAGCAGCTCGAGAGTGTCGTAGAAAGAAGAAAGAATATGTGAAATGTTTAGAAAACAGAGTGGCAGTGCTTGAAAATCAAAACAAGACATTGATTGAGGAGCTAAAAGCACTTAAGGACCTTTACTGCCACAAATCAGAT\",     CREB3L1 = \"GAGAAGGCCTTGAAGAGAGTCCGGAGGAAAATCAAGAACAAGATCTCAGCCCAGGAGAGCCGTCGTAAGAAGAAGGAGTATGTGGAGTGTCTAGAAAAGAAGGTGGAGACATTTACATCTGAGAACAATGAACTGTGGAAGAAGGTGGAGACCCTGGAGAATGCCAACAGGACCCTGCTCCAGCAGCTGCAGAAA\",     CREB3L2 = \"GAGAAGGCCCTGAAGAAAATTCGGAGGAAGATCAAGAATAAGATTTCTGCTCAGGAAAGTAGGAGAAAGAAGAAAGAATACATGGACAGCCTGGAGAAAAAAGTGGAGTCTTGTTCAACTGAGAACTTGGAGCTTCGGAAGAAGGTAGAGGTTCTAGAGAACACTAATAGGACTCTCCTTCAGCAACTCCAGAAG\",     CREB3L3 = \"GAGCGAGTGCTGAAAAAAATCCGCCGGAAAATCCGGAACAAGCAGTCGGCGCAAGAAAGCAGGAAGAAGAAGAAGGAATATATCGATGGCCTGGAGACTCGGATGTCAGCTTGCACTGCTCAGAATCAGGAGTTACAGAGGAAAGTCTTGCATCTCGAGAAGCAAAACCTGTCCCTCTTGGAGCAACTGAAGAAA\",     CREB3L4 = \"GAGAGGGTCCTCAAGAAGGTCAGGAGGAAAATCCGTAACAAGCAGTCAGCTCAGGACAGTCGGCGGCGGAAGAAGGAGTACATTGATGGGCTGGAGAGCAGGGTGGCAGCCTGTTCTGCACAGAACCAAGAATTACAGAAAAAAGTCCAGGAGCTGGAGAGGCACAACATCTCCTTGGTAGCTCAGCTCCGCCAG\",     CREBL2 = \"CCAGCCAAAATTGACTTGAAAGCAAAACTTGAGAGGAGCCGGCAGAGTGCAAGAGAATGCCGAGCCCGAAAAAAGCTGAGATATCAGTATTTGGAAGAGTTGGTATCCAGTCGAGAAAGAGCTATATGTGCCCTCAGAGAGGAACTGGAAATGTACAAGCAGTGGTGCATGGCAATGGACCAAGGAAAAATCCCT\",     CREBRF = \"CCCTTAACAGCCCGACCAAGGTCAAGGAAGGAAAAAAATAAGCTGGCTTCCAGAGCTTGTCGGTTAAAGAAGAAAGCCCAGTATGAAGCTAATAAAGTGAAATTATGGGGCCTCAACACAGAATATGATAATTTATTGTTTGTAATCAACTCCATCAAGCAAGAGATTGTAAACCGGGTACAGAATCCAAGAGAT\",     DBP = \"CAGAAGGATGAGAAATACTGGAGCCGGCGGTACAAGAACAACGAGGCAGCCAAGCGGTCCCGTGACGCCCGGCGGCTCAAGGAGAACCAGATATCGGTGCGGGCGGCCTTCCTGGAGAAGGAGAACGCCCTGCTGCGGCAGGAAGTTGTGGCCGTGCGCCAGGAGCTGTCCCACTACCGCGCCGTGCTGTCCCGA\",     NFE2L2 = \"CTTGCATTAATTCGGGATATACGTAGGAGGGGTAAGAATAAAGTGGCTGCTCAGAATTGCAGAAAAAGAAAACTGGAAAATATAGTAGAACTAGAGCAAGATTTAGATCATTTGAAAGATGAAAAAGAAAAATTGCTCAAAGAAAAAGGAGAAAATGACAAAAGCCTTCACCTACTGAAAAAACAACTCAGCACC\",     NFE2L3 = \"GTCTCACTTATCCGTGACATCAGACGAAGAGGGAAAAATAAAGTTGCTGCGCAGAACTGTCGTAAACGCAAATTGGACATAATTTTGAATTTAGAAGATGATGTATGTAACTTGCAAGCAAAGAAGGAAACTCTTAAGAGAGAGCAAGCACAATGTAACAAAGCTATTAACATAATGAAACAGAAACTGCATGAC\",     TEF = \"CAGAAGGATGAAAAGTACTGGACAAGACGCAAGAAGAACAACGTGGCAGCTAAACGGTCACGGGATGCCCGGCGCCTGAAAGAGAATCAGATCACCATCCGGGCAGCCTTCCTGGAGAAGGAGAACACAGCCCTGCGGACGGAGGTGGCCGAGCTACGCAAGGAGGTGGGCAAGTGCAAGACCATCGTGTCCAAG\" ) leujunt0 <- digestFastqs(     fastqForward = file.path(datadir, \"leujunt0_1.fastq.gz\"),     fastqReverse = file.path(datadir, \"leujunt0_2.fastq.gz\"),     mergeForwardReverse = FALSE,      revComplForward = FALSE,      revComplReverse = FALSE,     elementsForward = \"SPV\",      elementsReverse = \"SPVS\",     elementLengthsForward = c(-1, 19, -1),     elementLengthsReverse = c(-1, 20, 96, -1),     constantForward = \"\",      constantReverse = \"\",      adapterForward = \"\",     adapterReverse = \"\",      primerForward = \"GTCAGGTGGAGGCGGATCC\",      primerReverse = \"GAAAAAGGAAGCTGGAGAGA\",     avePhredMinForward = 20,      avePhredMinReverse = 20,      variableNMaxForward = 0,      variableNMaxReverse = 0,      umiNMax = 0,     wildTypeForward = leu,      wildTypeReverse = c(JUN = \"ATCGCCCGGCTGGAGGAAAAAGTGAAAACCTTGAAAGCTCAGAACTCGGAGCTGGCGTCCACGGCCAACATGCTCAGGGAACAGGTGGCACAGCTT\"),      nbrMutatedCodonsMaxForward = 0,      nbrMutatedCodonsMaxReverse = 1,      forbiddenMutatedCodonsForward = \"\",     forbiddenMutatedCodonsReverse = \"NNW\",     mutatedPhredMinForward = 0.0,      mutatedPhredMinReverse = 0.0,     mutNameDelimiter = \".\",      verbose = TRUE ) #> done enumerating forbidden codons (0) #> done enumerating forbidden codons (32) #> start reading sequences for file pair 1 of 1... #>     1000 read pairs processed (60% retained) #> done reading sequences #> retained 587 unique features leujunt0$parameters #> $fastqForward #> [1] \"/Users/runner/work/_temp/Library/mutscan/extdata/leujunt0_1.fastq.gz\" #>  #> $fastqReverse #> [1] \"/Users/runner/work/_temp/Library/mutscan/extdata/leujunt0_2.fastq.gz\" #>  #> $mergeForwardReverse #> [1] FALSE #>  #> $minOverlap #> [1] 0 #>  #> $maxOverlap #> [1] 0 #>  #> $minMergedLength #> [1] 0 #>  #> $maxMergedLength #> [1] 0 #>  #> $maxFracMismatchOverlap #> [1] 1 #>  #> $greedyOverlap #> [1] TRUE #>  #> $revComplForward #> [1] FALSE #>  #> $revComplReverse #> [1] FALSE #>  #> $elementsForward #> [1] \"SPV\" #>  #> $elementLengthsForward #> [1] -1 19 -1 #>  #> $elementsReverse #> [1] \"SPVS\" #>  #> $elementLengthsReverse #> [1] -1 20 96 -1 #>  #> $adapterForward #> [1] \"\" #>  #> $adapterReverse #> [1] \"\" #>  #> $primerForward #> [1] \"GTCAGGTGGAGGCGGATCC\" #>  #> $primerReverse #> [1] \"GAAAAAGGAAGCTGGAGAGA\" #>  #> $wildTypeForward #>                                                                                                                                                                                                  ATF2  #> \"GATCCTGATGAAAAAAGGAGAAAGTTTTTAGAGCGAAATAGAGCAGCAGCTTCAAGATGCCGACAAAAAAGGAAAGTCTGGGTTCAGTCTTTAGAGAAGAAAGCTGAAGACTTGAGTTCATTAAATGGTCAGCTGCAGAGTGAAGTCACCCTGCTGAGAAATGAAGTGGCACAGCTGAAACAGCTTCTTCTGGCT\"  #>                                                                                                                                                                                                  ATF7  #> \"GATCCAGATGAGCGACGGCAGCGCTTTCTGGAGCGCAACCGGGCTGCAGCCTCCCGCTGCCGCCAAAAGCGAAAGCTGTGGGTGTCCTCCCTAGAGAAGAAGGCCGAAGAACTCACTTCTCAGAACATTCAGCTGAGTAATGAAGTCACATTACTACGCAATGAGGTGGCCCAGTTGAAACAGCTACTGTTAGCT\"  #>                                                                                                                                                                                                 CREB5  #> \"GATCCGGACGAGAGGCGGCGGAAATTTCTGGAACGGAACCGGGCAGCTGCCACCCGCTGCAGACAGAAGAGGAAGGTCTGGGTGATGTCATTGGAAAAGAAAGCAGAAGAACTCACCCAGACAAACATGCAGCTTCAGAATGAAGTGTCTATGTTGAAAAATGAGGTGGCCCAGCTGAAACAGTTGTTGTTAACA\"  #>                                                                                                                                                                                                  ATF3  #> \"GAAGAAGATGAAAGGAAAAAGAGGCGACGAGAAAGAAATAAGATTGCAGCTGCAAAGTGCCGAAACAAGAAGAAGGAGAAGACGGAGTGCCTGCAGAAAGAGTCGGAGAAGCTGGAAAGTGTGAATGCTGAACTGAAGGCTCAGATTGAGGAGCTCAAGAACGAGAAGCAGCATTTGATATACATGCTCAACCTT\"  #>                                                                                                                                                                                                  JDP2  #> \"GAGGAAGAGGAGCGAAGGAAAAGGCGCCGGGAGAAGAACAAAGTCGCAGCAGCCCGATGCCGGAACAAGAAGAAGGAGCGCACGGAGTTTCTGCAGCGGGAATCCGAGCGGCTGGAACTCATGAACGCAGAGCTGAAGACCCAGATTGAGGAGCTGAAGCAGGAGCGGCAGCAGCTCATCCTGATGCTGAACCGA\"  #>                                                                                                                                                                                                  ATF4  #> \"GAGAAACTGGATAAGAAGCTGAAAAAAATGGAGCAAAACAAGACAGCAGCCACTAGGTACCGCCAGAAGAAGAGGGCGGAGCAGGAGGCTCTTACTGGTGAGTGCAAAGAGCTGGAAAAGAAGAACGAGGCTCTAAAAGAGAGGGCGGATTCCCTGGCCAAGGAGATCCAGTACCTGAAAGATTTGATAGAAGAG\"  #>                                                                                                                                                                                                  ATF5  #> \"ACCCGAGGGGACCGCAAGCAAAAGAAGAGAGACCAGAACAAGTCGGCGGCTCTGAGGTACCGCCAGCGGAAGCGGGCAGAGGGTGAGGCCCTGGAGGGCGAGTGCCAGGGGCTGGAGGCACGGAATCGCGAGCTGAAGGAACGGGCAGAGTCCGTGGAGCGCGAGATCCAGTACGTCAAGGACCTGCTCATCGAG\"  #>                                                                                                                                                                                                CREBZF  #> \"AGTCCCCGGAAGGCGGCGGCGGCCGCTGCCCGCCTTAATCGACTGAAGAAGAAGGAGTACGTGATGGGGCTGGAGAGTCGAGTCCGGGGTCTGGCAGCCGAGAACCAGGAGCTGCGGGCCGAGAATCGGGAGCTGGGCAAACGCGTACAGGCACTGCAGGAGGAGAGTCGCTACCTACGGGCAGTCTTAGCCAAC\"  #>                                                                                                                                                                                                 BATF2  #> \"CCCAAGGAGCAACAAAGGCAGCTGAAGAAGCAGAAGAACCGGGCAGCCGCCCAGCGAAGCCGGCAGAAGCACACAGACAAGGCAGACGCCCTGCACCAGCAGCACGAGTCTCTGGAAAAAGACAACCTCGCCCTGCGGAAGGAGATCCAGTCCCTGCAGGCCGAGCTGGCGTGGTGGAGCCGGACCCTGCACGTG\"  #>                                                                                                                                                                                                 BATF3  #> \"GAGGATGATGACAGGAAGGTCCGAAGGAGAGAAAAAAACCGAGTTGCTGCTCAGAGAAGTCGGAAGAAGCAGACCCAGAAGGCTGACAAGCTCCATGAGGAATATGAGAGCCTGGAGCAAGAAAACACCATGCTGCGGAGAGAGATCGGGAAGCTGACAGAGGAGCTGAAGCACCTGACAGAGGCACTGAAGGAG\"  #>                                                                                                                                                                                                 CEBPE  #> \"AAAGATAGCCTTGAGTACCGGCTGAGGCGGGAGCGCAACAACATCGCCGTGCGCAAGAGCCGAGACAAGGCCAAGAGGCGCATTCTGGAGACGCAGCAGAAGGTGCTGGAGTACATGGCAGAGAACGAGCGCCTCCGCAGCCGCGTGGAGCAGCTCACCCAGGAGCTAGACACCCTCCGCAACCTCTTCCGCCAG\"  #>                                                                                                                                                                                                 BACH1  #> \"CTGGATTGTATCCATGATATTCGAAGAAGAAGTAAAAACAGAATTGCTGCACAGCGCTGTCGCAAGAGAAAACTTGACTGTATACAGAATCTTGAATCAGAAATTGAGAAGCTGCAAAGTGAAAAGGAGAGCTTGTTGAAGGAAAGAGATCACATTTTGTCAACTCTGGGTGAGACAAAGCAGAACCTAACTGGA\"  #>                                                                                                                                                                                                 BACH2  #> \"TTAGAGTTTATTCATGATGTCCGACGGCGCAGCAAGAACCGCATCGCGGCCCAGCGCTGCCGCAAAAGGAAACTGGACTGTATTCAGAATTTAGAATGTGAAATCCGCAAATTGGTGTGTGAGAAAGAGAAACTGTTGTCAGAGAGGAATCAACTGAAAGCATGCATGGGGGAACTGTTGGACAACTTCTCCTGC\"  #>                                                                                                                                                                                                NFE2L1  #> \"CTGAGCCTCATCCGAGACATCCGGCGCCGGGGCAAGAACAAGATGGCGGCGCAGAACTGCCGCAAGCGCAAGCTGGACACCATCCTGAATCTGGAGCGTGATGTGGAGGACCTGCAGCGTGACAAAGCCCGGCTGCTGCGGGAGAAAGTGGAGTTCCTGCGCTCCCTGCGACAGATGAAGCAGAAGGTCCAGAGC\"  #>                                                                                                                                                                                                  NFE2  #> \"CTAGCGCTAGTCCGGGACATCCGACGACGGGGCAAAAACAAGGTGGCAGCCCAGAACTGCCGCAAGAGGAAGCTGGAAACCATTGTGCAGCTGGAGCGGGAGCTGGAGCGGCTGACCAATGAACGGGAGCGGCTTCTCAGGGCCCGCGGGGAGGCAGACCGGACCCTGGAGGTCATGCGCCAACAGCTGACAGAG\"  #>                                                                                                                                                                                                 NFIL3  #> \"AAGAAAGATGCTATGTATTGGGAAAAAAGGCGGAAAAATAATGAAGCTGCCAAAAGATCTCGTGAGAAGCGTCGACTGAATGACCTGGTTTTAGAGAACAAACTAATTGCACTGGGAGAAGAAAACGCCACTTTAAAAGCTGAGCTGCTTTCACTAAAATTAAAGTTTGGTTTAATTAGCTCCACAGCATATGCT\"  #>                                                                                                                                                                                                   FOS  #> \"GAAGAAGAAGAGAAAAGGAGAATCCGAAGGGAAAGGAATAAGATGGCTGCAGCCAAATGCCGCAACCGGAGGAGGGAGCTGACTGATACACTCCAAGCGGAGACAGACCAACTAGAAGATGAGAAGTCTGCTTTGCAGACCGAGATTGCCAACCTGCTGAAGGAGAAGGAAAAACTAGAGTTCATCCTGGCAGCT\"  #>                                                                                                                                                                                                  FOSB  #> \"GAGGAAGAGGAGAAGCGAAGGGTGCGCCGGGAACGAAATAAACTAGCAGCAGCTAAATGCAGGAACCGGCGGAGGGAGCTGACCGACCGACTCCAGGCGGAGACAGATCAGTTGGAGGAAGAAAAAGCAGAGCTGGAGTCGGAGATCGCCGAGCTCCAAAAGGAGAAGGAACGTCTGGAGTTTGTGCTGGTGGCC\"  #>                                                                                                                                                                                                 FOSL1  #> \"GAGGAAGAGGAGCGCCGCCGAGTAAGGCGCGAGCGGAACAAGCTGGCTGCGGCCAAGTGCAGGAACCGGAGGAAGGAACTGACCGACTTCCTGCAGGCGGAGACTGACAAACTGGAAGATGAGAAATCTGGGCTGCAGCGAGAGATTGAGGAGCTGCAGAAGCAGAAGGAGCGCCTAGAGCTGGTGCTGGAAGCC\"  #>                                                                                                                                                                                                 FOSL2  #> \"GAAGAGGAGGAGAAGCGTCGCATCCGGCGGGAGAGGAACAAGCTGGCTGCAGCCAAGTGCCGGAACCGACGCCGGGAGCTGACAGAGAAGCTGCAGGCGGAGACAGAGGAGCTGGAGGAGGAGAAGTCAGGCCTGCAGAAGGAGATTGCTGAGCTGCAGAAGGAGAAGGAGAAGCTGGAGTTCATGTTGGTGGCT\"  #>                                                                                                                                                                                                  MAFB  #> \"GTGATCCGCCTGAAGCAGAAGCGGCGGACCCTGAAGAACCGGGGCTACGCCCAGTCTTGCAGGTATAAACGCGTCCAGCAGAAGCACCACCTGGAGAATGAGAAGACGCAGCTCATTCAGCAGGTGGAGCAGCTTAAGCAGGAGGTGTCCCGGCTGGCCCGCGAGAGAGACGCCTACAAGGTCAAGTGCGAGAAA\"  #>                                                                                                                                                                                                   JUN  #> \"CAGGAGCGGATCAAGGCGGAGAGGAAGCGCATGAGGAACCGCATCGCTGCCTCCAAGTGCCGAAAAAGGAAGCTGGAGAGAATCGCCCGGCTGGAGGAAAAAGTGAAAACCTTGAAAGCTCAGAACTCGGAGCTGGCGTCCACGGCCAACATGCTCAGGGAACAGGTGGCACAGCTTAAACAGAAAGTCATGAAC\"  #>                                                                                                                                                                                                  JUNB  #> \"CAAGAGCGCATCAAAGTGGAGCGCAAGCGGCTGCGGAACCGGCTGGCGGCCACCAAGTGCCGGAAGCGGAAGCTGGAGCGCATCGCGCGCCTGGAGGACAAGGTGAAGACGCTCAAGGCCGAGAACGCGGGGCTGTCGAGTACCGCCGGCCTCCTCCGGGAGCAGGTGGCCCAGCTCAAACAGAAGGTCATGACC\"  #>                                                                                                                                                                                                  JUND  #> \"CAGGAGCGCATCAAGGCGGAGCGCAAGCGGCTGCGCAACCGCATCGCCGCCTCCAAGTGCCGCAAGCGCAAGCTGGAGCGCATCTCGCGCCTGGAAGAGAAAGTGAAGACCCTCAAGAGTCAGAACACGGAGCTGGCGTCCACGGCGAGCCTGCTGCGCGAGCAGGTGGCGCAGCTCAAGCAGAAAGTCCTCAGC\"  #>                                                                                                                                                                                                 CREB3  #> \"GAACAAATTCTGAAACGTGTGCGGAGGAAGATTCGAAATAAAAGATCTGCTCAAGAGAGCCGCAGGAAAAAGAAGGTGTATGTTGGGGGTTTAGAGAGCAGGGTCTTGAAATACACAGCCCAGAATATGGAGCTTCAGAACAAAGTACAGCTTCTGGAGGAACAGAATTTGTCCCTTCTAGATCAACTGAGGAAA\"  #>                                                                                                                                                                                                   HLF  #> \"CTGAAGGATGACAAGTACTGGGCAAGGCGCAGAAAGAACAACATGGCAGCCAAGCGCTCCCGCGACGCCCGGAGGCTGAAAGAGAACCAGATCGCCATCCGGGCCTCGTTCCTGGAGAAGGAGAACTCGGCCCTCCGCCAGGAGGTGGCTGACTTGAGGAAGGAGCTGGGCAAATGCAAGAACATACTTGCCAAG\"  #>                                                                                                                                                                                                  MAFG  #> \"ATCGTCCAGCTGAAGCAGCGCCGGCGCACGCTCAAGAACCGCGGCTACGCTGCCAGCTGCCGCGTGAAGCGGGTGACGCAGAAGGAGGAGCTGGAGAAGCAGAAGGCGGAGCTGCAGCAGGAGGTGGAGAAGCTGGCCTCAGAGAACGCCAGCATGAAGCTGGAGCTCGACGCGCTGCGCTCCAAGTACGAGGCG\"  #>                                                                                                                                                                                                  MAFK  #> \"GTGACCCGCCTGAAGCAGCGTCGGCGCACACTCAAGAACCGCGGCTACGCGGCCAGCTGCCGCATCAAGCGGGTGACGCAGAAGGAGGAGCTGGAGCGGCAGCGCGTGGAGCTGCAGCAGGAGGTGGAGAAGCTGGCGCGTGAGAACAGCAGCATGCGGCTGGAGCTGGACGCCCTGCGCTCCAAGTACGAGGCG\"  #>                                                                                                                                                                                                  XBP1  #> \"AGCCCCGAGGAGAAGGCGCTGAGGAGGAAACTGAAAAACAGAGTAGCAGCTCAGACTGCCAGAGATCGAAAGAAGGCTCGAATGAGTGAGCTGGAACAGCAAGTGGTAGATTTAGAAGAAGAGAACCAAAAACTTTTGCTAGAAAATCAGCTTTTACGAGAGAAAACTCATGGCCTTGTAGTTGAGAACCAGGAG\"  #>                                                                                                                                                                                                  ATF6  #> \"ATTGCTGTGCTAAGGAGACAGCAACGTATGATAAAAAATCGAGAATCCGCTTGTCAGTCTCGCAAGAAGAAGAAAGAATATATGCTAGGGTTAGAGGCGAGATTAAAGGCTGCCCTCTCAGAAAACGAGCAACTGAAGAAAGAAAATGGAACACTGAAGCGGCAGCTGGATGAAGTTGTGTCAGAGAACCAGAGG\"  #>                                                                                                                                                                                                 ATF6B  #> \"GCAAAGCTGCTGAAGCGGCAGCAGCGAATGATCAAGAACCGGGAGTCAGCCTGCCAGTCCCGGAGAAAGAAGAAAGAGTATCTGCAGGGACTGGAGGCTCGGCTGCAAGCAGTACTGGCTGACAACCAGCAGCTCCGCCGAGAGAATGCTGCCCTCCGGCGGCGGCTGGAGGCCCTGCTGGCTGAAAACAGCGAG\"  #>                                                                                                                                                                                                 CEBPA  #> \"AAGAACAGCAACGAGTACCGGGTGCGGCGCGAGCGCAACAACATCGCGGTGCGCAAGAGCCGCGACAAGGCCAAGCAGCGCAACGTGGAGACGCAGCAGAAGGTGCTGGAGCTGACCAGTGACAATGACCGCCTGCGCAAGCGGGTGGAACAGCTGAGCCGCGAACTGGACACGCTGCGGGGCATCTTCCGCCAG\"  #>                                                                                                                                                                                                 CEBPB  #> \"AAGCACAGCGACGAGTACAAGATCCGGCGCGAGCGCAACAACATCGCCGTGCGCAAGAGCCGCGACAAGGCCAAGATGCGCAACCTGGAGACGCAGCACAAGGTCCTGGAGCTCACGGCCGAGAACGAGCGGCTGCAGAAGAAGGTGGAGCAGCTGTCGCGCGAGCTCAGCACCCTGCGGAACTTGTTCAAGCAG\"  #>                                                                                                                                                                                                 CEBPD  #> \"CGCGGCAGCCCCGAGTACCGGCAGCGGCGCGAGCGCAACAACATCGCCGTGCGCAAGAGCCGCGACAAGGCCAAGCGGCGCAACCAGGAGATGCAGCAGAAGTTGGTGGAGCTGTCGGCTGAGAACGAGAAGCTGCACCAGCGCGTGGAGCAGCTCACGCGGGACCTGGCCGGCCTCCGGCAGTTCTTCAAGCAG\"  #>                                                                                                                                                                                                 CEBPG  #> \"CGAAACAGTGACGAGTATCGGCAACGCCGAGAGAGGAACAACATGGCTGTGAAAAAGAGCCGGTTGAAAAGCAAGCAGAAAGCACAAGACACACTGCAGAGAGTCAATCAGCTCAAAGAAGAGAATGAACGGTTGGAAGCAAAAATCAAATTGCTGACCAAGGAATTAAGTGTACTCAAAGATTTGTTTCTTGAG\"  #>                                                                                                                                                                                                 CREB1  #>             \"GAAGCAGCACGAAAGAGAGAGGTCCGTCTAATGAAGAACAGGGAAGCAGCTCGAGAGTGTCGTAGAAAGAAGAAAGAATATGTGAAATGTTTAGAAAACAGAGTGGCAGTGCTTGAAAATCAAAACAAGACATTGATTGAGGAGCTAAAAGCACTTAAGGACCTTTACTGCCACAAATCAGAT\"  #>                                                                                                                                                                                               CREB3L1  #> \"GAGAAGGCCTTGAAGAGAGTCCGGAGGAAAATCAAGAACAAGATCTCAGCCCAGGAGAGCCGTCGTAAGAAGAAGGAGTATGTGGAGTGTCTAGAAAAGAAGGTGGAGACATTTACATCTGAGAACAATGAACTGTGGAAGAAGGTGGAGACCCTGGAGAATGCCAACAGGACCCTGCTCCAGCAGCTGCAGAAA\"  #>                                                                                                                                                                                               CREB3L2  #> \"GAGAAGGCCCTGAAGAAAATTCGGAGGAAGATCAAGAATAAGATTTCTGCTCAGGAAAGTAGGAGAAAGAAGAAAGAATACATGGACAGCCTGGAGAAAAAAGTGGAGTCTTGTTCAACTGAGAACTTGGAGCTTCGGAAGAAGGTAGAGGTTCTAGAGAACACTAATAGGACTCTCCTTCAGCAACTCCAGAAG\"  #>                                                                                                                                                                                               CREB3L3  #> \"GAGCGAGTGCTGAAAAAAATCCGCCGGAAAATCCGGAACAAGCAGTCGGCGCAAGAAAGCAGGAAGAAGAAGAAGGAATATATCGATGGCCTGGAGACTCGGATGTCAGCTTGCACTGCTCAGAATCAGGAGTTACAGAGGAAAGTCTTGCATCTCGAGAAGCAAAACCTGTCCCTCTTGGAGCAACTGAAGAAA\"  #>                                                                                                                                                                                               CREB3L4  #> \"GAGAGGGTCCTCAAGAAGGTCAGGAGGAAAATCCGTAACAAGCAGTCAGCTCAGGACAGTCGGCGGCGGAAGAAGGAGTACATTGATGGGCTGGAGAGCAGGGTGGCAGCCTGTTCTGCACAGAACCAAGAATTACAGAAAAAAGTCCAGGAGCTGGAGAGGCACAACATCTCCTTGGTAGCTCAGCTCCGCCAG\"  #>                                                                                                                                                                                                CREBL2  #> \"CCAGCCAAAATTGACTTGAAAGCAAAACTTGAGAGGAGCCGGCAGAGTGCAAGAGAATGCCGAGCCCGAAAAAAGCTGAGATATCAGTATTTGGAAGAGTTGGTATCCAGTCGAGAAAGAGCTATATGTGCCCTCAGAGAGGAACTGGAAATGTACAAGCAGTGGTGCATGGCAATGGACCAAGGAAAAATCCCT\"  #>                                                                                                                                                                                                CREBRF  #> \"CCCTTAACAGCCCGACCAAGGTCAAGGAAGGAAAAAAATAAGCTGGCTTCCAGAGCTTGTCGGTTAAAGAAGAAAGCCCAGTATGAAGCTAATAAAGTGAAATTATGGGGCCTCAACACAGAATATGATAATTTATTGTTTGTAATCAACTCCATCAAGCAAGAGATTGTAAACCGGGTACAGAATCCAAGAGAT\"  #>                                                                                                                                                                                                   DBP  #> \"CAGAAGGATGAGAAATACTGGAGCCGGCGGTACAAGAACAACGAGGCAGCCAAGCGGTCCCGTGACGCCCGGCGGCTCAAGGAGAACCAGATATCGGTGCGGGCGGCCTTCCTGGAGAAGGAGAACGCCCTGCTGCGGCAGGAAGTTGTGGCCGTGCGCCAGGAGCTGTCCCACTACCGCGCCGTGCTGTCCCGA\"  #>                                                                                                                                                                                                NFE2L2  #> \"CTTGCATTAATTCGGGATATACGTAGGAGGGGTAAGAATAAAGTGGCTGCTCAGAATTGCAGAAAAAGAAAACTGGAAAATATAGTAGAACTAGAGCAAGATTTAGATCATTTGAAAGATGAAAAAGAAAAATTGCTCAAAGAAAAAGGAGAAAATGACAAAAGCCTTCACCTACTGAAAAAACAACTCAGCACC\"  #>                                                                                                                                                                                                NFE2L3  #> \"GTCTCACTTATCCGTGACATCAGACGAAGAGGGAAAAATAAAGTTGCTGCGCAGAACTGTCGTAAACGCAAATTGGACATAATTTTGAATTTAGAAGATGATGTATGTAACTTGCAAGCAAAGAAGGAAACTCTTAAGAGAGAGCAAGCACAATGTAACAAAGCTATTAACATAATGAAACAGAAACTGCATGAC\"  #>                                                                                                                                                                                                   TEF  #> \"CAGAAGGATGAAAAGTACTGGACAAGACGCAAGAAGAACAACGTGGCAGCTAAACGGTCACGGGATGCCCGGCGCCTGAAAGAGAATCAGATCACCATCCGGGCAGCCTTCCTGGAGAAGGAGAACACAGCCCTGCGGACGGAGGTGGCCGAGCTACGCAAGGAGGTGGGCAAGTGCAAGACCATCGTGTCCAAG\"  #>  #> $wildTypeReverse #>                                                                                                JUN  #> \"ATCGCCCGGCTGGAGGAAAAAGTGAAAACCTTGAAAGCTCAGAACTCGGAGCTGGCGTCCACGGCCAACATGCTCAGGGAACAGGTGGCACAGCTT\"  #>  #> $constantForward #> [1] \"\" #>  #> $constantReverse #> [1] \"\" #>  #> $avePhredMinForward #> [1] 20 #>  #> $avePhredMinReverse #> [1] 20 #>  #> $variableNMaxForward #> [1] 0 #>  #> $variableNMaxReverse #> [1] 0 #>  #> $umiNMax #> [1] 0 #>  #> $nbrMutatedCodonsMaxForward #> [1] 0 #>  #> $nbrMutatedCodonsMaxReverse #> [1] 1 #>  #> $nbrMutatedBasesMaxForward #> [1] -1 #>  #> $nbrMutatedBasesMaxReverse #> [1] -1 #>  #> $forbiddenMutatedCodonsForward #> character(0) #>  #> $forbiddenMutatedCodonsReverse #>  [1] \"AAA\" \"AAT\" \"ACA\" \"ACT\" \"AGA\" \"AGT\" \"ATA\" \"ATT\" \"CAA\" \"CAT\" \"CCA\" \"CCT\" #> [13] \"CGA\" \"CGT\" \"CTA\" \"CTT\" \"GAA\" \"GAT\" \"GCA\" \"GCT\" \"GGA\" \"GGT\" \"GTA\" \"GTT\" #> [25] \"TAA\" \"TAT\" \"TCA\" \"TCT\" \"TGA\" \"TGT\" \"TTA\" \"TTT\" #>  #> $useTreeWTmatch #> [1] FALSE #>  #> $collapseToWTForward #> [1] FALSE #>  #> $collapseToWTReverse #> [1] FALSE #>  #> $mutatedPhredMinForward #> [1] 0 #>  #> $mutatedPhredMinReverse #> [1] 0 #>  #> $mutNameDelimiter #> [1] \".\" #>  #> $constantMaxDistForward #> [1] -1 #>  #> $constantMaxDistReverse #> [1] -1 #>  #> $umiCollapseMaxDist #> [1] 0 #>  #> $filteredReadsFastqForward #> [1] \"\" #>  #> $filteredReadsFastqReverse #> [1] \"\" #>  #> $maxNReads #> [1] -1 #>  #> $nThreads #> [1] 1 #>  #> $chunkSize #> [1] 100000 #>  #> $maxReadLength #> [1] 1024 #>  #> $processingInfo #> [1] \"Processed by mutscan v0.3.4 on 2025-01-20 12:24:19.335284\" leujunt0$filterSummary #>   nbrTotal f1_nbrAdapter f2_nbrNoPrimer f3_nbrReadWrongLength #> 1     1000             0            126                     0 #>   f4_nbrNoValidOverlap f5_nbrAvgVarQualTooLow f6_nbrTooManyNinVar #> 1                    0                      0                  76 #>   f7_nbrTooManyNinUMI f8_nbrTooManyBestWTHits f9_nbrMutQualTooLow #> 1                   0                       0                   0 #>   f10a_nbrTooManyMutCodons f10b_nbrTooManyMutBases f11_nbrForbiddenCodons #> 1                      195                       0                      3 #>   f12_nbrTooManyMutConstant f13_nbrTooManyBestConstantHits nbrRetained #> 1                         0                              0         600 head(leujunt0$summaryTable) #>             mutantName #> 1 ATF2.0.WT_JUN.13.CCC #> 2 ATF2.0.WT_JUN.20.TGG #> 3 ATF2.0.WT_JUN.32.CGG #> 4  ATF2.0.WT_JUN.4.ATG #> 5  ATF2.0.WT_JUN.5.ATG #> 6  ATF2.0.WT_JUN.6.GAG #>                                                                                                                                                                                                     sequence #> 1 GATCCTGATGAAAAAAGGAGAAAGTTTTTAGAGCGAAATAGAGCAGCAGCTTCAAGATGCCGACAAAAAAGGAAAGTCTGGGTTCAGTCTTTAGAGAAGAAAGCT_ATCGCCCGGCTGGAGGAAAAAGTGAAAACCTTGAAACCCCAGAACTCGGAGCTGGCGTCCACGGCCAACATGCTCAGGGAACAGGTGGCACAGCTT #> 2   GATCCTGATGAAAAAAGGAGAAAGTTTTTAGAGCGAAATAGAGCAGCAGCTTCAAGATGCCGACAAAAAAGGAAAGTCTGGGTTCAGTCTTTAGAGAAGAAAG_ATCGCCCGGCTGGAGGAAAAAGTGAAAACCTTGAAAGCTCAGAACTCGGAGCTGGCGTGGACGGCCAACATGCTCAGGGAACAGGTGGCACAGCTT #> 3  GATCCTGATGAAAAAAGGAGAAAGTTTTTAGAGCGAAATAGAGCAGCAGCTTCAAGATGCCGACAAAAAAGGAAAGTCTGGGTTCAGTCTTTAGAGAAGAAAGC_ATCGCCCGGCTGGAGGAAAAAGTGAAAACCTTGAAAGCTCAGAACTCGGAGCTGGCGTCCACGGCCAACATGCTCAGGGAACAGGTGGCACAGCGG #> 4  GATCCTGATGAAAAAAGGAGAAAGTTTTTAGAGCGAAATAGAGCAGCAGCTTCAAGATGCCGACAAAAAAGGAAAGTCTGGGTTCAGTCTTTAGAGAAGAAAGC_ATCGCCCGGATGGAGGAAAAAGTGAAAACCTTGAAAGCTCAGAACTCGGAGCTGGCGTCCACGGCCAACATGCTCAGGGAACAGGTGGCACAGCTT #> 5 GATCCTGATGAAAAAAGGAGAAAGTTTTTAGAGCGAAATAGAGCAGCAGCTTCAAGATGCCGACAAAAAAGGAAAGTCTGGGTTCAGTCTTTAGAGAAGAAAGCT_ATCGCCCGGCTGATGGAAAAAGTGAAAACCTTGAAAGCTCAGAACTCGGAGCTGGCGTCCACGGCCAACATGCTCAGGGAACAGGTGGCACAGCTT #> 6 GATCCTGATGAAAAAAGGAGAAAGTTTTTAGAGCGAAATAGAGCAGCAGCTTCAAGATGCCGACAAAAAAGGAAAGTCTGGGTTCAGTCTTTAGAGAAGAAAGCT_ATCGCCCGGCTGGAGGAGAAAGTGAAAACCTTGAAAGCTCAGAACTCGGAGCTGGCGTCCACGGCCAACATGCTCAGGGAACAGGTGGCACAGCTT #>   nbrReads maxNbrReads nbrUmis nbrMutBases nbrMutCodons nbrMutAAs varLengths #> 1        1           1       0           2            1         1     105_96 #> 2        1           1       0           2            1         1     103_96 #> 3        1           1       0           2            1         1     104_96 #> 4        1           1       0           1            1         1     104_96 #> 5        1           1       0           2            1         1     105_96 #> 6        1           1       0           1            1         0     105_96 #>                mutantNameBase      mutantNameCodon          mutantNameBaseHGVS #> 1 ATF2.0.WT_JUN.37.C_JUN.39.C ATF2.0.WT_JUN.13.CCC ATF2:c_JUN:c.37_39delinsCCC #> 2 ATF2.0.WT_JUN.59.G_JUN.60.G ATF2.0.WT_JUN.20.TGG  ATF2:c_JUN:c.59_60delinsGG #> 3 ATF2.0.WT_JUN.95.G_JUN.96.G ATF2.0.WT_JUN.32.CGG  ATF2:c_JUN:c.95_96delinsGG #> 4          ATF2.0.WT_JUN.10.A  ATF2.0.WT_JUN.4.ATG          ATF2:c_JUN:c.10C>A #> 5 ATF2.0.WT_JUN.13.A_JUN.14.T  ATF2.0.WT_JUN.5.ATG  ATF2:c_JUN:c.13_14delinsAT #> 6          ATF2.0.WT_JUN.18.G  ATF2.0.WT_JUN.6.GAG          ATF2:c_JUN:c.18A>G #>         mutantNameAA        mutantNameAAHGVS mutationTypes #> 1 ATF2.0.WT_JUN.13.P ATF2:p_JUN:p.(Ala13Pro) nonsynonymous #> 2 ATF2.0.WT_JUN.20.W ATF2:p_JUN:p.(Ser20Trp) nonsynonymous #> 3 ATF2.0.WT_JUN.32.R ATF2:p_JUN:p.(Leu32Arg) nonsynonymous #> 4  ATF2.0.WT_JUN.4.M  ATF2:p_JUN:p.(Leu4Met) nonsynonymous #> 5  ATF2.0.WT_JUN.5.M  ATF2:p_JUN:p.(Glu5Met) nonsynonymous #> 6 ATF2.0.WT_JUN.0.WT            ATF2:p_JUN:p        silent #>                                                             sequenceAA #> 1 DPDEKRRKFLERNRAAASRCRQKRKVWVQSLEKKA_IARLEEKVKTLKPQNSELASTANMLREQVAQL #> 2  DPDEKRRKFLERNRAAASRCRQKRKVWVQSLEKK_VARLEEKVKTLKAQNSELAWTANMLREQVAQL #> 3  DPDEKRRKFLERNRAAASRCRQKRKVWVQSLEKK_EARLEEKVKTLKAQNSELASTANMLREQVAQR #> 4  DPDEKRRKFLERNRAAASRCRQKRKVWVQSLEKK_EARMEEKVKTLKAQNSELASTANMLREQVAQL #> 5 DPDEKRRKFLERNRAAASRCRQKRKVWVQSLEKKA_IARLMEKVKTLKAQNSELASTANMLREQVAQL #> 6 DPDEKRRKFLERNRAAASRCRQKRKVWVQSLEKKA_IARLEEKVKTLKAQNSELASTANMLREQVAQL"},{"path":"https://fmicompbio.github.io/mutscan/articles/mutscan.html","id":"combining-samples","dir":"Articles","previous_headings":"","what":"Combining samples","title":"Multiplexed assays of variant effect analysis with `mutscan`","text":"digestFastqs() function processes sample (pair FASTQ files) separately. order prepare data downstream statistical analysis plotting, summarizeExperiment() function takes named list outputs digestFastqs(), data.frame sample annotations, generates SummarizedExperiment object, assay containing either UMI read counts. illustrate , process also output sample TRANS experiment processed input sample , feed outputs summarizeExperiment().","code":"transOutput <- digestFastqs(     fastqForward = file.path(datadir, \"transOutput_1.fastq.gz\"),     fastqReverse = file.path(datadir, \"transOutput_2.fastq.gz\"),     mergeForwardReverse = FALSE,      revComplForward = FALSE,      revComplReverse = FALSE,     adapterForward = \"GGAAGAGCACACGTC\",      adapterReverse = \"GGAAGAGCGTCGTGT\",      elementsForward = \"SUCV\",      elementsReverse = \"SUCV\",     elementLengthsForward = c(1, 10, 18, 96),     elementLengthsReverse = c(1, 8, 20, 96),     constantForward = \"AACCGGAGGAGGGAGCTG\",     constantReverse = \"GAAAAAGGAAGCTGGAGAGA\",      primerForward = \"\",      primerReverse = \"\",     avePhredMinForward = 20,      avePhredMinReverse = 20,     variableNMaxForward = 0,      variableNMaxReverse = 0,      umiNMax = 0,     wildTypeForward = c(FOS = \"ACTGATACACTCCAAGCGGAGACAGACCAACTAGAAGATGAGAAGTCTGCTTTGCAGACCGAGATTGCCAACCTGCTGAAGGAGAAGGAAAAACTA\"),      wildTypeReverse = c(JUN = \"ATCGCCCGGCTGGAGGAAAAAGTGAAAACCTTGAAAGCTCAGAACTCGGAGCTGGCGTCCACGGCCAACATGCTCAGGGAACAGGTGGCACAGCTT\"),      nbrMutatedCodonsMaxForward = 1,      nbrMutatedCodonsMaxReverse = 1,      forbiddenMutatedCodonsForward = \"NNW\",      forbiddenMutatedCodonsReverse = \"NNW\",     mutNameDelimiter = \".\",      constantMaxDistForward = -1,     constantMaxDistReverse = -1,     verbose = FALSE )  ## Generate SummarizedExperiment object se <- summarizeExperiment(     x = list(sample1 = transInput,              sample2 = transOutput),     coldata = data.frame(Name = c(\"sample1\", \"sample2\"),                          Condition = c(\"input\", \"output\"),                          Replicate = c(\"R1\", \"R1\"),                          OD = c(0.05, 1.5)) )  ## The SummarizedExperiment contains a count matrix, and annotations  ## for samples and variants in the `colData` and `rowData`,  ## respectively. head(assay(se, \"counts\")) #> 6 x 2 sparse Matrix of class \"dgCMatrix\" #>                     sample1 sample2 #> FOS.0.WT_JUN.0.WT         .       1 #> FOS.0.WT_JUN.13.CCC       1       . #> FOS.0.WT_JUN.13.CTC       1       . #> FOS.0.WT_JUN.13.GCG       .       1 #> FOS.0.WT_JUN.2.TCC        1       . #> FOS.0.WT_JUN.20.ACC       1       . Matrix::colSums(assay(se, \"counts\")) #> sample1 sample2  #>     279     285 head(rowData(se)) #> DataFrame with 6 rows and 19 columns #>                              mutantName               sequence nbrMutBases #>                             <character>            <character> <character> #> FOS.0.WT_JUN.0.WT     FOS.0.WT_JUN.0.WT ACTGATACACTCCAAGCGGA..           0 #> FOS.0.WT_JUN.13.CCC FOS.0.WT_JUN.13.CCC ACTGATACACTCCAAGCGGA..           2 #> FOS.0.WT_JUN.13.CTC FOS.0.WT_JUN.13.CTC ACTGATACACTCCAAGCGGA..           3 #> FOS.0.WT_JUN.13.GCG FOS.0.WT_JUN.13.GCG ACTGATACACTCCAAGCGGA..           1 #> FOS.0.WT_JUN.2.TCC   FOS.0.WT_JUN.2.TCC ACTGATACACTCCAAGCGGA..           1 #> FOS.0.WT_JUN.20.ACC FOS.0.WT_JUN.20.ACC ACTGATACACTCCAAGCGGA..           1 #>                     minNbrMutBases maxNbrMutBases nbrMutCodons minNbrMutCodons #>                          <integer>      <integer>  <character>       <integer> #> FOS.0.WT_JUN.0.WT                0              0            0               0 #> FOS.0.WT_JUN.13.CCC              2              2            1               1 #> FOS.0.WT_JUN.13.CTC              3              3            1               1 #> FOS.0.WT_JUN.13.GCG              1              1            1               1 #> FOS.0.WT_JUN.2.TCC               1              1            1               1 #> FOS.0.WT_JUN.20.ACC              1              1            1               1 #>                     maxNbrMutCodons   nbrMutAAs minNbrMutAAs maxNbrMutAAs #>                           <integer> <character>    <integer>    <integer> #> FOS.0.WT_JUN.0.WT                 0           0            0            0 #> FOS.0.WT_JUN.13.CCC               1           1            1            1 #> FOS.0.WT_JUN.13.CTC               1           1            1            1 #> FOS.0.WT_JUN.13.GCG               1           0            0            0 #> FOS.0.WT_JUN.2.TCC                1           1            1            1 #> FOS.0.WT_JUN.20.ACC               1           1            1            1 #>                             mutantNameBase     mutantNameBaseHGVS #>                                <character>            <character> #> FOS.0.WT_JUN.0.WT        FOS.0.WT_JUN.0.WT            FOS:c_JUN:c #> FOS.0.WT_JUN.13.CCC FOS.0.WT_JUN.37.C_JU.. FOS:c_JUN:c.37_39del.. #> FOS.0.WT_JUN.13.CTC FOS.0.WT_JUN.37.C_JU.. FOS:c_JUN:c.37_39del.. #> FOS.0.WT_JUN.13.GCG      FOS.0.WT_JUN.39.G      FOS:c_JUN:c.39T>G #> FOS.0.WT_JUN.2.TCC        FOS.0.WT_JUN.4.T       FOS:c_JUN:c.4G>T #> FOS.0.WT_JUN.20.ACC      FOS.0.WT_JUN.58.A      FOS:c_JUN:c.58T>A #>                         mutantNameCodon      mutantNameAA #>                             <character>       <character> #> FOS.0.WT_JUN.0.WT     FOS.0.WT_JUN.0.WT FOS.0.WT_JUN.0.WT #> FOS.0.WT_JUN.13.CCC FOS.0.WT_JUN.13.CCC FOS.0.WT_JUN.13.P #> FOS.0.WT_JUN.13.CTC FOS.0.WT_JUN.13.CTC FOS.0.WT_JUN.13.L #> FOS.0.WT_JUN.13.GCG FOS.0.WT_JUN.13.GCG FOS.0.WT_JUN.0.WT #> FOS.0.WT_JUN.2.TCC   FOS.0.WT_JUN.2.TCC  FOS.0.WT_JUN.2.S #> FOS.0.WT_JUN.20.ACC FOS.0.WT_JUN.20.ACC FOS.0.WT_JUN.20.T #>                           mutantNameAAHGVS             sequenceAA mutationTypes #>                                <character>            <character>   <character> #> FOS.0.WT_JUN.0.WT              FOS:p_JUN:p TDTLQAETDQLEDEKSALQT..               #> FOS.0.WT_JUN.13.CCC FOS:p_JUN:p.(Ala13Pro) TDTLQAETDQLEDEKSALQT.. nonsynonymous #> FOS.0.WT_JUN.13.CTC FOS:p_JUN:p.(Ala13Leu) TDTLQAETDQLEDEKSALQT.. nonsynonymous #> FOS.0.WT_JUN.13.GCG            FOS:p_JUN:p TDTLQAETDQLEDEKSALQT..        silent #> FOS.0.WT_JUN.2.TCC   FOS:p_JUN:p.(Ala2Ser) TDTLQAETDQLEDEKSALQT.. nonsynonymous #> FOS.0.WT_JUN.20.ACC FOS:p_JUN:p.(Ser20Thr) TDTLQAETDQLEDEKSALQT.. nonsynonymous #>                      varLengths #>                     <character> #> FOS.0.WT_JUN.0.WT         96_96 #> FOS.0.WT_JUN.13.CCC       96_96 #> FOS.0.WT_JUN.13.CTC       96_96 #> FOS.0.WT_JUN.13.GCG       96_96 #> FOS.0.WT_JUN.2.TCC        96_96 #> FOS.0.WT_JUN.20.ACC       96_96 colData(se) #> DataFrame with 2 rows and 20 columns #>                Name   Condition   Replicate        OD  nbrTotal f1_nbrAdapter #>         <character> <character> <character> <numeric> <integer>     <integer> #> sample1     sample1       input          R1      0.05      1000           314 #> sample2     sample2      output          R1      1.50      1000           366 #>         f2_nbrNoPrimer f3_nbrReadWrongLength f4_nbrNoValidOverlap #>              <integer>             <integer>            <integer> #> sample1              0                     0                    0 #> sample2              0                     0                    0 #>         f5_nbrAvgVarQualTooLow f6_nbrTooManyNinVar f7_nbrTooManyNinUMI #>                      <integer>           <integer>           <integer> #> sample1                      7                   0                   0 #> sample2                      6                   0                   0 #>         f8_nbrTooManyBestWTHits f9_nbrMutQualTooLow f10a_nbrTooManyMutCodons #>                       <integer>           <integer>                <integer> #> sample1                       0                   0                      392 #> sample2                       0                   0                      338 #>         f10b_nbrTooManyMutBases f11_nbrForbiddenCodons #>                       <integer>              <integer> #> sample1                       0                      8 #> sample2                       0                      5 #>         f12_nbrTooManyMutConstant f13_nbrTooManyBestConstantHits nbrRetained #>                         <integer>                      <integer>   <integer> #> sample1                         0                              0         279 #> sample2                         0                              0         285  ## Count type (reads or UMIs) metadata(se)$countType #> [1] \"umis\""},{"path":"https://fmicompbio.github.io/mutscan/articles/mutscan.html","id":"collapsing-count-matrix-to-amino-acids","dir":"Articles","previous_headings":"","what":"Collapsing count matrix to amino acids","title":"Multiplexed assays of variant effect analysis with `mutscan`","text":"object generated summarizeExperiment() contains one row observed variant (combination). can collapsed replacing mutated codon corresponding amino acid, aggregating counts corresponding mutated amino acid (combination).","code":"se_collapsed <- collapseMutantsByAA(se) head(assay(se_collapsed, \"counts\")) #>                   sample1 sample2 #> FOS.0.WT_JUN.0.WT       1       3 #> FOS.0.WT_JUN.10.S       0       1 #> FOS.0.WT_JUN.12.L       0       1 #> FOS.0.WT_JUN.13.K       1       0 #> FOS.0.WT_JUN.13.L       1       0 #> FOS.0.WT_JUN.13.P       1       0 Matrix::colSums(assay(se_collapsed, \"counts\")) #> sample1 sample2  #>     279     285 colData(se_collapsed) #> DataFrame with 2 rows and 20 columns #>                Name   Condition   Replicate        OD  nbrTotal f1_nbrAdapter #>         <character> <character> <character> <numeric> <integer>     <integer> #> sample1     sample1       input          R1      0.05      1000           314 #> sample2     sample2      output          R1      1.50      1000           366 #>         f2_nbrNoPrimer f3_nbrReadWrongLength f4_nbrNoValidOverlap #>              <integer>             <integer>            <integer> #> sample1              0                     0                    0 #> sample2              0                     0                    0 #>         f5_nbrAvgVarQualTooLow f6_nbrTooManyNinVar f7_nbrTooManyNinUMI #>                      <integer>           <integer>           <integer> #> sample1                      7                   0                   0 #> sample2                      6                   0                   0 #>         f8_nbrTooManyBestWTHits f9_nbrMutQualTooLow f10a_nbrTooManyMutCodons #>                       <integer>           <integer>                <integer> #> sample1                       0                   0                      392 #> sample2                       0                   0                      338 #>         f10b_nbrTooManyMutBases f11_nbrForbiddenCodons #>                       <integer>              <integer> #> sample1                       0                      8 #> sample2                       0                      5 #>         f12_nbrTooManyMutConstant f13_nbrTooManyBestConstantHits nbrRetained #>                         <integer>                      <integer>   <integer> #> sample1                         0                              0         279 #> sample2                         0                              0         285"},{"path":"https://fmicompbio.github.io/mutscan/articles/mutscan.html","id":"diagnostic-plots","dir":"Articles","previous_headings":"","what":"Diagnostic plots","title":"Multiplexed assays of variant effect analysis with `mutscan`","text":"mutscan contains functionality generating variety diagnostic plots. illustrate using full CIS data set [@Diss2018], processed using digestFastqs() illustrated , summarized SummarizedExperiment object provided package. First, can plot summary filtering process, indicating number reads filtered (retained ) step mutscan filtering.   can also generate pairs plot displaying correlation among samples data set.  Additional plot functions can used visualize total count per sample, across variants, distribution variant counts per sample.   Finally, can create full QC report follows:","code":"se <- readRDS(file.path(datadir, \"GSE102901_cis_se.rds\")) plotFiltering(se, valueType = \"reads\", onlyActiveFilters = TRUE,                plotType = \"remaining\", facetBy = \"sample\", numberSize = 3) plotFiltering(se, valueType = \"fractions\", onlyActiveFilters = TRUE,               plotType = \"filtered\", facetBy = \"step\", numberSize = 3) plotPairs(se, selAssay = \"counts\") plotTotals(se, selAssay = \"counts\") plotDistributions(se, selAssay = \"counts\", plotType = \"density\",                    pseudocount = 1) generateQCReport(se, outFile = tempfile(fileext = \".html\"))"},{"path":"https://fmicompbio.github.io/mutscan/articles/mutscan.html","id":"calculating-fitness-scores","dir":"Articles","previous_headings":"","what":"Calculating fitness scores","title":"Multiplexed assays of variant effect analysis with `mutscan`","text":"function calculateFitnessScore() can used calculate fitness scores described [@Diss2018]. function requires user specify pairingCol, containing replicate ID sample; one ODCols, containing optical density sample, comparison, character vector length 3 specifying comparison perform, form (groupColumn, numerator, denominator). , groupColumn name column colData(se) contains grouping information, numerator denominator specify values column representing two groups compared. , illustrate application calculateFitnessScore() SummarizedExperiment object containing three CIS replicates [@Diss2018].","code":"se_collapsed <- collapseMutantsByAA(se) ppis <- calculateFitnessScore(se = se_collapsed, pairingCol = \"Replicate\",                                ODCols = c(\"OD1\", \"OD2\"),                               comparison = c(\"Condition\", \"cis_output\", \"cis_input\"),                               WTrows = \"f.0.WT\") head(ppis[order(abs(rowMeans(ppis)), decreasing = TRUE), , drop = FALSE]) #>        cis_output_vs_cis_input_repl1 cis_output_vs_cis_input_repl2 #> f.8.M                       1.079682                      1.077555 #> f.8.A                       1.077780                      1.087804 #> f.2.Q                       1.093753                      1.065724 #> f.3.M                       1.084323                      1.078138 #> f.9.K                       1.085896                      1.037838 #> f.13.K                      1.043217                      1.046260 #>        cis_output_vs_cis_input_repl3 #> f.8.M                       1.117395 #> f.8.A                       1.103149 #> f.2.Q                       1.065259 #> f.3.M                       1.050588 #> f.9.K                       1.062279 #> f.13.K                      1.095404  ## The PPI score for the WT sequence is 1, by construction ppis[\"f.0.WT\", , drop = FALSE] #>        cis_output_vs_cis_input_repl1 cis_output_vs_cis_input_repl2 #> f.0.WT                             1                             1 #>        cis_output_vs_cis_input_repl3 #> f.0.WT                             1"},{"path":"https://fmicompbio.github.io/mutscan/articles/mutscan.html","id":"scoring-mutations-with-edger-or-limma","dir":"Articles","previous_headings":"","what":"Scoring mutations with edgeR or limma","title":"Multiplexed assays of variant effect analysis with `mutscan`","text":"alternative fitness scoring, mutscan can used model observed counts using generalized linear model (edgeR) general linear model (limma) estimate logFC p-value enrichment variant betwen two conditions (generally, association predictor), compared one WT sequences. Note , least two replicates required. start looking design matrix, order determine coefficients specify testing calculateRelativeFC(). information set interpret design matrices edgeR limma, see e.g. Law et al (2020), Soneson et al (2020). Next, apply either edgeR limma extract logFCs mutants, compared wildtype sequence. mutscan also contains functions plotting results statistical testing - particular, MA (mean-difference) plots volcano plots can easily generated.","code":"model.matrix(~ Replicate + Condition,              data = colData(se_collapsed)) #>            (Intercept) Replicate Conditioncis_output #> SRR5952435           1         1                   0 #> SRR5952436           1         2                   0 #> SRR5952437           1         3                   0 #> SRR5952438           1         1                   1 #> SRR5952439           1         2                   1 #> SRR5952440           1         3                   1 #> attr(,\"assign\") #> [1] 0 1 2 #> attr(,\"contrasts\") #> attr(,\"contrasts\")$Condition #> [1] \"contr.treatment\" ## edgeR edger_scores <- calculateRelativeFC(     se = se_collapsed,     design = model.matrix(~ Replicate + Condition,                           data = colData(se_collapsed)),     coef = \"Conditioncis_output\", pseudocount = 1, WTrows = \"f.0.WT\",     method = \"edgeR\") head(edger_scores[order(edger_scores$PValue), , drop = FALSE]) #>            logFC   logCPM        F       PValue          FDR logFC_shrunk #> f.27.* -4.503560 11.12474 16172.16 3.565247e-23 1.334728e-20    -4.502839 #> f.7.G  -4.184414 11.14499 15059.76 5.920700e-23 1.334728e-20    -4.183983 #> f.28.* -4.387469 11.14116 14943.47 6.256538e-23 1.334728e-20    -4.386923 #> f.7.*  -4.460245 10.87738 13492.03 1.294621e-22 1.432912e-20    -4.459437 #> f.14.* -4.373858 10.90447 13378.94 1.374542e-22 1.432912e-20    -4.372994 #> f.28.G -3.942751 11.21716 13127.38 1.573324e-22 1.432912e-20    -3.942139 #>        df.total df.prior df.test #> f.27.* 14.24716 11.24713       1 #> f.7.G  14.24716 11.24713       1 #> f.28.* 14.24716 11.24713       1 #> f.7.*  14.24715 11.24713       1 #> f.14.* 14.24716 11.24713       1 #> f.28.G 14.24716 11.24713       1 ## As before, the WT sequence has a logFC close to 0, by construction edger_scores[\"f.0.WT\", , drop = FALSE] #>              logFC   logCPM F PValue FDR  logFC_shrunk df.total df.prior #> f.0.WT 9.04096e-16 19.30433 0      1   1 -2.332905e-15 14.24716 11.24713 #>        df.test #> f.0.WT       1  ## limma limma_scores <- calculateRelativeFC(     se = se_collapsed,     design = model.matrix(~ Replicate + Condition,                           data = colData(se_collapsed)),     coef = \"Conditioncis_output\", pseudocount = 1, WTrows = \"f.0.WT\",     method = \"limma\") head(limma_scores[order(limma_scores$P.Value), , drop = FALSE]) #>            logFC      CI.L      CI.R   AveExpr         t      P.Value #> f.27.* -4.503226 -4.619422 -4.387029  9.963039 -85.86612 3.260493e-16 #> f.28.* -4.387913 -4.502516 -4.273311 10.031042 -84.83135 3.699633e-16 #> f.7.G  -4.183232 -4.293439 -4.073026 10.124077 -84.10010 4.048945e-16 #> f.4.F  -2.897268 -2.973849 -2.820687 11.116524 -83.82173 4.191290e-16 #> f.21.G -4.080282 -4.194244 -3.966321 10.116854 -79.32743 7.442910e-16 #> f.29.* -4.469094 -4.593984 -4.344205 10.036584 -79.28394 7.485561e-16 #>           adj.P.Val        B   se.logFC df.total df.prior #> f.27.* 6.706064e-14 27.81637 0.05244474 10.43551 7.435512 #> f.28.* 6.706064e-14 27.72307 0.05172514 10.43551 7.435512 #> f.7.G  6.706064e-14 27.66804 0.04974111 10.43551 7.435512 #> f.4.F  6.706064e-14 27.65008 0.03456464 10.43551 7.435512 #> f.21.G 6.895977e-14 27.09024 0.05143595 10.43551 7.435512 #> f.29.* 6.895977e-14 27.05613 0.05636821 10.43551 7.435512 ## As before, the WT sequence has a logFC close to 0, by construction limma_scores[\"f.0.WT\", , drop = FALSE] #>               logFC        CI.L       CI.R  AveExpr           t   P.Value #> f.0.WT 2.842423e-08 -0.01353281 0.01353286 19.29458 4.65362e-06 0.9999964 #>        adj.P.Val         B    se.logFC df.total df.prior #> f.0.WT 0.9999964 -10.83369 0.006107981 10.43551 7.435512 plotMeanDiff(edger_scores, pointSize = \"large\") plotVolcano(edger_scores, pointSize = \"large\")"},{"path":[]},{"path":"https://fmicompbio.github.io/mutscan/articles/mutscan.html","id":"can-digestfastqs-process-a-sample-where-the-reads-are-spread-across-multiple-pairs-of-fastq-files","dir":"Articles","previous_headings":"FAQ","what":"Can digestFastqs process a sample where the reads are spread across multiple (pairs of) FASTQ files?","title":"Multiplexed assays of variant effect analysis with `mutscan`","text":"Yes, can specify vector FASTQ files fastqForward/fastqReverse. case, reads (pairs ) files analyzed came single FASTQ file. case paired-end data, take care specify forward reverse FASTQ files order.","code":""},{"path":"https://fmicompbio.github.io/mutscan/articles/mutscan.html","id":"session-info","dir":"Articles","previous_headings":"","what":"Session info","title":"Multiplexed assays of variant effect analysis with `mutscan`","text":"vignette compiled following system:","code":"sessionInfo() #> R version 4.4.2 (2024-10-31) #> Platform: aarch64-apple-darwin20 #> Running under: macOS Sonoma 14.7.2 #>  #> Matrix products: default #> BLAS:   /Library/Frameworks/R.framework/Versions/4.4-arm64/Resources/lib/libRblas.0.dylib  #> LAPACK: /Library/Frameworks/R.framework/Versions/4.4-arm64/Resources/lib/libRlapack.dylib;  LAPACK version 3.12.0 #>  #> locale: #> [1] en_US.UTF-8/en_US.UTF-8/en_US.UTF-8/C/en_US.UTF-8/en_US.UTF-8 #>  #> time zone: UTC #> tzcode source: internal #>  #> attached base packages: #> [1] stats4    stats     graphics  grDevices utils     datasets  methods   #> [8] base      #>  #> other attached packages: #>  [1] mutscan_0.3.4               SummarizedExperiment_1.36.0 #>  [3] Biobase_2.66.0              GenomicRanges_1.58.0        #>  [5] GenomeInfoDb_1.42.1         IRanges_2.40.1              #>  [7] S4Vectors_0.44.0            BiocGenerics_0.52.0         #>  [9] MatrixGenerics_1.18.1       matrixStats_1.5.0           #> [11] BiocStyle_2.34.0            #>  #> loaded via a namespace (and not attached): #>  [1] tidyselect_1.2.1        dplyr_1.1.4             farver_2.1.2            #>  [4] Biostrings_2.74.1       bitops_1.0-9            fastmap_1.2.0           #>  [7] GGally_2.2.1            digest_0.6.37           lifecycle_1.0.4         #> [10] statmod_1.5.0           magrittr_2.0.3          compiler_4.4.2          #> [13] rlang_1.1.5             sass_0.4.9              tools_4.4.2             #> [16] yaml_2.3.10             knitr_1.49              S4Arrays_1.6.0          #> [19] labeling_0.4.3          htmlwidgets_1.6.4       DelayedArray_0.32.0     #> [22] plyr_1.8.9              RColorBrewer_1.1-3      abind_1.4-8             #> [25] BiocParallel_1.40.0     withr_3.0.2             purrr_1.0.2             #> [28] desc_1.4.3              grid_4.4.2              colorspace_2.1-1        #> [31] edgeR_4.4.1             ggplot2_3.5.1           scales_1.3.0            #> [34] cli_3.6.3               rmarkdown_2.29          crayon_1.5.3            #> [37] ragg_1.3.3              generics_0.1.3          metapod_1.14.0          #> [40] httr_1.4.7              cachem_1.1.0            zlibbioc_1.52.0         #> [43] parallel_4.4.2          BiocManager_1.30.25     XVector_0.46.0          #> [46] vctrs_0.6.5             Matrix_1.7-1            jsonlite_1.8.9          #> [49] bookdown_0.42           ggrepel_0.9.6           systemfonts_1.2.0       #> [52] locfit_1.5-9.10         limma_3.62.2            jquerylib_0.1.4         #> [55] tidyr_1.3.1             glue_1.8.0              pkgdown_2.1.1.9000      #> [58] ggstats_0.8.0           codetools_0.2-20        DT_0.33                 #> [61] gtable_0.3.6            UCSC.utils_1.2.0        munsell_0.5.1           #> [64] tibble_3.2.1            pillar_1.10.1           csaw_1.40.0             #> [67] htmltools_0.5.8.1       GenomeInfoDbData_1.2.13 R6_2.5.1                #> [70] textshaping_0.4.1       evaluate_1.0.3          lattice_0.22-6          #> [73] Rsamtools_2.22.0        bslib_0.8.0             Rcpp_1.0.14             #> [76] SparseArray_1.6.0       xfun_0.50               fs_1.6.5                #> [79] pkgconfig_2.0.3"},{"path":"https://fmicompbio.github.io/mutscan/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Charlotte Soneson. Author, maintainer. Michael Stadler. Author. Friedrich Miescher Institute Biomedical Research. Copyright holder.","code":""},{"path":"https://fmicompbio.github.io/mutscan/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Soneson C, Bendel , Diss G, Stadler M (2023). “mutscan—flexible R package efficient end--end analysis multiplexed assays variant effect data.” Genome Biology, 24, 132. ISSN 1474-760X, doi:10.1186/s13059-023-02967-0, https://doi.org/10.1186/s13059-023-02967-0.","code":"@Article{,   title = {mutscan—a flexible R package for efficient end-to-end analysis of multiplexed assays of variant effect data},   author = {Charlotte Soneson and Alexandra M. Bendel and Guillaume Diss and Michael B. Stadler},   publisher = {Springer Nature},   journal = {Genome Biology},   year = {2023},   month = {Jun},   volume = {24},   pages = {132},   doi = {10.1186/s13059-023-02967-0},   issn = {1474-760X},   url = {https://doi.org/10.1186/s13059-023-02967-0},   abstract = {Multiplexed assays of variant effect (MAVE) experimentally measure the effect of large numbers of sequence variants by selective enrichment of sequences with desirable properties followed by quantification by sequencing. mutscan is an R package for flexible analysis of such experiments, covering the entire workflow from raw reads up to statistical analysis and visualization. The core components are implemented in C++ for efficiency. Various experimental designs are supported, including single or paired reads with optional unique molecular identifiers. To find variants with changed relative abundance, mutscan employs established statistical models provided in the edgeR and limma packages. mutscan is available from https://github.com/fmicompbio/mutscan.}, }"},{"path":"https://fmicompbio.github.io/mutscan/index.html","id":"mutscan","dir":"","previous_headings":"","what":"Preprocessing and Analysis of Deep Mutational Scanning Data","title":"Preprocessing and Analysis of Deep Mutational Scanning Data","text":"mutscan R package process, statistically analyse visualise multiplexed assays variant effect data. package active development, functionality user interface may change. detailed information run mutscan, please consult vignettes.","code":""},{"path":"https://fmicompbio.github.io/mutscan/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Preprocessing and Analysis of Deep Mutational Scanning Data","text":"can install development version mutscan GitHub :","code":"# install.packages(\"devtools\") devtools::install_github(\"fmicompbio/mutscan\")"},{"path":"https://fmicompbio.github.io/mutscan/reference/calcNearestStringDist.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate distances to the nearest string — calcNearestStringDist","title":"Calculate distances to the nearest string — calcNearestStringDist","text":"Given character vector, calculate distance element nearest neighbor amongst elements.","code":""},{"path":"https://fmicompbio.github.io/mutscan/reference/calcNearestStringDist.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate distances to the nearest string — calcNearestStringDist","text":"","code":"calcNearestStringDist(x, metric = \"hamming\", nThreads = 1L)"},{"path":"https://fmicompbio.github.io/mutscan/reference/calcNearestStringDist.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate distances to the nearest string — calcNearestStringDist","text":"x character vector. metric character scalar defining string distance metric. One \"hamming\" (default), \"hamming_shift\" \"levenshtein\". nThreads numeric(1), number threads use parallel processing.","code":""},{"path":"https://fmicompbio.github.io/mutscan/reference/calcNearestStringDist.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate distances to the nearest string — calcNearestStringDist","text":"integer vector length x.","code":""},{"path":"https://fmicompbio.github.io/mutscan/reference/calcNearestStringDist.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculate distances to the nearest string — calcNearestStringDist","text":"","code":"calcNearestStringDist(c(\"lazy\", \"hazy\", \"crazy\")) #> [1] 1 1 4 calcNearestStringDist(c(\"lazy\", \"hazy\", \"crazy\"), metric = \"hamming_shift\") #> [1] 1 1 3 calcNearestStringDist(c(\"lazy\", \"hazy\", \"crazy\"), metric = \"levenshtein\") #> [1] 1 1 2"},{"path":"https://fmicompbio.github.io/mutscan/reference/calculateFitnessScore.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate fitness scores. — calculateFitnessScore","title":"Calculate fitness scores. — calculateFitnessScore","text":"Using sequence counts selection, calculate fitness scores described Diss Lehner (2018).","code":""},{"path":"https://fmicompbio.github.io/mutscan/reference/calculateFitnessScore.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate fitness scores. — calculateFitnessScore","text":"","code":"calculateFitnessScore(   se,   pairingCol,   ODCols,   comparison,   WTrows,   selAssay = \"counts\" )"},{"path":"https://fmicompbio.github.io/mutscan/reference/calculateFitnessScore.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate fitness scores. — calculateFitnessScore","text":"se SummarizedExperiment object returned summarizeExperiment. pairingCol Name column colData(se) replicate/pairing information. Samples value column paired. ODCols Name(s) column(s) colData(se) OD values (numeric), used normalize different numbers cells. comparison 3-element character vector form (column, numerator, denominator). column name column colData(se) experimental conditions. numerator denominator define comparison, e.g. c(\"cond\", \"output\", \"input\") look \"cond\" column calculate fitness ratio \"output\" \"input\" counts. WTrows Vector row names used reference calculating fitness scores. one value provided, average corresponding fitness scores used reference. NULL, division WT scores done. selAssay Assay select se analysis.","code":""},{"path":"https://fmicompbio.github.io/mutscan/reference/calculateFitnessScore.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate fitness scores. — calculateFitnessScore","text":"numeric vector fitness scores.","code":""},{"path":"https://fmicompbio.github.io/mutscan/reference/calculateFitnessScore.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Calculate fitness scores. — calculateFitnessScore","text":"\"genetic landscape physical interaction.\"     Diss G Lehner B. Elife. 2018;7:e32472. doi: 10.7554/eLife.32472.","code":""},{"path":"https://fmicompbio.github.io/mutscan/reference/calculateFitnessScore.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Calculate fitness scores. — calculateFitnessScore","text":"Michael Stadler Charlotte Soneson","code":""},{"path":"https://fmicompbio.github.io/mutscan/reference/calculateFitnessScore.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculate fitness scores. — calculateFitnessScore","text":"","code":"se <- readRDS(system.file(\"extdata\", \"GSE102901_cis_se.rds\",                            package = \"mutscan\")) ## Check that the wildtype sequence is present in the data stopifnot(\"f.0.WT\" %in% rownames(se)) ## Calculate PPI scores as defined in Diss & Lehner (2018) ppis <- calculateFitnessScore(     se = se, pairingCol = \"Replicate\",      ODCols = c(\"OD1\", \"OD2\"),     comparison = c(\"Condition\", \"cis_output\", \"cis_input\"),     WTrows = \"f.0.WT\") ## Matrix with PPI scores for each replicate head(ppis) #>         cis_output_vs_cis_input_repl1 cis_output_vs_cis_input_repl2 #> f.0.WT                      1.0000000                     1.0000000 #> f.1.AAC                     0.9763609                     0.9173416 #> f.1.AAG                     0.8887226                     0.8775120 #> f.1.ACC                     1.0105154                     1.0096229 #> f.1.ACG                     0.9881472                     0.9905645 #> f.1.AGC                     0.8233725                     0.8718729 #>         cis_output_vs_cis_input_repl3 #> f.0.WT                      1.0000000 #> f.1.AAC                     0.8861805 #> f.1.AAG                     0.9407093 #> f.1.ACC                     1.0188111 #> f.1.ACG                     0.9884163 #> f.1.AGC                     0.9669444"},{"path":"https://fmicompbio.github.io/mutscan/reference/calculateRelativeFC.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate logFCs relative to WT using edgeR — calculateRelativeFC","title":"Calculate logFCs relative to WT using edgeR — calculateRelativeFC","text":"Calculate logFCs associated p-values given comparison, using either limma Negative Binomial quasi-likelihood framework edgeR. observed counts WT variants can used offsets model.","code":""},{"path":"https://fmicompbio.github.io/mutscan/reference/calculateRelativeFC.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate logFCs relative to WT using edgeR — calculateRelativeFC","text":"","code":"calculateRelativeFC(   se,   design,   coef = NULL,   contrast = NULL,   WTrows = NULL,   selAssay = \"counts\",   pseudocount = 1,   method = \"edgeR\",   normMethod = ifelse(is.null(WTrows), \"TMM\", \"sum\") )"},{"path":"https://fmicompbio.github.io/mutscan/reference/calculateRelativeFC.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate logFCs relative to WT using edgeR — calculateRelativeFC","text":"se SummarizedExperiment object. design Design matrix. rows design matrix must order columns se. coef Coefficient(s) test edgeR limma. contrast Numeric contrast test edgeR limma. WTrows Vector row names used reference calculating logFCs statistics. one value provided, sum corresponding counts used generate offsets. NULL, offsets defined effective library sizes (using TMM normalization factors). selAssay Assay select se analysis. pseudocount Pseudocount add calculating log-fold changes. method Either 'edgeR' 'limma'. set 'limma', voom used transform counts estimate observation weights applying limma. case, results also contain standard errors logFCs. normMethod Character scalar indicating normalization method used calculate size factors. either \"TMM\" \"csaw\" WTrows NULL, \"geomean\" \"sum\" WTrows provided.","code":""},{"path":"https://fmicompbio.github.io/mutscan/reference/calculateRelativeFC.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate logFCs relative to WT using edgeR — calculateRelativeFC","text":"data.frame output statistical testing framework (edgeR limma).","code":""},{"path":"https://fmicompbio.github.io/mutscan/reference/calculateRelativeFC.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Calculate logFCs relative to WT using edgeR — calculateRelativeFC","text":"Charlotte Soneson, Michael Stadler","code":""},{"path":"https://fmicompbio.github.io/mutscan/reference/calculateRelativeFC.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculate logFCs relative to WT using edgeR — calculateRelativeFC","text":"","code":"se <- readRDS(system.file(\"extdata\", \"GSE102901_cis_se.rds\",                           package = \"mutscan\"))[1:200, ] design <- stats::model.matrix(~ Replicate + Condition,                               data = SummarizedExperiment::colData(se))                                ## Calculate \"absolute\" log-fold changes with edgeR res <- calculateRelativeFC(se, design, coef = \"Conditioncis_output\",                             method = \"edgeR\") head(res) #>             logFC    logCPM         F       PValue          FDR logFC_shrunk #> f.0.WT  1.9721334 20.083627 56.768150 2.160897e-10 3.601495e-09    1.9721331 #> f.1.AAC 1.3136230  4.688782 17.640288 8.439695e-05 2.910240e-04    1.2984544 #> f.1.AAG 1.0392549  5.677955 13.791731 4.313291e-04 1.327167e-03    1.0342409 #> f.1.ACC 2.0874024 12.862431 62.628899 4.638644e-11 1.159661e-09    2.0873503 #> f.1.ACG 1.8698694 13.513672 50.764347 1.134839e-09 1.194568e-08    1.8698442 #> f.1.AGC 0.9309018  4.754181  9.170734 3.545487e-03 8.975917e-03    0.9228638 #>         df.total df.prior df.test #> f.0.WT  63.85553 60.85531       1 #> f.1.AAC 63.85462 60.85531       1 #> f.1.AAG 63.85524 60.85531       1 #> f.1.ACC 63.85553 60.85531       1 #> f.1.ACG 63.85553 60.85531       1 #> f.1.AGC 63.85487 60.85531       1 ## Calculate log-fold changes relative to the WT sequence with edgeR stopifnot(\"f.0.WT\" %in% rownames(se)) res <- calculateRelativeFC(se, design, coef = \"Conditioncis_output\",                             method = \"edgeR\", WTrows = \"f.0.WT\") head(res) #>                 logFC    logCPM         F       PValue          FDR #> f.0.WT   4.209817e-16 19.757846  0.000000 1.000000e+00 1.000000e+00 #> f.1.AAC -6.078796e-01  4.553595  9.224434 1.337186e-02 1.601421e-02 #> f.1.AAG -8.740695e-01  5.655807 24.839338 6.574158e-04 1.125187e-03 #> f.1.ACC  1.207258e-01 12.506900 28.957264 3.790068e-04 7.018644e-04 #> f.1.ACG -1.016593e-01 13.217924 67.771782 1.324404e-05 4.905202e-05 #> f.1.AGC -9.855150e-01  4.738963 18.559705 1.767705e-03 2.658202e-03 #>          logFC_shrunk df.total df.prior df.test #> f.0.WT   4.802398e-16 9.426352 6.426305       1 #> f.1.AAC -6.661972e-01 9.423708 6.426305       1 #> f.1.AAG -8.823465e-01 9.425925 6.426305       1 #> f.1.ACC  1.207031e-01 9.426352 6.426305       1 #> f.1.ACG -1.016627e-01 9.426352 6.426305       1 #> f.1.AGC -1.030935e+00 9.424817 6.426305       1  ## Calculate \"absolute\" log-fold changes with limma res <- calculateRelativeFC(se, design, coef = \"Conditioncis_output\",                             method = \"limma\") head(res) #>             logFC      CI.L     CI.R   AveExpr        t      P.Value #> f.0.WT  1.9474761 1.5292108 2.365741 19.757630 9.144191 9.237987e-19 #> f.1.AAC 1.2874854 0.6745388 1.900432  4.417300 4.125197 4.227413e-05 #> f.1.AAG 1.0494394 0.5382396 1.560639  5.581250 4.031733 6.250330e-05 #> f.1.ACC 2.0664575 1.6160089 2.516906 12.504065 9.009616 2.738680e-18 #> f.1.ACG 1.8444895 1.3981560 2.290823 13.217517 8.115994 2.737555e-15 #> f.1.AGC 0.9173399 0.3223443 1.512336  4.627474 3.027900 2.568326e-03 #>            adj.P.Val         B  se.logFC df.total df.prior #> f.0.WT  3.079329e-17 34.491225 0.2129741      600      Inf #> f.1.AAC 1.537241e-04  1.802578 0.3121028      600      Inf #> f.1.AAG 2.232261e-04  1.302156 0.2602949      600      Inf #> f.1.ACC 7.824800e-17 33.291805 0.2293613      600      Inf #> f.1.ACG 3.421944e-14 25.725045 0.2272660      600      Inf #> f.1.AGC 6.941422e-03 -2.063388 0.3029624      600      Inf ## Calculate log-fold changes relative to the WT sequence with limma stopifnot(\"f.0.WT\" %in% rownames(se)) res <- calculateRelativeFC(se, design, coef = \"Conditioncis_output\",                             method = \"limma\", WTrows = \"f.0.WT\") head(res) #>                 logFC        CI.L        CI.R   AveExpr             t #> f.0.WT   9.552321e-08 -0.02134725  0.02134744 19.757630  1.061086e-05 #> f.1.AAC -6.050453e-01 -1.19863707 -0.01145359  4.417300 -2.417050e+00 #> f.1.AAG -8.921801e-01 -1.41471440 -0.36964582  5.581250 -4.048771e+00 #> f.1.ACC  1.233369e-01  0.05349146  0.19318235 12.504065  4.187362e+00 #> f.1.ACG -1.002978e-01 -0.12552201 -0.07507357 13.217517 -9.428860e+00 #> f.1.AGC -9.852809e-01 -1.66066239 -0.30989941  4.627474 -3.459365e+00 #>              P.Value    adj.P.Val           B    se.logFC df.total df.prior #> f.0.WT  9.999918e-01 0.9999918338 -10.2853001 0.009002401 6.904162 3.904162 #> f.1.AAC 4.676895e-02 0.0534502279  -4.8181840 0.250323924 6.904162 3.904162 #> f.1.AAG 5.021241e-03 0.0079702233  -2.7275623 0.220358245 6.904162 3.904162 #> f.1.ACC 4.226773e-03 0.0071038198  -4.8399208 0.029454563 6.904162 3.904162 #> f.1.ACG 3.435219e-05 0.0002862682   0.1043135 0.010637319 6.904162 3.904162 #> f.1.AGC 1.078800e-02 0.0151943682  -3.3263517 0.284815526 6.904162 3.904162"},{"path":"https://fmicompbio.github.io/mutscan/reference/collapseMutantsBySimilarity.html","id":null,"dir":"Reference","previous_headings":"","what":"Collapse mutants by similarity — collapseMutantsBySimilarity","title":"Collapse mutants by similarity — collapseMutantsBySimilarity","text":"functions can used collapse variants, either similarity according pre-defined grouping. functions collapseMutants collapseMutantsByAA assume grouping variable available column rowData(se) (collapseMutantsByAA convenience function case column \"mutantNameAA\", provided backwards compatibility). collapseMutantsBySimilarity generate grouping variable based user-provided thresholds sequence similarity (defined Hamming distance), subsequently collapse based derived grouping.","code":""},{"path":"https://fmicompbio.github.io/mutscan/reference/collapseMutantsBySimilarity.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Collapse mutants by similarity — collapseMutantsBySimilarity","text":"","code":"collapseMutantsBySimilarity(   se,   assayName,   scoreMethod = \"rowSum\",   sequenceCol = \"sequence\",   collapseMaxDist = 0,   collapseMinScore = 0,   collapseMinRatio = 0,   verbose = TRUE )  collapseMutantsByAA(se)  collapseMutants(se, nameCol)"},{"path":"https://fmicompbio.github.io/mutscan/reference/collapseMutantsBySimilarity.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Collapse mutants by similarity — collapseMutantsBySimilarity","text":"se SummarizedExperiment generated summarizeExperiment assayName name assay used calculate \"score\" (typically derived read counts) variant. scoreMethod Character scalar giving approach used calculate ranking scores assay defined assayName. Currently, can one \"rowSum\" \"rowMean\". filtering criteria applied scores. sequenceCol Character scalar giving name column rowData(se) contains nucleotide sequence variants. collapseMaxDist Numeric scalar defining tolerance collapsing similar sequences. value [0, 1), defines maximal Hamming distance terms fraction sequence length: (round(collapseMaxDist * nchar(sequence))). value greater equal 1 rounded directly used maximum allowed Hamming distance. Note sequences can collapsed length. collapseMinScore Numeric scalar, indicating minimum score sequence considered collapsing similar sequences. collapseMinRatio Numeric scalar. collapsing similar sequences, low-frequency sequence collapsed higher-frequency sequence ratio high-frequency low-frequency scores least high. default value 0 indicates check performed. verbose Logical, whether print progress messages. nameCol character scalar providing column rowData(se) contains amino acid mutant names (new row names).","code":""},{"path":"https://fmicompbio.github.io/mutscan/reference/collapseMutantsBySimilarity.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Collapse mutants by similarity — collapseMutantsBySimilarity","text":"SummarizedExperiment     counts aggregated mutated amino acid(s).","code":""},{"path":"https://fmicompbio.github.io/mutscan/reference/collapseMutantsBySimilarity.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Collapse mutants by similarity — collapseMutantsBySimilarity","text":"Charlotte Soneson, Michael Stadler","code":""},{"path":"https://fmicompbio.github.io/mutscan/reference/collapseMutantsBySimilarity.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Collapse mutants by similarity — collapseMutantsBySimilarity","text":"","code":"se <- readRDS(system.file(\"extdata\", \"GSE102901_cis_se.rds\",                           package = \"mutscan\"))[1:200, ] ## The rows of this object correspond to individual codon variants dim(se) #> [1] 200   6 head(rownames(se)) #> [1] \"f.0.WT\"  \"f.1.AAC\" \"f.1.AAG\" \"f.1.ACC\" \"f.1.ACG\" \"f.1.AGC\"  ## Collapse by amino acid sec <- collapseMutantsByAA(se) ## The rows of the collapsed object correspond to amino acid variants dim(sec) #> [1] 128   6 head(rownames(sec)) #> [1] \"f.0.WT\" \"f.1.*\"  \"f.1.A\"  \"f.1.C\"  \"f.1.D\"  \"f.1.E\"  ## The mutantName column contains the individual codon variants that were  ## collapsed head(SummarizedExperiment::rowData(sec)) #> DataFrame with 6 rows and 19 columns #>        mutantNameAA               sequence             mutantName #>         <character>            <character>            <character> #> f.0.WT       f.0.WT ACCGATACACTCCAAGCGGA.. f.0.WT,f.1.ACC,f.1.A.. #> f.1.*         f.1.* TAGGATACACTCCAAGCGGA..                f.1.TAG #> f.1.A         f.1.A GCCGATACACTCCAAGCGGA..        f.1.GCC,f.1.GCG #> f.1.C         f.1.C TGCGATACACTCCAAGCGGA..                f.1.TGC #> f.1.D         f.1.D GACGATACACTCCAAGCGGA..                f.1.GAC #> f.1.E         f.1.E GAGGATACACTCCAAGCGGA..                f.1.GAG #>                mutantNameBase     mutantNameBaseHGVS        mutantNameCodon #>                   <character>            <character>            <character> #> f.0.WT f.0.WT,f.3.C,f.3.G,f.. f:c,f:c.30A>G,f:c.31.. f.0.WT,f.1.ACC,f.1.A.. #> f.1.*       f.1.T_f.2.A_f.3.G       f:c.1_3delinsTAG                f.1.TAG #> f.1.A  f.1.G_f.3.C,f.1.G_f... f:c.1_3delinsGCC,f:c..        f.1.GCC,f.1.GCG #> f.1.C       f.1.T_f.2.G_f.3.C       f:c.1_3delinsTGC                f.1.TGC #> f.1.D       f.1.G_f.2.A_f.3.C       f:c.1_3delinsGAC                f.1.GAC #> f.1.E       f.1.G_f.2.A_f.3.G       f:c.1_3delinsGAG                f.1.GAG #>        mutantNameAAHGVS             sequenceAA mutationTypes nbrMutBases #>             <character>            <character>   <character> <character> #> f.0.WT              f:p TDTLQAETDQLEDEKSALQT..        silent       0,1,2 #> f.1.*       f:p.(Thr1*) *DTLQAETDQLEDEKSALQT..          stop           3 #> f.1.A     f:p.(Thr1Ala) ADTLQAETDQLEDEKSALQT.. nonsynonymous           2 #> f.1.C     f:p.(Thr1Cys) CDTLQAETDQLEDEKSALQT.. nonsynonymous           3 #> f.1.D     f:p.(Thr1Asp) DDTLQAETDQLEDEKSALQT.. nonsynonymous           3 #> f.1.E     f:p.(Thr1Glu) EDTLQAETDQLEDEKSALQT.. nonsynonymous           3 #>        nbrMutCodons   nbrMutAAs  varLengths minNbrMutBases minNbrMutCodons #>         <character> <character> <character>      <integer>       <integer> #> f.0.WT          0,1           0          96              0               0 #> f.1.*             1           1          96              3               1 #> f.1.A             1           1          96              2               1 #> f.1.C             1           1          96              3               1 #> f.1.D             1           1          96              3               1 #> f.1.E             1           1          96              3               1 #>        minNbrMutAAs maxNbrMutBases maxNbrMutCodons maxNbrMutAAs #>           <integer>      <integer>       <integer>    <integer> #> f.0.WT            0              2               1            0 #> f.1.*             1              3               1            1 #> f.1.A             1              2               1            1 #> f.1.C             1              3               1            1 #> f.1.D             1              3               1            1 #> f.1.E             1              3               1            1  ## Collapse similar sequences sec2 <- collapseMutantsBySimilarity(     se = se, assayName = \"counts\", scoreMethod = \"rowSum\",     sequenceCol = \"sequence\", collapseMaxDist = 2,     collapseMinScore = 0, collapseMinRatio = 0) #> start collapsing sequences (tolerance: 2)...done (reduced from 200 to 12) dim(sec2) #> [1] 12  6 head(rownames(sec2)) #> [1] \"f.0.WT\"   \"f.1.GGG\"  \"f.1.TTC\"  \"f.10.GGG\" \"f.10.TCC\" \"f.11.GCC\" head(SummarizedExperiment::rowData(sec2)) #> DataFrame with 6 rows and 20 columns #>          collapseCol               sequence             mutantName #>          <character>            <character>            <character> #> f.0.WT        f.0.WT AACGATACACTCCAAGCGGA.. f.0.WT,f.1.AAC,f.1.A.. #> f.1.GGG      f.1.GGG CAGGATACACTCCAAGCGGA.. f.1.CAG,f.1.CGC,f.1... #> f.1.TTC      f.1.TTC CACGATACACTCCAAGCGGA.. f.1.CAC,f.1.CTC,f.1... #> f.10.GGG    f.10.GGG ACTGATACACTCCAAGCGGA.. f.10.ACG,f.10.AGC,f... #> f.10.TCC    f.10.TCC ACTGATACACTCCAAGCGGA.. f.10.ACC,f.10.ATC,f... #> f.11.GCC    f.11.GCC ACTGATACACTCCAAGCGGA.. f.11.ACC,f.11.AGC,f... #>                  mutantNameBase     mutantNameBaseHGVS        mutantNameCodon #>                     <character>            <character>            <character> #> f.0.WT   f.0.WT,f.1.C_f.3.C,f.. f:c,f:c.1_3delinsCCC.. f.0.WT,f.1.AAC,f.1.A.. #> f.1.GGG  f.1.C_f.2.A_f.3.G,f... f:c.1_3delinsCAG,f:c.. f.1.CAG,f.1.CGC,f.1... #> f.1.TTC  f.1.C_f.2.A_f.3.C,f... f:c.1_3delinsCAC,f:c.. f.1.CAC,f.1.CTC,f.1... #> f.10.GGG f.28.A_f.29.C_f.30.G.. f:c.28_30delinsACG,f.. f.10.ACG,f.10.AGC,f... #> f.10.TCC f.28.A_f.29.C_f.30.C.. f:c.28_30delinsACC,f.. f.10.ACC,f.10.ATC,f... #> f.11.GCC f.31.A_f.32.C_f.33.C.. f:c.31_33delinsACC,f.. f.11.ACC,f.11.AGC,f... #>                    mutantNameAA       mutantNameAAHGVS             sequenceAA #>                     <character>            <character>            <character> #> f.0.WT   f.0.WT,f.1.A,f.1.I,f.. f:p,f:p.(Asp13*),f:p.. ADTLQAETDQLEDEKSALQT.. #> f.1.GGG  f.1.*,f.1.C,f.1.D,f... f:p.(Thr1*),f:p.(Thr.. *DTLQAETDQLEDEKSALQT.. #> f.1.TTC  f.1.F,f.1.H,f.1.L,f... f:p.(Thr1His),f:p.(T.. FDTLQAETDQLEDEKSALQT.. #> f.10.GGG f.10.A,f.10.C,f.10.G.. f:p.(Gln10Ala),f:p.(.. TDTLQAETDALEDEKSALQT.. #> f.10.TCC f.10.F,f.10.I,f.10.S.. f:p.(Gln10Ile),f:p.(.. TDTLQAETDFLEDEKSALQT.. #> f.11.GCC f.11.A,f.11.G,f.11.S.. f:p.(Leu11Ala),f:p.(.. TDTLQAETDQAEDEKSALQT.. #>                   mutationTypes nbrMutBases nbrMutCodons   nbrMutAAs #>                     <character> <character>  <character> <character> #> f.0.WT   nonsynonymous,silent..       0,1,2          0,1         0,1 #> f.1.GGG      nonsynonymous,stop           3            1           1 #> f.1.TTC           nonsynonymous           3            1           1 #> f.10.GGG          nonsynonymous           3            1           1 #> f.10.TCC          nonsynonymous           3            1           1 #> f.11.GCC          nonsynonymous           3            1           1 #>           varLengths minNbrMutBases minNbrMutCodons minNbrMutAAs maxNbrMutBases #>          <character>      <integer>       <integer>    <integer>      <integer> #> f.0.WT            96              0               0            0              2 #> f.1.GGG           96              3               1            1              3 #> f.1.TTC           96              3               1            1              3 #> f.10.GGG          96              3               1            1              3 #> f.10.TCC          96              3               1            1              3 #> f.11.GCC          96              3               1            1              3 #>          maxNbrMutCodons maxNbrMutAAs #>                <integer>    <integer> #> f.0.WT                 1            1 #> f.1.GGG                1            1 #> f.1.TTC                1            1 #> f.10.GGG               1            1 #> f.10.TCC               1            1 #> f.11.GCC               1            1 ## collapsed count matrix SummarizedExperiment::assay(sec2, \"counts\") #>          SRR5952435 SRR5952436 SRR5952437 SRR5952438 SRR5952439 SRR5952440 #> f.0.WT      3068572    3757468    3572269    6831160    6678754    6624525 #> f.1.GGG         621        726        503        190         98        208 #> f.1.TTC          97        115        109         27         18         23 #> f.10.GGG        470        511        371        173         84        181 #> f.10.TCC         36         82         32         11          7         20 #> f.11.GCC         61         74         42         13         10         14 #> f.11.TAG        259        294        196         55         41         64 #> f.12.AGG         81         81         51         19         15         46 #> f.12.CCC        286        294        167         76         45         89 #> f.13.CGC        471        581        447        156         87        195 #> f.13.TTG        114        146         86         37         12         42 #> f.14.CGC        122        137        123         36         26         42"},{"path":"https://fmicompbio.github.io/mutscan/reference/digestFastqs.html","id":null,"dir":"Reference","previous_headings":"","what":"Read, filter and digest sequences from fastq file(s). — digestFastqs","title":"Read, filter and digest sequences from fastq file(s). — digestFastqs","text":"Read sequences one pair fastq files digest (extract umis, constant variable parts, filter, extract mismatch information constant count observed unique variable parts). Alternatively, primer sequences specified, case sequence immediately following primer considered variable sequence.","code":""},{"path":"https://fmicompbio.github.io/mutscan/reference/digestFastqs.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Read, filter and digest sequences from fastq file(s). — digestFastqs","text":"","code":"digestFastqs(   fastqForward,   fastqReverse = NULL,   mergeForwardReverse = FALSE,   minOverlap = 0,   maxOverlap = 0,   minMergedLength = 0,   maxMergedLength = 0,   maxFracMismatchOverlap = 1,   greedyOverlap = TRUE,   revComplForward = FALSE,   revComplReverse = FALSE,   adapterForward = \"\",   adapterReverse = \"\",   elementsForward = \"\",   elementLengthsForward = numeric(0),   elementsReverse = \"\",   elementLengthsReverse = numeric(0),   primerForward = c(\"\"),   primerReverse = c(\"\"),   wildTypeForward = \"\",   wildTypeReverse = \"\",   constantForward = c(\"\"),   constantReverse = c(\"\"),   avePhredMinForward = 20,   avePhredMinReverse = 20,   variableNMaxForward = 0,   variableNMaxReverse = 0,   umiNMax = 0,   nbrMutatedCodonsMaxForward = 1,   nbrMutatedCodonsMaxReverse = 1,   nbrMutatedBasesMaxForward = -1,   nbrMutatedBasesMaxReverse = -1,   forbiddenMutatedCodonsForward = \"\",   forbiddenMutatedCodonsReverse = \"\",   useTreeWTmatch = FALSE,   collapseToWTForward = FALSE,   collapseToWTReverse = FALSE,   mutatedPhredMinForward = 0,   mutatedPhredMinReverse = 0,   mutNameDelimiter = \".\",   constantMaxDistForward = -1,   constantMaxDistReverse = -1,   variableCollapseMaxDist = deprecated(),   variableCollapseMinReads = deprecated(),   variableCollapseMinRatio = deprecated(),   umiCollapseMaxDist = 0,   filteredReadsFastqForward = \"\",   filteredReadsFastqReverse = \"\",   maxNReads = -1,   verbose = FALSE,   nThreads = 1,   chunkSize = 1e+05,   maxReadLength = 1024 )"},{"path":"https://fmicompbio.github.io/mutscan/reference/digestFastqs.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Read, filter and digest sequences from fastq file(s). — digestFastqs","text":"fastqForward, fastqReverse Character vectors, paths gzipped FASTQ files corresponding forward reverse reads, respectively. one forward/reverse sequence file given, need provided order. Note multiple fastq files provided, assumed correspond sample, effectively concatenated. mergeForwardReverse Logical scalar, whether fuse forward reverse variable sequences. minOverlap, maxOverlap Numeric scalar, minimal maximal allowed overlap forward reverse reads merging. used mergeForwardReverse TRUE. set 0, overlaps covering full length shortest two reads considered. minMergedLength, maxMergedLength Numeric scalar, minimal maximal allowed total length merged product (mergeForwardReverse TRUE). set 0, length allowed. maxFracMismatchOverlap Numeric scalar, maximal mismatch rate overlap. used mergeForwardReverse TRUE. greedyOverlap Logical scalar. TRUE, first overlap satisfying minOverlap, maxOverlap, minMergedLength, maxMergedLength maxFracMismatchOverlap retained. FALSE, valid overlaps scored one highest score (largest number matches) retained. revComplForward, revComplReverse Logical scalar, whether reverse complement forward/reverse variable constant sequences, respectively. adapterForward, adapterReverse Character scalars, adapter sequence forward/reverse reads, respectively. forward/reverse read contains corresponding adapter sequence, sequence pair filtered . set NULL, adapter filtering performed. number filtered read pairs reported return value. elementsForward, elementsReverse Character scalars representing composition forward reverse reads, respectively. strings consist letters S (skip), C (constant), U (umi), P (primer), V (variable), cover full extent read. combinations allowed (given letter can appear multiple times), can one occurrence P. given letter included multiple times, corresponding sequences concatenated output. elementLengthsForward, elementLengthsReverse Numeric vectors containing lengths read component elementsForward/elementsReverse, respectively. length one element set -1, inferred lengths (remainder read). one number (one number side primer P) can set -1. indicated length primer used (instead inferred provided primer sequence) can also set -1. primerForward, primerReverse Character vectors, representing primer sequence(s) forward/reverse reads, respectively. read pairs contain perfect matches forward reverse primers (given) retained. Multiple primers can specified - considered order first match used. wildTypeForward, wildTypeReverse Character scalars named character vectors, wild type sequence forward reverse variable region. given single string, reference sequence named 'f' (forward) 'r' (reverse). constantForward, constantReverse Character vectors giving, expected constant forward reverse sequences. one sequence provided, must length. avePhredMinForward, avePhredMinReverse Numeric scalar, minimum average Phred score variable region read retained. read pair contains forward reverse variable regions, minimum average Phred score achieved read pair retained. variableNMaxForward, variableNMaxReverse Numeric scalar, maximum number Ns allowed variable region read retained. umiNMax Numeric scalar, maximum number Ns allowed UMI read retained. nbrMutatedCodonsMaxForward, nbrMutatedCodonsMaxReverse Numeric scalar, maximum number mutated codons allowed. Note forward reverse sequence, respectively, exactly one nbrMutatedCodonsMax nbrMutatedBasesMax must -1, must non-negative number. one -1 used filter name identified mutants. nbrMutatedBasesMaxForward, nbrMutatedBasesMaxReverse Numeric scalar, maximum number mutated bases allowed. Note forward reverse sequence, respectively, exactly one nbrMutatedCodonsMax nbrMutatedBasesMax must -1, must non-negative number. one -1 used filter name identified mutants. forbiddenMutatedCodonsForward, forbiddenMutatedCodonsReverse Character vector codons (can contain ambiguous IUPAC characters, see IUPAC_CODE_MAP). read pair contains mutated codon matching pattern, filtered . useTreeWTmatch Logical scalar. tree-based matching wild type sequences used possible? number allowed mismatches small, number wild type sequences large, typically faster. collapseToWTForward, collapseToWTReverse Logical scalar, indicating whether just represent observed variable sequence closest wildtype sequence rather retaining information mutations. mutatedPhredMinForward, mutatedPhredMinReverse Numeric scalar, minimum Phred score mutated base read retained. mutated base Phred score lower mutatedPhredMin, read (pair) discarded. mutNameDelimiter Character scalar, delimiter used naming mutants. Generally, mutants named XX.YY.NNN, XX closest provided reference sequence, YY mutated base codon number (depending whether nbrMutatedBases* nbrMutatedCodons* specified), NNN mutated base codon. , . provided mutNameDelimiter. delimiter must single character (\"_\"), can appear provided reference sequence names. constantMaxDistForward, constantMaxDistReverse Numeric scalars, maximum allowed Hamming distance extracted expected constant sequence. multiple constant sequences provided, similar one used. Reads larger distance expected constant sequence discarded. set -1, filtering done. variableCollapseMaxDist, variableCollapseMinReads, variableCollapseMinRatio Deprecated. Collapsing variable sequences longer performed digestFastqs. Please use collapseMutantsBySimilarity instead. umiCollapseMaxDist Numeric scalar defining tolerances collapsing similar UMI sequences. value [0, 1), defines maximal Hamming distance terms fraction sequence length: (round(umiCollapseMaxDist * nchar(umiSeq))). value greater equal 1 rounded directly used maximum allowed Hamming distance. filteredReadsFastqForward, filteredReadsFastqReverse Character scalars, names (pair ) FASTQ file(s) filtered-reads written. name(s) end .gz (output always compressed). empty, filtered reads written file. maxNReads Integer scalar, maximum number reads process. first maxNReads read (pairs) FASTQ file(s) used. set -1, reads FASTQ file(s) processed. verbose Logical scalar, whether print progress messages. nThreads Numeric scalar, number threads use parallel processing. chunkSize Numeric scalar, number read (pairs) keep memory parallel processing. Reduce default value run memory. maxReadLength Numeric scalar, maximum allowed read length. Longer read lengths lead higher memory allocation, may require chunkSize decreased.","code":""},{"path":"https://fmicompbio.github.io/mutscan/reference/digestFastqs.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Read, filter and digest sequences from fastq file(s). — digestFastqs","text":"list four entries: summaryTable data.frame contains, observed mutation combination, corresponding variable region sequences (pair sequences), number observed sequences, number unique UMIs observed sequence. also additional columns: 'maxNbrReads' contains number reads frequent observed sequence represented feature (relevant similar variable regions collapsed). 'nbrMutBases', 'nbrMutCodons' 'nbrMutAAs' give number mutated bases, codons amino acids variant. Alternative variant names based base, codon amino acid sequence provided columns 'mutantNameBase', 'mutantNameCodon', 'mutantNameAA'. addition, 'mutantNameBaseHGVS' 'mutantNameAAHGVS' give base- amino acid-based names following HGVS nomenclature (https://varnomen.hgvs.org/). Please note provided reference sequence names used HGVS sequence identifiers. user use appropriately named reference sequences order obtain valid HGVS variant names. filterSummary data.frame contains number input reads, number reads filtered processing, number retained reads. filters named according convention \"fxx_filter\", \"xx\" indicates order filters applied, \"filter\" indicates type filter. Note filters applied successively, reads filtered one step considered successive filtering steps. errorStatistics data.frame contains, Phred quality score 0 99, number bases extracted constant sequences quality score match/mismatch provided reference constant sequence. parameters list parameter settings used processing. Also contains version package time processing.","code":""},{"path":"https://fmicompbio.github.io/mutscan/reference/digestFastqs.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Read, filter and digest sequences from fastq file(s). — digestFastqs","text":"processing read pair goes follows: Search perfect matches forward/reverse adapter sequences,  filter read pair match found either forward  reverse read. primer sequences provided, search perfect matches,  filter read pair provided primer sequences can found. Extract UMI, constant variable sequence forward  reverse reads, based definition respective read composition. requested, collapse forward reverse variable regions  retaining, position, base highest reported base  quality. Filter read (pair) average quality variable  region avePhredMinForward/avePhredMinReverse,  either forward reverse read (merged read). Filter read (pair) number Ns variable region  exceeds variableNMaxForward/variableNMaxReverse. Filter read (pair) number Ns combined forward  reverse UMI sequence exceeds umiNMax one wild type sequences (variable region)  provided, find mismatches (forward/reverse) variable region  provided wild type sequence (one wild type sequence  provided, first find one closest read). Filter read (pair) mutated base quality  mutatedPhredMinForward/mutatedPhredMinReverse. Filter read (pair) number mutated codons exceeds  nbrMutatedCodonsMaxForward/nbrMutatedCodonsMaxReverse. Filter read (pair) mutated codons match  codons encoded  forbiddenMutatedCodonsForward/forbiddenMutatedCodonsReverse. Assign 'mutation name' read (pair). name  combination parts form XX.YY.NNN, XX name  similar reference sequence, YY mutated codon number, NNN  mutated codon. . delimiter, specified via  mutNameDelimiter. wildtype sequences provided,  variable sequence used mutation name'. Based retained reads following filtering process, count number reads, number unique UMIs, variable sequence (pair variable sequences).","code":""},{"path":"https://fmicompbio.github.io/mutscan/reference/digestFastqs.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Read, filter and digest sequences from fastq file(s). — digestFastqs","text":"","code":"## See the vignette for complete worked-out examples for different types of  ## data sets  ## ----------------------------------------------------------------------- ##  ## Process a single-end data set, assume that the full read represents   ## the variable region out <- digestFastqs(     fastqForward = system.file(\"extdata\", \"cisInput_1.fastq.gz\",                                 package = \"mutscan\"),      elementsForward = \"V\", elementLengthsForward = -1 ) ## Table with read counts and mutant information head(out$summaryTable) #>                                                                                                                      mutantName #> 1 AAAACTACCGGAACCGGAGGAGGGAGCTGACTGATACACTCCAAGCGTAGACAGACCAACTAGAAGTTGAGAAGTCTGCTCTGCAGACCGAGATTGCAAACCTGCAGAAGGAGAAGGAAAAACTA #> 2 AAACACATGTCAACCGGAGGAGGGAGCTGAATGATACACTCCAAGCGGAGACAGACCAACTAGAAGATGAGAAGTCTGCTTTGCAGACCGAGATTGCCAACCTGCTGAAGGAGAAGGAAAAACTA #> 3 AAACCCGCGACAACCGGAGGAGGGAGCTGACTGATACACTGCAAGCGGAGACAGACCAACTAGAAGATGAGAAGTCTGCTTTGCAGACCGAGATTGCCAAGCTGCTAAAGGAGAAGGAAAAACTA #> 4 AAACCTTGGTGAACCGGAGGAGGGAGCTGACTGATACACTCCAAGCGGAGACAGACCAACTAGAAGATGAGAAGTCTGCTTTGCAGACCGAGATTGCCAACCTGCTGAAGGAGAAGGAAAAACTA #> 5 AAACTAGCACCAACCGGAGGAGGGAGCTGACTGATACACTCCAAGCGGAGACAGACCAACTAGAAGATGAGAAGTCTGCTTTGCAGACCGAGATTGCCAACCTGCTGAAGGAGAAGGAAAAACTA #> 6 AAATTCGCGTCAACCGGAGGAGGGAGCTGACTGATACACTCCAAGAGGAGACAGACCAACTAGAAGATGAGAAGTCTGCTTTGCAGACCGAGATTGCCAACCTGCTGAAGGAGAAGGAAAAACTA #>                                                                                                                        sequence #> 1 AAAACTACCGGAACCGGAGGAGGGAGCTGACTGATACACTCCAAGCGTAGACAGACCAACTAGAAGTTGAGAAGTCTGCTCTGCAGACCGAGATTGCAAACCTGCAGAAGGAGAAGGAAAAACTA #> 2 AAACACATGTCAACCGGAGGAGGGAGCTGAATGATACACTCCAAGCGGAGACAGACCAACTAGAAGATGAGAAGTCTGCTTTGCAGACCGAGATTGCCAACCTGCTGAAGGAGAAGGAAAAACTA #> 3 AAACCCGCGACAACCGGAGGAGGGAGCTGACTGATACACTGCAAGCGGAGACAGACCAACTAGAAGATGAGAAGTCTGCTTTGCAGACCGAGATTGCCAAGCTGCTAAAGGAGAAGGAAAAACTA #> 4 AAACCTTGGTGAACCGGAGGAGGGAGCTGACTGATACACTCCAAGCGGAGACAGACCAACTAGAAGATGAGAAGTCTGCTTTGCAGACCGAGATTGCCAACCTGCTGAAGGAGAAGGAAAAACTA #> 5 AAACTAGCACCAACCGGAGGAGGGAGCTGACTGATACACTCCAAGCGGAGACAGACCAACTAGAAGATGAGAAGTCTGCTTTGCAGACCGAGATTGCCAACCTGCTGAAGGAGAAGGAAAAACTA #> 6 AAATTCGCGTCAACCGGAGGAGGGAGCTGACTGATACACTCCAAGAGGAGACAGACCAACTAGAAGATGAGAAGTCTGCTTTGCAGACCGAGATTGCCAACCTGCTGAAGGAGAAGGAAAAACTA #>   nbrReads maxNbrReads nbrUmis nbrMutBases nbrMutCodons nbrMutAAs varLengths #> 1        1           1       0           0            0         0        125 #> 2        1           1       0           0            0         0        125 #> 3        1           1       0           0            0         0        125 #> 4        1           1       0           0            0         0        125 #> 5        1           1       0           0            0         0        125 #> 6        1           1       0           0            0         0        125 #>                                                                                                                  mutantNameBase #> 1 AAAACTACCGGAACCGGAGGAGGGAGCTGACTGATACACTCCAAGCGTAGACAGACCAACTAGAAGTTGAGAAGTCTGCTCTGCAGACCGAGATTGCAAACCTGCAGAAGGAGAAGGAAAAACTA #> 2 AAACACATGTCAACCGGAGGAGGGAGCTGAATGATACACTCCAAGCGGAGACAGACCAACTAGAAGATGAGAAGTCTGCTTTGCAGACCGAGATTGCCAACCTGCTGAAGGAGAAGGAAAAACTA #> 3 AAACCCGCGACAACCGGAGGAGGGAGCTGACTGATACACTGCAAGCGGAGACAGACCAACTAGAAGATGAGAAGTCTGCTTTGCAGACCGAGATTGCCAAGCTGCTAAAGGAGAAGGAAAAACTA #> 4 AAACCTTGGTGAACCGGAGGAGGGAGCTGACTGATACACTCCAAGCGGAGACAGACCAACTAGAAGATGAGAAGTCTGCTTTGCAGACCGAGATTGCCAACCTGCTGAAGGAGAAGGAAAAACTA #> 5 AAACTAGCACCAACCGGAGGAGGGAGCTGACTGATACACTCCAAGCGGAGACAGACCAACTAGAAGATGAGAAGTCTGCTTTGCAGACCGAGATTGCCAACCTGCTGAAGGAGAAGGAAAAACTA #> 6 AAATTCGCGTCAACCGGAGGAGGGAGCTGACTGATACACTCCAAGAGGAGACAGACCAACTAGAAGATGAGAAGTCTGCTTTGCAGACCGAGATTGCCAACCTGCTGAAGGAGAAGGAAAAACTA #>                                                                                                                 mutantNameCodon #> 1 AAAACTACCGGAACCGGAGGAGGGAGCTGACTGATACACTCCAAGCGTAGACAGACCAACTAGAAGTTGAGAAGTCTGCTCTGCAGACCGAGATTGCAAACCTGCAGAAGGAGAAGGAAAAACTA #> 2 AAACACATGTCAACCGGAGGAGGGAGCTGAATGATACACTCCAAGCGGAGACAGACCAACTAGAAGATGAGAAGTCTGCTTTGCAGACCGAGATTGCCAACCTGCTGAAGGAGAAGGAAAAACTA #> 3 AAACCCGCGACAACCGGAGGAGGGAGCTGACTGATACACTGCAAGCGGAGACAGACCAACTAGAAGATGAGAAGTCTGCTTTGCAGACCGAGATTGCCAAGCTGCTAAAGGAGAAGGAAAAACTA #> 4 AAACCTTGGTGAACCGGAGGAGGGAGCTGACTGATACACTCCAAGCGGAGACAGACCAACTAGAAGATGAGAAGTCTGCTTTGCAGACCGAGATTGCCAACCTGCTGAAGGAGAAGGAAAAACTA #> 5 AAACTAGCACCAACCGGAGGAGGGAGCTGACTGATACACTCCAAGCGGAGACAGACCAACTAGAAGATGAGAAGTCTGCTTTGCAGACCGAGATTGCCAACCTGCTGAAGGAGAAGGAAAAACTA #> 6 AAATTCGCGTCAACCGGAGGAGGGAGCTGACTGATACACTCCAAGAGGAGACAGACCAACTAGAAGATGAGAAGTCTGCTTTGCAGACCGAGATTGCCAACCTGCTGAAGGAGAAGGAAAAACTA #>   mutantNameBaseHGVS                              mutantNameAA mutantNameAAHGVS #> 1                    KTTGTGGGS*LIHSKRRQTN*KLRSLLCRPRLQTCRRRRKN                  #> 2                    KHMSTGGGS*MIHSKRRQTN*KMRSLLCRPRLPTC*RRRKN                  #> 3                    KPATTGGGS*LIHCKRRQTN*KMRSLLCRPRLPSC*RRRKN                  #> 4                    KPW*TGGGS*LIHSKRRQTN*KMRSLLCRPRLPTC*RRRKN                  #> 5                    KLAPTGGGS*LIHSKRRQTN*KMRSLLCRPRLPTC*RRRKN                  #> 6                    KFASTGGGS*LIHSKRRQTN*KMRSLLCRPRLPTC*RRRKN                  #>   mutationTypes                                sequenceAA #> 1               KTTGTGGGS*LIHSKRRQTN*KLRSLLCRPRLQTCRRRRKN #> 2               KHMSTGGGS*MIHSKRRQTN*KMRSLLCRPRLPTC*RRRKN #> 3               KPATTGGGS*LIHCKRRQTN*KMRSLLCRPRLPSC*RRRKN #> 4               KPW*TGGGS*LIHSKRRQTN*KMRSLLCRPRLPTC*RRRKN #> 5               KLAPTGGGS*LIHSKRRQTN*KMRSLLCRPRLPTC*RRRKN #> 6               KFASTGGGS*LIHSKRRQTN*KMRSLLCRPRLPTC*RRRKN ## Filter summary out$filterSummary #>   nbrTotal f1_nbrAdapter f2_nbrNoPrimer f3_nbrReadWrongLength #> 1     1000             0              0                     0 #>   f4_nbrNoValidOverlap f5_nbrAvgVarQualTooLow f6_nbrTooManyNinVar #> 1                    0                      1                 593 #>   f7_nbrTooManyNinUMI f8_nbrTooManyBestWTHits f9_nbrMutQualTooLow #> 1                   0                       0                   0 #>   f10a_nbrTooManyMutCodons f10b_nbrTooManyMutBases f11_nbrForbiddenCodons #> 1                        0                       0                      0 #>   f12_nbrTooManyMutConstant f13_nbrTooManyBestConstantHits nbrRetained #> 1                         0                              0         406  ## ----------------------------------------------------------------------- ##  ## Process a single-end data set, specify the read as a combination of  ## UMI, constant region and variable region (skip the first base) out <- digestFastqs(     fastqForward = system.file(\"extdata\", \"cisInput_1.fastq.gz\",                                 package = \"mutscan\"),      elementsForward = \"SUCV\", elementLengthsForward = c(1, 10, 18, 96),      constantForward = \"AACCGGAGGAGGGAGCTG\" ) ## Table with read counts and mutant information head(out$summaryTable) #>                                                                                         mutantName #> 1 AAATATAACGTTGACGATGTAGCTTTAGGTGTCTGTAAAACAGGTGCCGAAGAAGCTGGAGTAACAGAAGTGAGAACCAGCTTATCAGAAAAAAAG #> 2 AAGAGCACACGTCTGAACTCCAGTCACATCACGATCTCGTATGCCGTCTTCTGCTTGAAAAAAAAAAAAATAAACAAAGTACTTTCTATTTTCTAT #> 3 AAGAGCACACGTCTGAACTCCAGTCACATCACGATCTCGTATGCCGTCTTCTGCTTGAAAAAAAAAAAATAATACTATTTTTTTTGTTTATTTCCA #> 4 AATGATACACTCCAAACGGAGACAGACCAACTAGAATATGAGAAGTCTGCTTTGCAGACCGAGATTGCCAACCTGCGGAAAGAGGAGGAAAAACTA #> 5 AATGATACACTCCAAGCGGAGACAGAACAACTAGAAGATGAGAAGTCTGCTTTGCAGACCGAGATTGCCAACCTGCTGAAGGAGAAGGAAAAACTA #> 6 AATGATACACTCCAAGCGGAGACAGACCAACTAGAAGATGAGAAGTCTGCTTTGCAGACCGAGATTGCCAACCTGCTGAAGGAGAAGGAAAAACTA #>                                                                                           sequence #> 1 AAATATAACGTTGACGATGTAGCTTTAGGTGTCTGTAAAACAGGTGCCGAAGAAGCTGGAGTAACAGAAGTGAGAACCAGCTTATCAGAAAAAAAG #> 2 AAGAGCACACGTCTGAACTCCAGTCACATCACGATCTCGTATGCCGTCTTCTGCTTGAAAAAAAAAAAAATAAACAAAGTACTTTCTATTTTCTAT #> 3 AAGAGCACACGTCTGAACTCCAGTCACATCACGATCTCGTATGCCGTCTTCTGCTTGAAAAAAAAAAAATAATACTATTTTTTTTGTTTATTTCCA #> 4 AATGATACACTCCAAACGGAGACAGACCAACTAGAATATGAGAAGTCTGCTTTGCAGACCGAGATTGCCAACCTGCGGAAAGAGGAGGAAAAACTA #> 5 AATGATACACTCCAAGCGGAGACAGAACAACTAGAAGATGAGAAGTCTGCTTTGCAGACCGAGATTGCCAACCTGCTGAAGGAGAAGGAAAAACTA #> 6 AATGATACACTCCAAGCGGAGACAGACCAACTAGAAGATGAGAAGTCTGCTTTGCAGACCGAGATTGCCAACCTGCTGAAGGAGAAGGAAAAACTA #>   nbrReads maxNbrReads nbrUmis nbrMutBases nbrMutCodons nbrMutAAs varLengths #> 1        1           1       1           0            0         0         96 #> 2        1           1       1           0            0         0         96 #> 3        1           1       1           0            0         0         96 #> 4        1           1       1           0            0         0         96 #> 5        1           1       1           0            0         0         96 #> 6        2           2       2           0            0         0         96 #>                                                                                     mutantNameBase #> 1 AAATATAACGTTGACGATGTAGCTTTAGGTGTCTGTAAAACAGGTGCCGAAGAAGCTGGAGTAACAGAAGTGAGAACCAGCTTATCAGAAAAAAAG #> 2 AAGAGCACACGTCTGAACTCCAGTCACATCACGATCTCGTATGCCGTCTTCTGCTTGAAAAAAAAAAAAATAAACAAAGTACTTTCTATTTTCTAT #> 3 AAGAGCACACGTCTGAACTCCAGTCACATCACGATCTCGTATGCCGTCTTCTGCTTGAAAAAAAAAAAATAATACTATTTTTTTTGTTTATTTCCA #> 4 AATGATACACTCCAAACGGAGACAGACCAACTAGAATATGAGAAGTCTGCTTTGCAGACCGAGATTGCCAACCTGCGGAAAGAGGAGGAAAAACTA #> 5 AATGATACACTCCAAGCGGAGACAGAACAACTAGAAGATGAGAAGTCTGCTTTGCAGACCGAGATTGCCAACCTGCTGAAGGAGAAGGAAAAACTA #> 6 AATGATACACTCCAAGCGGAGACAGACCAACTAGAAGATGAGAAGTCTGCTTTGCAGACCGAGATTGCCAACCTGCTGAAGGAGAAGGAAAAACTA #>                                                                                    mutantNameCodon #> 1 AAATATAACGTTGACGATGTAGCTTTAGGTGTCTGTAAAACAGGTGCCGAAGAAGCTGGAGTAACAGAAGTGAGAACCAGCTTATCAGAAAAAAAG #> 2 AAGAGCACACGTCTGAACTCCAGTCACATCACGATCTCGTATGCCGTCTTCTGCTTGAAAAAAAAAAAAATAAACAAAGTACTTTCTATTTTCTAT #> 3 AAGAGCACACGTCTGAACTCCAGTCACATCACGATCTCGTATGCCGTCTTCTGCTTGAAAAAAAAAAAATAATACTATTTTTTTTGTTTATTTCCA #> 4 AATGATACACTCCAAACGGAGACAGACCAACTAGAATATGAGAAGTCTGCTTTGCAGACCGAGATTGCCAACCTGCGGAAAGAGGAGGAAAAACTA #> 5 AATGATACACTCCAAGCGGAGACAGAACAACTAGAAGATGAGAAGTCTGCTTTGCAGACCGAGATTGCCAACCTGCTGAAGGAGAAGGAAAAACTA #> 6 AATGATACACTCCAAGCGGAGACAGACCAACTAGAAGATGAGAAGTCTGCTTTGCAGACCGAGATTGCCAACCTGCTGAAGGAGAAGGAAAAACTA #>   mutantNameBaseHGVS                     mutantNameAA mutantNameAAHGVS #> 1                    KYNVDDVALGVCKTGAEEAGVTEVRTSLSEKK                  #> 2                    KSTRLNSSHITISYAVFCLKKKKINKVLSIFY                  #> 3                    KSTRLNSSHITISYAVFCLKKKK*YYFFCLFP                  #> 4                    NDTLQTETDQLEYEKSALQTEIANLRKEEEKL                  #> 5                    NDTLQAETEQLEDEKSALQTEIANLLKEKEKL                  #> 6                    NDTLQAETDQLEDEKSALQTEIANLLKEKEKL                  #>   mutationTypes                       sequenceAA #> 1               KYNVDDVALGVCKTGAEEAGVTEVRTSLSEKK #> 2               KSTRLNSSHITISYAVFCLKKKKINKVLSIFY #> 3               KSTRLNSSHITISYAVFCLKKKK*YYFFCLFP #> 4               NDTLQTETDQLEYEKSALQTEIANLRKEEEKL #> 5               NDTLQAETEQLEDEKSALQTEIANLLKEKEKL #> 6               NDTLQAETDQLEDEKSALQTEIANLLKEKEKL ## Filter summary out$filterSummary #>   nbrTotal f1_nbrAdapter f2_nbrNoPrimer f3_nbrReadWrongLength #> 1     1000             0              0                     0 #>   f4_nbrNoValidOverlap f5_nbrAvgVarQualTooLow f6_nbrTooManyNinVar #> 1                    0                      3                 591 #>   f7_nbrTooManyNinUMI f8_nbrTooManyBestWTHits f9_nbrMutQualTooLow #> 1                   0                       0                   0 #>   f10a_nbrTooManyMutCodons f10b_nbrTooManyMutBases f11_nbrForbiddenCodons #> 1                        0                       0                      0 #>   f12_nbrTooManyMutConstant f13_nbrTooManyBestConstantHits nbrRetained #> 1                         0                              0         406 ## Error statistics out$errorStatistics #>     PhredQuality nbrMatchForward nbrMismatchForward nbrMatchReverse #> 1              0               0                  0               0 #> 2              1               0                  0               0 #> 3              2               0                  0               0 #> 4              3               0                  0               0 #> 5              4               0                  0               0 #> 6              5               0                  0               0 #> 7              6               0                  0               0 #> 8              7               0                  0               0 #> 9              8               0                  0               0 #> 10             9               0                  0               0 #> 11            10               0                  0               0 #> 12            11               0                  0               0 #> 13            12               0                  0               0 #> 14            13               0                  0               0 #> 15            14             121                 66               0 #> 16            15               0                  0               0 #> 17            16               0                  0               0 #> 18            17               0                  0               0 #> 19            18               0                  0               0 #> 20            19               0                  0               0 #> 21            20               0                  0               0 #> 22            21               0                  0               0 #> 23            22              30                  1               0 #> 24            23               0                  0               0 #> 25            24               0                  0               0 #> 26            25               0                  0               0 #> 27            26               0                  0               0 #> 28            27             208                 56               0 #> 29            28               0                  0               0 #> 30            29               0                  0               0 #> 31            30               0                  0               0 #> 32            31               0                  0               0 #> 33            32               0                  0               0 #> 34            33             393                 96               0 #> 35            34               0                  0               0 #> 36            35               0                  0               0 #> 37            36               0                  0               0 #> 38            37            5929                408               0 #> 39            38               0                  0               0 #> 40            39               0                  0               0 #> 41            40               0                  0               0 #> 42            41               0                  0               0 #> 43            42               0                  0               0 #> 44            43               0                  0               0 #> 45            44               0                  0               0 #> 46            45               0                  0               0 #> 47            46               0                  0               0 #> 48            47               0                  0               0 #> 49            48               0                  0               0 #> 50            49               0                  0               0 #> 51            50               0                  0               0 #> 52            51               0                  0               0 #> 53            52               0                  0               0 #> 54            53               0                  0               0 #> 55            54               0                  0               0 #> 56            55               0                  0               0 #> 57            56               0                  0               0 #> 58            57               0                  0               0 #> 59            58               0                  0               0 #> 60            59               0                  0               0 #> 61            60               0                  0               0 #> 62            61               0                  0               0 #> 63            62               0                  0               0 #> 64            63               0                  0               0 #> 65            64               0                  0               0 #> 66            65               0                  0               0 #> 67            66               0                  0               0 #> 68            67               0                  0               0 #> 69            68               0                  0               0 #> 70            69               0                  0               0 #> 71            70               0                  0               0 #> 72            71               0                  0               0 #> 73            72               0                  0               0 #> 74            73               0                  0               0 #> 75            74               0                  0               0 #> 76            75               0                  0               0 #> 77            76               0                  0               0 #> 78            77               0                  0               0 #> 79            78               0                  0               0 #> 80            79               0                  0               0 #> 81            80               0                  0               0 #> 82            81               0                  0               0 #> 83            82               0                  0               0 #> 84            83               0                  0               0 #> 85            84               0                  0               0 #> 86            85               0                  0               0 #> 87            86               0                  0               0 #> 88            87               0                  0               0 #> 89            88               0                  0               0 #> 90            89               0                  0               0 #> 91            90               0                  0               0 #> 92            91               0                  0               0 #> 93            92               0                  0               0 #> 94            93               0                  0               0 #> 95            94               0                  0               0 #> 96            95               0                  0               0 #> 97            96               0                  0               0 #> 98            97               0                  0               0 #> 99            98               0                  0               0 #> 100           99               0                  0               0 #>     nbrMismatchReverse #> 1                    0 #> 2                    0 #> 3                    0 #> 4                    0 #> 5                    0 #> 6                    0 #> 7                    0 #> 8                    0 #> 9                    0 #> 10                   0 #> 11                   0 #> 12                   0 #> 13                   0 #> 14                   0 #> 15                   0 #> 16                   0 #> 17                   0 #> 18                   0 #> 19                   0 #> 20                   0 #> 21                   0 #> 22                   0 #> 23                   0 #> 24                   0 #> 25                   0 #> 26                   0 #> 27                   0 #> 28                   0 #> 29                   0 #> 30                   0 #> 31                   0 #> 32                   0 #> 33                   0 #> 34                   0 #> 35                   0 #> 36                   0 #> 37                   0 #> 38                   0 #> 39                   0 #> 40                   0 #> 41                   0 #> 42                   0 #> 43                   0 #> 44                   0 #> 45                   0 #> 46                   0 #> 47                   0 #> 48                   0 #> 49                   0 #> 50                   0 #> 51                   0 #> 52                   0 #> 53                   0 #> 54                   0 #> 55                   0 #> 56                   0 #> 57                   0 #> 58                   0 #> 59                   0 #> 60                   0 #> 61                   0 #> 62                   0 #> 63                   0 #> 64                   0 #> 65                   0 #> 66                   0 #> 67                   0 #> 68                   0 #> 69                   0 #> 70                   0 #> 71                   0 #> 72                   0 #> 73                   0 #> 74                   0 #> 75                   0 #> 76                   0 #> 77                   0 #> 78                   0 #> 79                   0 #> 80                   0 #> 81                   0 #> 82                   0 #> 83                   0 #> 84                   0 #> 85                   0 #> 86                   0 #> 87                   0 #> 88                   0 #> 89                   0 #> 90                   0 #> 91                   0 #> 92                   0 #> 93                   0 #> 94                   0 #> 95                   0 #> 96                   0 #> 97                   0 #> 98                   0 #> 99                   0 #> 100                  0  ## ----------------------------------------------------------------------- ##  ## Process a single-end data set, specify the read as a combination of  ## UMI, constant region and variable region (skip the first base), provide  ## the wild type sequence to compare the variable region to and limit the  ## number of allowed mutated codons to 1 out <- digestFastqs(     fastqForward = system.file(\"extdata\", \"cisInput_1.fastq.gz\",                                 package = \"mutscan\"),      elementsForward = \"SUCV\", elementLengthsForward = c(1, 10, 18, 96),      constantForward = \"AACCGGAGGAGGGAGCTG\",      wildTypeForward = c(FOS = paste0(\"ACTGATACACTCCAAGCGGAGACAGACCAACTAGAAGATGAGAAGTC\",                                       \"TGCTTTGCAGACCGAGATTGCCAACCTGCTGAAGGAGAAGGAAAAACTA\")),     nbrMutatedCodonsMaxForward = 1 ) ## Table with read counts and mutant information head(out$summaryTable) #>   mutantName #> 1   FOS.0.WT #> 2  FOS.1.AAT #> 3  FOS.1.ACC #> 4  FOS.1.ACG #> 5  FOS.1.CCT #> 6 FOS.10.CAT #>                                                                                           sequence #> 1 ACTGATACACTCCAAGCGGAGACAGACCAACTAGAAGATGAGAAGTCTGCTTTGCAGACCGAGATTGCCAACCTGCTGAAGGAGAAGGAAAAACTA #> 2 AATGATACACTCCAAGCGGAGACAGACCAACTAGAAGATGAGAAGTCTGCTTTGCAGACCGAGATTGCCAACCTGCTGAAGGAGAAGGAAAAACTA #> 3 ACCGATACACTCCAAGCGGAGACAGACCAACTAGAAGATGAGAAGTCTGCTTTGCAGACCGAGATTGCCAACCTGCTGAAGGAGAAGGAAAAACTA #> 4 ACGGATACACTCCAAGCGGAGACAGACCAACTAGAAGATGAGAAGTCTGCTTTGCAGACCGAGATTGCCAACCTGCTGAAGGAGAAGGAAAAACTA #> 5 CCTGATACACTCCAAGCGGAGACAGACCAACTAGAAGATGAGAAGTCTGCTTTGCAGACCGAGATTGCCAACCTGCTGAAGGAGAAGGAAAAACTA #> 6 ACTGATACACTCCAAGCGGAGACAGACCATCTAGAAGATGAGAAGTCTGCTTTGCAGACCGAGATTGCCAACCTGCTGAAGGAGAAGGAAAAACTA #>   nbrReads maxNbrReads nbrUmis nbrMutBases nbrMutCodons nbrMutAAs varLengths #> 1       30          30      30           0            0         0         96 #> 2        2           2       2           1            1         1         96 #> 3        1           1       1           1            1         0         96 #> 4        1           1       1           1            1         0         96 #> 5        1           1       1           1            1         1         96 #> 6        1           1       1           1            1         1         96 #>   mutantNameBase mutantNameCodon mutantNameBaseHGVS mutantNameAA #> 1       FOS.0.WT        FOS.0.WT              FOS:c     FOS.0.WT #> 2        FOS.2.A       FOS.1.AAT         FOS:c.2C>A      FOS.1.N #> 3        FOS.3.C       FOS.1.ACC         FOS:c.3T>C     FOS.0.WT #> 4        FOS.3.G       FOS.1.ACG         FOS:c.3T>G     FOS.0.WT #> 5        FOS.1.C       FOS.1.CCT         FOS:c.1A>C      FOS.1.P #> 6       FOS.30.T      FOS.10.CAT        FOS:c.30A>T     FOS.10.H #>   mutantNameAAHGVS mutationTypes                       sequenceAA #> 1            FOS:p               TDTLQAETDQLEDEKSALQTEIANLLKEKEKL #> 2  FOS:p.(Thr1Asn) nonsynonymous NDTLQAETDQLEDEKSALQTEIANLLKEKEKL #> 3            FOS:p        silent TDTLQAETDQLEDEKSALQTEIANLLKEKEKL #> 4            FOS:p        silent TDTLQAETDQLEDEKSALQTEIANLLKEKEKL #> 5  FOS:p.(Thr1Pro) nonsynonymous PDTLQAETDQLEDEKSALQTEIANLLKEKEKL #> 6 FOS:p.(Gln10His) nonsynonymous TDTLQAETDHLEDEKSALQTEIANLLKEKEKL ## Filter summary out$filterSummary #>   nbrTotal f1_nbrAdapter f2_nbrNoPrimer f3_nbrReadWrongLength #> 1     1000             0              0                     0 #>   f4_nbrNoValidOverlap f5_nbrAvgVarQualTooLow f6_nbrTooManyNinVar #> 1                    0                      3                 591 #>   f7_nbrTooManyNinUMI f8_nbrTooManyBestWTHits f9_nbrMutQualTooLow #> 1                   0                       0                   0 #>   f10a_nbrTooManyMutCodons f10b_nbrTooManyMutBases f11_nbrForbiddenCodons #> 1                      297                       0                      0 #>   f12_nbrTooManyMutConstant f13_nbrTooManyBestConstantHits nbrRetained #> 1                         0                              0         109 ## Error statistics out$errorStatistics #>     PhredQuality nbrMatchForward nbrMismatchForward nbrMatchReverse #> 1              0               0                  0               0 #> 2              1               0                  0               0 #> 3              2               0                  0               0 #> 4              3               0                  0               0 #> 5              4               0                  0               0 #> 6              5               0                  0               0 #> 7              6               0                  0               0 #> 8              7               0                  0               0 #> 9              8               0                  0               0 #> 10             9               0                  0               0 #> 11            10               0                  0               0 #> 12            11               0                  0               0 #> 13            12               0                  0               0 #> 14            13               0                  0               0 #> 15            14              17                  0               0 #> 16            15               0                  0               0 #> 17            16               0                  0               0 #> 18            17               0                  0               0 #> 19            18               0                  0               0 #> 20            19               0                  0               0 #> 21            20               0                  0               0 #> 22            21               0                  0               0 #> 23            22               5                  0               0 #> 24            23               0                  0               0 #> 25            24               0                  0               0 #> 26            25               0                  0               0 #> 27            26               0                  0               0 #> 28            27              31                  0               0 #> 29            28               0                  0               0 #> 30            29               0                  0               0 #> 31            30               0                  0               0 #> 32            31               0                  0               0 #> 33            32               0                  0               0 #> 34            33              88                  1               0 #> 35            34               0                  0               0 #> 36            35               0                  0               0 #> 37            36               0                  0               0 #> 38            37            1819                  1               0 #> 39            38               0                  0               0 #> 40            39               0                  0               0 #> 41            40               0                  0               0 #> 42            41               0                  0               0 #> 43            42               0                  0               0 #> 44            43               0                  0               0 #> 45            44               0                  0               0 #> 46            45               0                  0               0 #> 47            46               0                  0               0 #> 48            47               0                  0               0 #> 49            48               0                  0               0 #> 50            49               0                  0               0 #> 51            50               0                  0               0 #> 52            51               0                  0               0 #> 53            52               0                  0               0 #> 54            53               0                  0               0 #> 55            54               0                  0               0 #> 56            55               0                  0               0 #> 57            56               0                  0               0 #> 58            57               0                  0               0 #> 59            58               0                  0               0 #> 60            59               0                  0               0 #> 61            60               0                  0               0 #> 62            61               0                  0               0 #> 63            62               0                  0               0 #> 64            63               0                  0               0 #> 65            64               0                  0               0 #> 66            65               0                  0               0 #> 67            66               0                  0               0 #> 68            67               0                  0               0 #> 69            68               0                  0               0 #> 70            69               0                  0               0 #> 71            70               0                  0               0 #> 72            71               0                  0               0 #> 73            72               0                  0               0 #> 74            73               0                  0               0 #> 75            74               0                  0               0 #> 76            75               0                  0               0 #> 77            76               0                  0               0 #> 78            77               0                  0               0 #> 79            78               0                  0               0 #> 80            79               0                  0               0 #> 81            80               0                  0               0 #> 82            81               0                  0               0 #> 83            82               0                  0               0 #> 84            83               0                  0               0 #> 85            84               0                  0               0 #> 86            85               0                  0               0 #> 87            86               0                  0               0 #> 88            87               0                  0               0 #> 89            88               0                  0               0 #> 90            89               0                  0               0 #> 91            90               0                  0               0 #> 92            91               0                  0               0 #> 93            92               0                  0               0 #> 94            93               0                  0               0 #> 95            94               0                  0               0 #> 96            95               0                  0               0 #> 97            96               0                  0               0 #> 98            97               0                  0               0 #> 99            98               0                  0               0 #> 100           99               0                  0               0 #>     nbrMismatchReverse #> 1                    0 #> 2                    0 #> 3                    0 #> 4                    0 #> 5                    0 #> 6                    0 #> 7                    0 #> 8                    0 #> 9                    0 #> 10                   0 #> 11                   0 #> 12                   0 #> 13                   0 #> 14                   0 #> 15                   0 #> 16                   0 #> 17                   0 #> 18                   0 #> 19                   0 #> 20                   0 #> 21                   0 #> 22                   0 #> 23                   0 #> 24                   0 #> 25                   0 #> 26                   0 #> 27                   0 #> 28                   0 #> 29                   0 #> 30                   0 #> 31                   0 #> 32                   0 #> 33                   0 #> 34                   0 #> 35                   0 #> 36                   0 #> 37                   0 #> 38                   0 #> 39                   0 #> 40                   0 #> 41                   0 #> 42                   0 #> 43                   0 #> 44                   0 #> 45                   0 #> 46                   0 #> 47                   0 #> 48                   0 #> 49                   0 #> 50                   0 #> 51                   0 #> 52                   0 #> 53                   0 #> 54                   0 #> 55                   0 #> 56                   0 #> 57                   0 #> 58                   0 #> 59                   0 #> 60                   0 #> 61                   0 #> 62                   0 #> 63                   0 #> 64                   0 #> 65                   0 #> 66                   0 #> 67                   0 #> 68                   0 #> 69                   0 #> 70                   0 #> 71                   0 #> 72                   0 #> 73                   0 #> 74                   0 #> 75                   0 #> 76                   0 #> 77                   0 #> 78                   0 #> 79                   0 #> 80                   0 #> 81                   0 #> 82                   0 #> 83                   0 #> 84                   0 #> 85                   0 #> 86                   0 #> 87                   0 #> 88                   0 #> 89                   0 #> 90                   0 #> 91                   0 #> 92                   0 #> 93                   0 #> 94                   0 #> 95                   0 #> 96                   0 #> 97                   0 #> 98                   0 #> 99                   0 #> 100                  0  ## ----------------------------------------------------------------------- ##  ## Process a paired-end data set where both the forward and reverse reads  ## contain the same variable region and thus should be merged to generate  ## the final variable sequence, specify the reads as a combination of  ## UMI, constant region and variable region (skip the first and/or last ## base), provide the wild type sequence to compare the variable region to  ## and limit the number of allowed mutated codons to 1 out <- digestFastqs(     fastqForward = system.file(\"extdata\", \"cisInput_1.fastq.gz\",                                 package = \"mutscan\"),     fastqReverse = system.file(\"extdata\", \"cisInput_2.fastq.gz\",                                package = \"mutscan\"),      mergeForwardReverse = TRUE, revComplForward = FALSE, revComplReverse = TRUE,      elementsForward = \"SUCV\", elementLengthsForward = c(1, 10, 18, 96),     elementsReverse = \"SUCVS\", elementLengthsReverse = c(1, 7, 17, 96, -1),     constantForward = \"AACCGGAGGAGGGAGCTG\",      constantReverse = \"GAGTTCATCCTGGCAGC\",     wildTypeForward = c(FOS = paste0(\"ACTGATACACTCCAAGCGGAGACAGACCAACTAGAAGATGAGAAGTC\",                                       \"TGCTTTGCAGACCGAGATTGCCAACCTGCTGAAGGAGAAGGAAAAACTA\")),     nbrMutatedCodonsMaxForward = 1 ) ## Table with read counts and mutant information head(out$summaryTable) #>   mutantName #> 1   FOS.0.WT #> 2  FOS.1.AAT #> 3  FOS.1.ACC #> 4  FOS.1.ACG #> 5  FOS.1.CCT #> 6  FOS.1.CGT #>                                                                                           sequence #> 1 ACTGATACACTCCAAGCGGAGACAGACCAACTAGAAGATGAGAAGTCTGCTTTGCAGACCGAGATTGCCAACCTGCTGAAGGAGAAGGAAAAACTA #> 2 AATGATACACTCCAAGCGGAGACAGACCAACTAGAAGATGAGAAGTCTGCTTTGCAGACCGAGATTGCCAACCTGCTGAAGGAGAAGGAAAAACTA #> 3 ACCGATACACTCCAAGCGGAGACAGACCAACTAGAAGATGAGAAGTCTGCTTTGCAGACCGAGATTGCCAACCTGCTGAAGGAGAAGGAAAAACTA #> 4 ACGGATACACTCCAAGCGGAGACAGACCAACTAGAAGATGAGAAGTCTGCTTTGCAGACCGAGATTGCCAACCTGCTGAAGGAGAAGGAAAAACTA #> 5 CCTGATACACTCCAAGCGGAGACAGACCAACTAGAAGATGAGAAGTCTGCTTTGCAGACCGAGATTGCCAACCTGCTGAAGGAGAAGGAAAAACTA #> 6 CGTGATACACTCCAAGCGGAGACAGACCAACTAGAAGATGAGAAGTCTGCTTTGCAGACCGAGATTGCCAACCTGCTGAAGGAGAAGGAAAAACTA #>   nbrReads maxNbrReads nbrUmis nbrMutBases nbrMutCodons nbrMutAAs varLengths #> 1       77          77      77           0            0         0         96 #> 2        2           2       2           1            1         1         96 #> 3        2           2       2           1            1         0         96 #> 4        1           1       1           1            1         0         96 #> 5        1           1       1           1            1         1         96 #> 6        1           1       1           2            1         1         96 #>    mutantNameBase mutantNameCodon mutantNameBaseHGVS mutantNameAA #> 1        FOS.0.WT        FOS.0.WT              FOS:c     FOS.0.WT #> 2         FOS.2.A       FOS.1.AAT         FOS:c.2C>A      FOS.1.N #> 3         FOS.3.C       FOS.1.ACC         FOS:c.3T>C     FOS.0.WT #> 4         FOS.3.G       FOS.1.ACG         FOS:c.3T>G     FOS.0.WT #> 5         FOS.1.C       FOS.1.CCT         FOS:c.1A>C      FOS.1.P #> 6 FOS.1.C_FOS.2.G       FOS.1.CGT  FOS:c.1_2delinsCG      FOS.1.R #>   mutantNameAAHGVS mutationTypes                       sequenceAA #> 1            FOS:p               TDTLQAETDQLEDEKSALQTEIANLLKEKEKL #> 2  FOS:p.(Thr1Asn) nonsynonymous NDTLQAETDQLEDEKSALQTEIANLLKEKEKL #> 3            FOS:p        silent TDTLQAETDQLEDEKSALQTEIANLLKEKEKL #> 4            FOS:p        silent TDTLQAETDQLEDEKSALQTEIANLLKEKEKL #> 5  FOS:p.(Thr1Pro) nonsynonymous PDTLQAETDQLEDEKSALQTEIANLLKEKEKL #> 6  FOS:p.(Thr1Arg) nonsynonymous RDTLQAETDQLEDEKSALQTEIANLLKEKEKL ## Filter summary out$filterSummary #>   nbrTotal f1_nbrAdapter f2_nbrNoPrimer f3_nbrReadWrongLength #> 1     1000             0              0                     0 #>   f4_nbrNoValidOverlap f5_nbrAvgVarQualTooLow f6_nbrTooManyNinVar #> 1                    0                      0                  52 #>   f7_nbrTooManyNinUMI f8_nbrTooManyBestWTHits f9_nbrMutQualTooLow #> 1                   0                       0                   0 #>   f10a_nbrTooManyMutCodons f10b_nbrTooManyMutBases f11_nbrForbiddenCodons #> 1                      699                       0                      0 #>   f12_nbrTooManyMutConstant f13_nbrTooManyBestConstantHits nbrRetained #> 1                         0                              0         249 ## Error statistics out$errorStatistics #>     PhredQuality nbrMatchForward nbrMismatchForward nbrMatchReverse #> 1              0               0                  0               0 #> 2              1               0                  0               0 #> 3              2               0                  0               0 #> 4              3               0                  0               0 #> 5              4               0                  0               0 #> 6              5               0                  0               0 #> 7              6               0                  0               0 #> 8              7               0                  0               0 #> 9              8               0                  0               0 #> 10             9               0                  0               0 #> 11            10               0                  0               0 #> 12            11               0                  0               0 #> 13            12               0                  0               0 #> 14            13               0                  0               0 #> 15            14              69                  2              53 #> 16            15               0                  0               0 #> 17            16               0                  0               0 #> 18            17               0                  0               0 #> 19            18               0                  0               0 #> 20            19               0                  0               0 #> 21            20               0                  0               0 #> 22            21               0                  0               0 #> 23            22              23                  0               0 #> 24            23               0                  0               0 #> 25            24               0                  0               0 #> 26            25               0                  0               0 #> 27            26               0                  0               0 #> 28            27             115                  1              74 #> 29            28               0                  0               0 #> 30            29               0                  0               0 #> 31            30               0                  0               0 #> 32            31               0                  0               0 #> 33            32               0                  0               0 #> 34            33             252                  1             143 #> 35            34               0                  0               0 #> 36            35               0                  0               0 #> 37            36               0                  0               0 #> 38            37            4017                  2            3930 #> 39            38               0                  0               0 #> 40            39               0                  0               0 #> 41            40               0                  0               0 #> 42            41               0                  0               0 #> 43            42               0                  0               0 #> 44            43               0                  0               0 #> 45            44               0                  0               0 #> 46            45               0                  0               0 #> 47            46               0                  0               0 #> 48            47               0                  0               0 #> 49            48               0                  0               0 #> 50            49               0                  0               0 #> 51            50               0                  0               0 #> 52            51               0                  0               0 #> 53            52               0                  0               0 #> 54            53               0                  0               0 #> 55            54               0                  0               0 #> 56            55               0                  0               0 #> 57            56               0                  0               0 #> 58            57               0                  0               0 #> 59            58               0                  0               0 #> 60            59               0                  0               0 #> 61            60               0                  0               0 #> 62            61               0                  0               0 #> 63            62               0                  0               0 #> 64            63               0                  0               0 #> 65            64               0                  0               0 #> 66            65               0                  0               0 #> 67            66               0                  0               0 #> 68            67               0                  0               0 #> 69            68               0                  0               0 #> 70            69               0                  0               0 #> 71            70               0                  0               0 #> 72            71               0                  0               0 #> 73            72               0                  0               0 #> 74            73               0                  0               0 #> 75            74               0                  0               0 #> 76            75               0                  0               0 #> 77            76               0                  0               0 #> 78            77               0                  0               0 #> 79            78               0                  0               0 #> 80            79               0                  0               0 #> 81            80               0                  0               0 #> 82            81               0                  0               0 #> 83            82               0                  0               0 #> 84            83               0                  0               0 #> 85            84               0                  0               0 #> 86            85               0                  0               0 #> 87            86               0                  0               0 #> 88            87               0                  0               0 #> 89            88               0                  0               0 #> 90            89               0                  0               0 #> 91            90               0                  0               0 #> 92            91               0                  0               0 #> 93            92               0                  0               0 #> 94            93               0                  0               0 #> 95            94               0                  0               0 #> 96            95               0                  0               0 #> 97            96               0                  0               0 #> 98            97               0                  0               0 #> 99            98               0                  0               0 #> 100           99               0                  0               0 #>     nbrMismatchReverse #> 1                    0 #> 2                    0 #> 3                    6 #> 4                    0 #> 5                    0 #> 6                    0 #> 7                    0 #> 8                    0 #> 9                    0 #> 10                   0 #> 11                   0 #> 12                   0 #> 13                   0 #> 14                   0 #> 15                   9 #> 16                   0 #> 17                   0 #> 18                   0 #> 19                   0 #> 20                   0 #> 21                   0 #> 22                   0 #> 23                   0 #> 24                   0 #> 25                   0 #> 26                   0 #> 27                   0 #> 28                   0 #> 29                   0 #> 30                   0 #> 31                   0 #> 32                   0 #> 33                   0 #> 34                   3 #> 35                   0 #> 36                   0 #> 37                   0 #> 38                  15 #> 39                   0 #> 40                   0 #> 41                   0 #> 42                   0 #> 43                   0 #> 44                   0 #> 45                   0 #> 46                   0 #> 47                   0 #> 48                   0 #> 49                   0 #> 50                   0 #> 51                   0 #> 52                   0 #> 53                   0 #> 54                   0 #> 55                   0 #> 56                   0 #> 57                   0 #> 58                   0 #> 59                   0 #> 60                   0 #> 61                   0 #> 62                   0 #> 63                   0 #> 64                   0 #> 65                   0 #> 66                   0 #> 67                   0 #> 68                   0 #> 69                   0 #> 70                   0 #> 71                   0 #> 72                   0 #> 73                   0 #> 74                   0 #> 75                   0 #> 76                   0 #> 77                   0 #> 78                   0 #> 79                   0 #> 80                   0 #> 81                   0 #> 82                   0 #> 83                   0 #> 84                   0 #> 85                   0 #> 86                   0 #> 87                   0 #> 88                   0 #> 89                   0 #> 90                   0 #> 91                   0 #> 92                   0 #> 93                   0 #> 94                   0 #> 95                   0 #> 96                   0 #> 97                   0 #> 98                   0 #> 99                   0 #> 100                  0  ## ----------------------------------------------------------------------- ##  ## Process a paired-end data set where the forward and reverse reads  ## contain variable regions corresponding to different proteins, and thus  ## should not be merged, specify the reads as a combination of  ## UMI, constant region and variable region (skip the first base), provide  ## the wild type sequence to compare the variable region to and limit the  ## number of allowed mutated codons to 1 out <- digestFastqs(     fastqForward = system.file(\"extdata\", \"transInput_1.fastq.gz\",                                 package = \"mutscan\"),     fastqReverse = system.file(\"extdata\", \"transInput_2.fastq.gz\",                                package = \"mutscan\"),      mergeForwardReverse = FALSE,       elementsForward = \"SUCV\", elementLengthsForward = c(1, 10, 18, 96),     elementsReverse = \"SUCV\", elementLengthsReverse = c(1, 8, 20, 96),     constantForward = \"AACCGGAGGAGGGAGCTG\",      constantReverse = \"GAAAAAGGAAGCTGGAGAGA\",     wildTypeForward = c(FOS = paste0(\"ACTGATACACTCCAAGCGGAGACAGACCAACTAGAAGATGAGAAGTC\",                                       \"TGCTTTGCAGACCGAGATTGCCAACCTGCTGAAGGAGAAGGAAAAACTA\")),     wildTypeReverse = c(JUN = paste0(\"ATCGCCCGGCTGGAGGAAAAAGTGAAAACCTTGAAAGCTCAGAACTC\",                                       \"GGAGCTGGCGTCCACGGCCAACATGCTCAGGGAACAGGTGGCACAGCTT\")),      nbrMutatedCodonsMaxForward = 1,     nbrMutatedCodonsMaxReverse = 1 ) ## Table with read counts and mutant information head(out$summaryTable) #>            mutantName #> 1 FOS.0.WT_JUN.13.CCC #> 2 FOS.0.WT_JUN.13.CTC #> 3  FOS.0.WT_JUN.2.TCC #> 4 FOS.0.WT_JUN.20.ACC #> 5 FOS.0.WT_JUN.30.AGG #> 6 FOS.0.WT_JUN.30.GGG #>                                                                                                                                                                                            sequence #> 1 ACTGATACACTCCAAGCGGAGACAGACCAACTAGAAGATGAGAAGTCTGCTTTGCAGACCGAGATTGCCAACCTGCTGAAGGAGAAGGAAAAACTA_ATCGCCCGGCTGGAGGAAAAAGTGAAAACCTTGAAACCCCAGAACTCGGAGCTGGCGTCCACGGCCAACATGCTCAGGGAACAGGTGGCACAGCTT #> 2 ACTGATACACTCCAAGCGGAGACAGACCAACTAGAAGATGAGAAGTCTGCTTTGCAGACCGAGATTGCCAACCTGCTGAAGGAGAAGGAAAAACTA_ATCGCCCGGCTGGAGGAAAAAGTGAAAACCTTGAAACTCCAGAACTCGGAGCTGGCGTCCACGGCCAACATGCTCAGGGAACAGGTGGCACAGCTT #> 3 ACTGATACACTCCAAGCGGAGACAGACCAACTAGAAGATGAGAAGTCTGCTTTGCAGACCGAGATTGCCAACCTGCTGAAGGAGAAGGAAAAACTA_ATCTCCCGGCTGGAGGAAAAAGTGAAAACCTTGAAAGCTCAGAACTCGGAGCTGGCGTCCACGGCCAACATGCTCAGGGAACAGGTGGCACAGCTT #> 4 ACTGATACACTCCAAGCGGAGACAGACCAACTAGAAGATGAGAAGTCTGCTTTGCAGACCGAGATTGCCAACCTGCTGAAGGAGAAGGAAAAACTA_ATCGCCCGGCTGGAGGAAAAAGTGAAAACCTTGAAAGCTCAGAACTCGGAGCTGGCGACCACGGCCAACATGCTCAGGGAACAGGTGGCACAGCTT #> 5 ACTGATACACTCCAAGCGGAGACAGACCAACTAGAAGATGAGAAGTCTGCTTTGCAGACCGAGATTGCCAACCTGCTGAAGGAGAAGGAAAAACTA_ATCGCCCGGCTGGAGGAAAAAGTGAAAACCTTGAAAGCTCAGAACTCGGAGCTGGCGTCCACGGCCAACATGCTCAGGGAACAGGTGAGGCAGCTT #> 6 ACTGATACACTCCAAGCGGAGACAGACCAACTAGAAGATGAGAAGTCTGCTTTGCAGACCGAGATTGCCAACCTGCTGAAGGAGAAGGAAAAACTA_ATCGCCCGGCTGGAGGAAAAAGTGAAAACCTTGAAAGCTCAGAACTCGGAGCTGGCGTCCACGGCCAACATGCTCAGGGAACAGGTGGGGCAGCTT #>   nbrReads maxNbrReads nbrUmis nbrMutBases nbrMutCodons nbrMutAAs varLengths #> 1        1           1       1           2            1         1      96_96 #> 2        1           1       1           3            1         1      96_96 #> 3        1           1       1           1            1         1      96_96 #> 4        1           1       1           1            1         1      96_96 #> 5        1           1       1           3            1         1      96_96 #> 6        1           1       1           2            1         1      96_96 #>                        mutantNameBase     mutantNameCodon #> 1          FOS.0.WT_JUN.37.C_JUN.39.C FOS.0.WT_JUN.13.CCC #> 2 FOS.0.WT_JUN.37.C_JUN.38.T_JUN.39.C FOS.0.WT_JUN.13.CTC #> 3                    FOS.0.WT_JUN.4.T  FOS.0.WT_JUN.2.TCC #> 4                   FOS.0.WT_JUN.58.A FOS.0.WT_JUN.20.ACC #> 5 FOS.0.WT_JUN.88.A_JUN.89.G_JUN.90.G FOS.0.WT_JUN.30.AGG #> 6          FOS.0.WT_JUN.89.G_JUN.90.G FOS.0.WT_JUN.30.GGG #>           mutantNameBaseHGVS      mutantNameAA       mutantNameAAHGVS #> 1 FOS:c_JUN:c.37_39delinsCCC FOS.0.WT_JUN.13.P FOS:p_JUN:p.(Ala13Pro) #> 2 FOS:c_JUN:c.37_39delinsCTC FOS.0.WT_JUN.13.L FOS:p_JUN:p.(Ala13Leu) #> 3           FOS:c_JUN:c.4G>T  FOS.0.WT_JUN.2.S  FOS:p_JUN:p.(Ala2Ser) #> 4          FOS:c_JUN:c.58T>A FOS.0.WT_JUN.20.T FOS:p_JUN:p.(Ser20Thr) #> 5 FOS:c_JUN:c.88_90delinsAGG FOS.0.WT_JUN.30.R FOS:p_JUN:p.(Ala30Arg) #> 6  FOS:c_JUN:c.89_90delinsGG FOS.0.WT_JUN.30.G FOS:p_JUN:p.(Ala30Gly) #>   mutationTypes #> 1 nonsynonymous #> 2 nonsynonymous #> 3 nonsynonymous #> 4 nonsynonymous #> 5 nonsynonymous #> 6 nonsynonymous #>                                                          sequenceAA #> 1 TDTLQAETDQLEDEKSALQTEIANLLKEKEKL_IARLEEKVKTLKPQNSELASTANMLREQVAQL #> 2 TDTLQAETDQLEDEKSALQTEIANLLKEKEKL_IARLEEKVKTLKLQNSELASTANMLREQVAQL #> 3 TDTLQAETDQLEDEKSALQTEIANLLKEKEKL_ISRLEEKVKTLKAQNSELASTANMLREQVAQL #> 4 TDTLQAETDQLEDEKSALQTEIANLLKEKEKL_IARLEEKVKTLKAQNSELATTANMLREQVAQL #> 5 TDTLQAETDQLEDEKSALQTEIANLLKEKEKL_IARLEEKVKTLKAQNSELASTANMLREQVRQL #> 6 TDTLQAETDQLEDEKSALQTEIANLLKEKEKL_IARLEEKVKTLKAQNSELASTANMLREQVGQL ## Filter summary out$filterSummary #>   nbrTotal f1_nbrAdapter f2_nbrNoPrimer f3_nbrReadWrongLength #> 1     1000             0              0                     0 #>   f4_nbrNoValidOverlap f5_nbrAvgVarQualTooLow f6_nbrTooManyNinVar #> 1                    0                     17                   0 #>   f7_nbrTooManyNinUMI f8_nbrTooManyBestWTHits f9_nbrMutQualTooLow #> 1                   0                       0                   0 #>   f10a_nbrTooManyMutCodons f10b_nbrTooManyMutBases f11_nbrForbiddenCodons #> 1                      698                       0                      0 #>   f12_nbrTooManyMutConstant f13_nbrTooManyBestConstantHits nbrRetained #> 1                         0                              0         285 ## Error statistics out$errorStatistics #>     PhredQuality nbrMatchForward nbrMismatchForward nbrMatchReverse #> 1              0               0                  0               0 #> 2              1               0                  0               0 #> 3              2               0                  0               0 #> 4              3               0                  0               0 #> 5              4               0                  0               0 #> 6              5               0                  0               0 #> 7              6               0                  0               0 #> 8              7               0                  0               0 #> 9              8               0                  0               0 #> 10             9               0                  0               0 #> 11            10               0                  0               0 #> 12            11               0                  0               0 #> 13            12               0                  0               0 #> 14            13               0                  0               0 #> 15            14             160                 11             206 #> 16            15               0                  0               0 #> 17            16               0                  0               0 #> 18            17               0                  0               0 #> 19            18               0                  0               0 #> 20            19               0                  0               0 #> 21            20               0                  0               0 #> 22            21               0                  0               0 #> 23            22              53                  0              14 #> 24            23               0                  0               0 #> 25            24               0                  0               0 #> 26            25               0                  0               0 #> 27            26               0                  0               0 #> 28            27             307                  4             486 #> 29            28               0                  0               0 #> 30            29               0                  0               0 #> 31            30               0                  0               0 #> 32            31               0                  0               0 #> 33            32               0                  0               0 #> 34            33             486                  0             468 #> 35            34               0                  0               0 #> 36            35               0                  0               0 #> 37            36               0                  0               0 #> 38            37            4108                  1            4505 #> 39            38               0                  0               0 #> 40            39               0                  0               0 #> 41            40               0                  0               0 #> 42            41               0                  0               0 #> 43            42               0                  0               0 #> 44            43               0                  0               0 #> 45            44               0                  0               0 #> 46            45               0                  0               0 #> 47            46               0                  0               0 #> 48            47               0                  0               0 #> 49            48               0                  0               0 #> 50            49               0                  0               0 #> 51            50               0                  0               0 #> 52            51               0                  0               0 #> 53            52               0                  0               0 #> 54            53               0                  0               0 #> 55            54               0                  0               0 #> 56            55               0                  0               0 #> 57            56               0                  0               0 #> 58            57               0                  0               0 #> 59            58               0                  0               0 #> 60            59               0                  0               0 #> 61            60               0                  0               0 #> 62            61               0                  0               0 #> 63            62               0                  0               0 #> 64            63               0                  0               0 #> 65            64               0                  0               0 #> 66            65               0                  0               0 #> 67            66               0                  0               0 #> 68            67               0                  0               0 #> 69            68               0                  0               0 #> 70            69               0                  0               0 #> 71            70               0                  0               0 #> 72            71               0                  0               0 #> 73            72               0                  0               0 #> 74            73               0                  0               0 #> 75            74               0                  0               0 #> 76            75               0                  0               0 #> 77            76               0                  0               0 #> 78            77               0                  0               0 #> 79            78               0                  0               0 #> 80            79               0                  0               0 #> 81            80               0                  0               0 #> 82            81               0                  0               0 #> 83            82               0                  0               0 #> 84            83               0                  0               0 #> 85            84               0                  0               0 #> 86            85               0                  0               0 #> 87            86               0                  0               0 #> 88            87               0                  0               0 #> 89            88               0                  0               0 #> 90            89               0                  0               0 #> 91            90               0                  0               0 #> 92            91               0                  0               0 #> 93            92               0                  0               0 #> 94            93               0                  0               0 #> 95            94               0                  0               0 #> 96            95               0                  0               0 #> 97            96               0                  0               0 #> 98            97               0                  0               0 #> 99            98               0                  0               0 #> 100           99               0                  0               0 #>     nbrMismatchReverse #> 1                    0 #> 2                    0 #> 3                    0 #> 4                    0 #> 5                    0 #> 6                    0 #> 7                    0 #> 8                    0 #> 9                    0 #> 10                   0 #> 11                   0 #> 12                   0 #> 13                   0 #> 14                   0 #> 15                  17 #> 16                   0 #> 17                   0 #> 18                   0 #> 19                   0 #> 20                   0 #> 21                   0 #> 22                   0 #> 23                   0 #> 24                   0 #> 25                   0 #> 26                   0 #> 27                   0 #> 28                   3 #> 29                   0 #> 30                   0 #> 31                   0 #> 32                   0 #> 33                   0 #> 34                   1 #> 35                   0 #> 36                   0 #> 37                   0 #> 38                   0 #> 39                   0 #> 40                   0 #> 41                   0 #> 42                   0 #> 43                   0 #> 44                   0 #> 45                   0 #> 46                   0 #> 47                   0 #> 48                   0 #> 49                   0 #> 50                   0 #> 51                   0 #> 52                   0 #> 53                   0 #> 54                   0 #> 55                   0 #> 56                   0 #> 57                   0 #> 58                   0 #> 59                   0 #> 60                   0 #> 61                   0 #> 62                   0 #> 63                   0 #> 64                   0 #> 65                   0 #> 66                   0 #> 67                   0 #> 68                   0 #> 69                   0 #> 70                   0 #> 71                   0 #> 72                   0 #> 73                   0 #> 74                   0 #> 75                   0 #> 76                   0 #> 77                   0 #> 78                   0 #> 79                   0 #> 80                   0 #> 81                   0 #> 82                   0 #> 83                   0 #> 84                   0 #> 85                   0 #> 86                   0 #> 87                   0 #> 88                   0 #> 89                   0 #> 90                   0 #> 91                   0 #> 92                   0 #> 93                   0 #> 94                   0 #> 95                   0 #> 96                   0 #> 97                   0 #> 98                   0 #> 99                   0 #> 100                  0"},{"path":"https://fmicompbio.github.io/mutscan/reference/generateQCReport.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate QC report — generateQCReport","title":"Generate QC report — generateQCReport","text":"Generate QC report","code":""},{"path":"https://fmicompbio.github.io/mutscan/reference/generateQCReport.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate QC report — generateQCReport","text":"","code":"generateQCReport(   se,   outFile,   reportTitle = \"mutscan QC report\",   forceOverwrite = FALSE,   ... )"},{"path":"https://fmicompbio.github.io/mutscan/reference/generateQCReport.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate QC report — generateQCReport","text":"se SummarizedExperiment object, typically generated summarizeExperiment(). outFile Character string providing name output file. extension .html. reportTitle Character string specifying title QC report. forceOverwrite Logical scalar, indicating whether existing file name outFile overwritten. ... Additional parameters forwarded render, example quiet = TRUE.","code":""},{"path":"https://fmicompbio.github.io/mutscan/reference/generateQCReport.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generate QC report — generateQCReport","text":"Invisibly, path generated html file.","code":""},{"path":[]},{"path":"https://fmicompbio.github.io/mutscan/reference/generateQCReport.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Generate QC report — generateQCReport","text":"Charlotte Soneson","code":""},{"path":"https://fmicompbio.github.io/mutscan/reference/generateQCReport.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Generate QC report — generateQCReport","text":"","code":"## Load SummarizedExperiment object se <- readRDS(system.file(\"extdata\", \"GSE102901_cis_se.rds\",                           package = \"mutscan\")) ## Define output file outfile <- tempfile(fileext = \".html\")  ## Generate QC report generateQCReport(se, outfile)"},{"path":"https://fmicompbio.github.io/mutscan/reference/groupSimilarSequences.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a conversion table for collapsing similar sequences — groupSimilarSequences","title":"Create a conversion table for collapsing similar sequences — groupSimilarSequences","text":"Create conversion table collapsing similar sequences","code":""},{"path":"https://fmicompbio.github.io/mutscan/reference/groupSimilarSequences.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a conversion table for collapsing similar sequences — groupSimilarSequences","text":"","code":"groupSimilarSequences(   seqs,   scores,   collapseMaxDist,   collapseMinScore,   collapseMinRatio,   verbose )"},{"path":"https://fmicompbio.github.io/mutscan/reference/groupSimilarSequences.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a conversion table for collapsing similar sequences — groupSimilarSequences","text":"seqs Character vector nucleotide sequences (pairs sequences concatenated \"_\") collapsed. sequences must length. scores Numeric vector \"scores\" sequences. Typically total read/UMI count. higher score preferred deciding sequence use representative group collapsed sequences. collapseMaxDist Numeric scalar defining tolerance collapsing similar sequences. value [0, 1), defines maximal Hamming distance terms fraction sequence length: (round(collapseMaxDist * nchar(sequence))). value greater equal 1 rounded directly used maximum allowed Hamming distance. Note sequences can collapsed length. collapseMinScore Numeric scalar, indicating minimum score required sequence considered representative group similar sequences (.e., allow sequences collapsed ). collapseMinRatio Numeric scalar. collapsing similar sequences, low-frequency sequence collapsed higher-frequency sequence ratio high-frequency low-frequency scores least high. value 0 indicates check performed. verbose Logical scalar, whether print progress messages.","code":""},{"path":"https://fmicompbio.github.io/mutscan/reference/groupSimilarSequences.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a conversion table for collapsing similar sequences — groupSimilarSequences","text":"data.frame two columns, containing input sequences representatives groups resulting grouping similar sequences, respectively.","code":""},{"path":"https://fmicompbio.github.io/mutscan/reference/groupSimilarSequences.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Create a conversion table for collapsing similar sequences — groupSimilarSequences","text":"Michael Stadler, Charlotte Soneson","code":""},{"path":"https://fmicompbio.github.io/mutscan/reference/groupSimilarSequences.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create a conversion table for collapsing similar sequences — groupSimilarSequences","text":"","code":"seqs <- c(\"AACGTAGCA\", \"ACCGTAGCA\", \"AACGGAGCA\", \"ATCGGAGCA\", \"TGAGGCATA\") scores <- c(5, 1, 3, 1, 8) groupSimilarSequences(seqs = seqs, scores = scores,                        collapseMaxDist = 1, collapseMinScore = 0,                        collapseMinRatio = 0, verbose = FALSE) #>    sequence representative #> 1 AACGTAGCA      AACGTAGCA #> 2 ACCGTAGCA      AACGTAGCA #> 3 AACGGAGCA      AACGTAGCA #> 4 ATCGGAGCA      ATCGGAGCA #> 5 TGAGGCATA      TGAGGCATA"},{"path":"https://fmicompbio.github.io/mutscan/reference/linkMultipleVariants.html","id":null,"dir":"Reference","previous_headings":"","what":"Process an experiment with multiple variable sequences — linkMultipleVariants","title":"Process an experiment with multiple variable sequences — linkMultipleVariants","text":"function enables processing data sets multiple variable sequences, potentially handled different ways. example, barcode association experiment two variable sequences (barcode biological variant) need processed differently, e.g. terms matching wildtype sequences collapsing similar sequences. contrast, digestFastqs allow specification multiple variable sequences (within forward reverse reads), concatenated processed single unit.","code":""},{"path":"https://fmicompbio.github.io/mutscan/reference/linkMultipleVariants.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Process an experiment with multiple variable sequences — linkMultipleVariants","text":"","code":"linkMultipleVariants(combinedDigestParams = list(), ...)"},{"path":"https://fmicompbio.github.io/mutscan/reference/linkMultipleVariants.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Process an experiment with multiple variable sequences — linkMultipleVariants","text":"combinedDigestParams named list arguments digestFastqs combined (\"naive\") run. ... Additional arguments providing arguments digestFastqs separate runs (processing variable sequence turn). argument must named list arguments digestFastqs. addition, arguments collapseMaxDist, collapseMinScore collapseMinRatio can specified, passed collapseMutantsBySimilarity.","code":""},{"path":"https://fmicompbio.github.io/mutscan/reference/linkMultipleVariants.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Process an experiment with multiple variable sequences — linkMultipleVariants","text":"list following elements: countAggregated - tibble columns corresponding     variable sequences, column total observed     read count combination. convSeparate - list conversion tables respective     separate runs. outCombined - digestFastqs output combined run.","code":""},{"path":"https://fmicompbio.github.io/mutscan/reference/linkMultipleVariants.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Process an experiment with multiple variable sequences — linkMultipleVariants","text":"linkMultipleVariants process input following way: First, run digestFastqs parameters provided     combinedDigestParams. Typically,     \"naive\" counting run, frequencies observed     variants tabulated. variable sequences     within forward reverse reads, respectively,     processed single sequence. Next, run digestFastqs additional     parameter sets provided (...).     correspond single variable sequence combined     run (.e., two Vs element specifications     combined run, two additional     parameter sets provided, corresponding     processing one variable sequence part). assumed     order additional arguments correspond     order variable sequences combined run, way     variable sequences extracted separate     runs concatenated order parameter sets     provided linkMultipleVariants, form variable     sequence extracted combined run. result separate runs 'conversion table',     containing final set identified sequence variants well     individual sequences corresponding .     combined count table combined, \"naive\"     run order create aggregated count table. precisely,     sequence combined run split constituent     variable sequences,     variable sequence matched output right     separate run, final feature ID (mutant name,     collapsed sequence) extracted used replace original     sequence combined count table. matches done,     rows NAs (match found separate run)     removed counts aggregated across identical     combinations variable sequences. order define elementsForward elementsReverse arguments separate runs, strategy often works simply copy arguments combined run, successively replace one 'V's 'S'. effectively process one variable sequence time, keeping elements reads consistent (since can affect e.g. filtering criteria). Note process individual variable sequences reverse read, also need swap 'forward' 'reverse' specifications (since digestFastqs requires forward read).","code":""},{"path":"https://fmicompbio.github.io/mutscan/reference/linkMultipleVariants.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Process an experiment with multiple variable sequences — linkMultipleVariants","text":"Charlotte Soneson, Michael Stadler","code":""},{"path":"https://fmicompbio.github.io/mutscan/reference/plotDistributions.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot distribution of observed values — plotDistributions","title":"Plot distribution of observed values — plotDistributions","text":"Plot distribution observed values","code":""},{"path":"https://fmicompbio.github.io/mutscan/reference/plotDistributions.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot distribution of observed values — plotDistributions","text":"","code":"plotDistributions(   se,   selAssay = \"counts\",   groupBy = NULL,   plotType = \"density\",   facet = FALSE,   pseudocount = 0 )"},{"path":"https://fmicompbio.github.io/mutscan/reference/plotDistributions.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot distribution of observed values — plotDistributions","text":"se SummarizedExperiment object, typically generated summarizeExperiment(). selAssay Character scalar specifying assay se use plotting. groupBy Character scalar specifying column colData(se) use coloring stratifying plots. plotType Character scalar specifying type plot construct. Either 'density', 'histogram' 'knee'. facet Logical scalar, indicating whether facet plot values specified groupBy column. pseudocount Numeric scalar, representing number add observed values selAssay assay plotting.","code":""},{"path":"https://fmicompbio.github.io/mutscan/reference/plotDistributions.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot distribution of observed values — plotDistributions","text":"ggplot object.","code":""},{"path":"https://fmicompbio.github.io/mutscan/reference/plotDistributions.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Plot distribution of observed values — plotDistributions","text":"Charlotte Soneson","code":""},{"path":"https://fmicompbio.github.io/mutscan/reference/plotDistributions.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plot distribution of observed values — plotDistributions","text":"","code":"se <- readRDS(system.file(\"extdata\", \"GSE102901_cis_se.rds\",                            package = \"mutscan\"))[1:200, ] plotDistributions(se) #> Warning: log-10 transformation introduced infinite values. #> Warning: Removed 19 rows containing non-finite outside the scale range #> (`stat_density()`)."},{"path":"https://fmicompbio.github.io/mutscan/reference/plotFiltering.html","id":null,"dir":"Reference","previous_headings":"","what":"Visualize the filtering procedure — plotFiltering","title":"Visualize the filtering procedure — plotFiltering","text":"Display number (fraction) reads remaining step internal mutscan filtering.","code":""},{"path":"https://fmicompbio.github.io/mutscan/reference/plotFiltering.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Visualize the filtering procedure — plotFiltering","text":"","code":"plotFiltering(   se,   valueType = \"reads\",   onlyActiveFilters = TRUE,   displayNumbers = TRUE,   numberSize = 4,   plotType = \"remaining\",   facetBy = \"sample\" )"},{"path":"https://fmicompbio.github.io/mutscan/reference/plotFiltering.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Visualize the filtering procedure — plotFiltering","text":"se SummarizedExperiment object, e.g. summarizeExperiment. valueType Either \"reads\" \"fractions\", indicating whether plot number reads, fraction total number reads, retained /filtered filtering step. onlyActiveFilters Logical scalar, whether include active filters (.e., read filtered samples). Defaults TRUE. displayNumbers Logical scalar, indicating whether display number (fraction) reads retained every filtering step. numberSize Numeric scalar, indicating size displayed numbers (displayNumbers TRUE). plotType Character scalar, indicating show plot. Either \"remaining\" \"filtered\". facetBy Character scalar, indicating variable plots facetted. Either \"sample\" \"step\".","code":""},{"path":"https://fmicompbio.github.io/mutscan/reference/plotFiltering.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Visualize the filtering procedure — plotFiltering","text":"ggplot object.","code":""},{"path":"https://fmicompbio.github.io/mutscan/reference/plotFiltering.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Visualize the filtering procedure — plotFiltering","text":"function assumes number reads filtered step provided columns colData(se), column names form f[0-9]_filteringreason, filtering columns occur columns named nbrTotal nbrRetained.","code":""},{"path":"https://fmicompbio.github.io/mutscan/reference/plotFiltering.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Visualize the filtering procedure — plotFiltering","text":"Charlotte Soneson","code":""},{"path":"https://fmicompbio.github.io/mutscan/reference/plotFiltering.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Visualize the filtering procedure — plotFiltering","text":"","code":"se <- readRDS(system.file(\"extdata\", \"GSE102901_cis_se.rds\",                            package = \"mutscan\"))[1:200, ] plotFiltering(se)"},{"path":"https://fmicompbio.github.io/mutscan/reference/plotMeanDiff.html","id":null,"dir":"Reference","previous_headings":"","what":"Construct an MA (mean-difference) plot — plotMeanDiff","title":"Construct an MA (mean-difference) plot — plotMeanDiff","text":"Construct MA (mean-difference) plot","code":""},{"path":"https://fmicompbio.github.io/mutscan/reference/plotMeanDiff.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Construct an MA (mean-difference) plot — plotMeanDiff","text":"","code":"plotMeanDiff(   res,   meanCol = NULL,   logFCCol = NULL,   pvalCol = NULL,   padjCol = NULL,   padjThreshold = 0.05,   pointSize = \"small\",   interactivePlot = FALSE,   nTopToLabel = 0 )"},{"path":"https://fmicompbio.github.io/mutscan/reference/plotMeanDiff.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Construct an MA (mean-difference) plot — plotMeanDiff","text":"res data.frame (typically output calculateRelativeFC()) columns corresponding average abundance (logCPM AveExpr), log-fold change (logFC) significance (FDR adj.P.Val). meanCol, logFCCol, pvalCol, padjCol Character scalars indicating columns res used represent mean value (x-axis), logFC (y-axis), nominal p-value (used find top features label) adjusted p-value (used coloring). NULL (default), pre-specified values used depending available columns (\"logCPM\" \"AveExpr\", \"logFC\", \"PValue\" \"P.Value\", \"FDR\" \"adj.P.Val\", respectively). padjThreshold Numeric scalar indicating adjusted p-value threshold use coloring points. features adjusted p-value treshold shown red. pointSize Either \"small\" \"large\", indicating two available plot styles used. interactivePlot Logical scalar, indicating whether interactive plot returned, one can hover individual points obtain information. nTopToLabel Numeric scalar, indicating number points labeled plot. points ranked pvalCol column, top nTopToLabel values labeled corresponding row names. used interactivePlot FALSE.","code":""},{"path":"https://fmicompbio.github.io/mutscan/reference/plotMeanDiff.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Construct an MA (mean-difference) plot — plotMeanDiff","text":"interactivePlot TRUE, plotly     object. interactivePlot FALSE, ggplot2     object.","code":""},{"path":"https://fmicompbio.github.io/mutscan/reference/plotMeanDiff.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Construct an MA (mean-difference) plot — plotMeanDiff","text":"Charlotte Soneson","code":""},{"path":"https://fmicompbio.github.io/mutscan/reference/plotMeanDiff.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Construct an MA (mean-difference) plot — plotMeanDiff","text":"","code":"se <- readRDS(system.file(\"extdata\", \"GSE102901_cis_se.rds\",                           package = \"mutscan\"))[1:200, ] design <- model.matrix(~ Replicate + Condition,                        data = SummarizedExperiment::colData(se)) res <- calculateRelativeFC(se, design, coef = \"Conditioncis_output\") plotMeanDiff(res, pointSize = \"large\", nTopToLabel = 3)"},{"path":"https://fmicompbio.github.io/mutscan/reference/plotPairs.html","id":null,"dir":"Reference","previous_headings":"","what":"Make pairs plot of selected assay from a SummarizedExperiment object — plotPairs","title":"Make pairs plot of selected assay from a SummarizedExperiment object — plotPairs","text":"Construct pairs plot columns given assay. lower-triangular panels display scatter plots, upper-triangular ones print (Pearson Spearman) correlations, diagonal panels show histograms respective columns.","code":""},{"path":"https://fmicompbio.github.io/mutscan/reference/plotPairs.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Make pairs plot of selected assay from a SummarizedExperiment object — plotPairs","text":"","code":"plotPairs(   se,   selAssay = \"counts\",   doLog = TRUE,   pseudocount = 1,   corMethod = \"pearson\",   histBreaks = 40,   pointsType = \"points\",   corSizeMult = 5,   corSizeAdd = 2,   pointSize = 0.1,   pointAlpha = 0.3,   colorByCorrelation = TRUE,   corrColorRange = NULL,   addIdentityLine = FALSE )"},{"path":"https://fmicompbio.github.io/mutscan/reference/plotPairs.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Make pairs plot of selected assay from a SummarizedExperiment object — plotPairs","text":"se SummarizedExperiment object, e.g. output summarizeExperiment selAssay Character scalar, assay use basis pairs plot. doLog Logical scalar, whether log-transform values plotting. pseudocount Numeric scalar, pseudocount add values log-transforming (doLog TRUE). corMethod Either \"pearson\" \"spearman\", type correlation calculate. histBreaks Numeric scalar, number breaks histograms put diagonal panels. pointsType Either \"points\", \"smoothscatter\", \"scattermore\" \"scattermost\" (latter two require \"scattermore\" package installed), determining type plots made. corSizeMult, corSizeAdd Numeric scalars determining absolute correlation value transformed font size. transformation corSizeMult * abs(corr) + corSizeAdd. pointSize, pointAlpha Numeric scalars determining size opacity points plot. colorByCorrelation Logical scalar, indicating whether correlation panels colored according correlation value. corrColorRange Numeric vector length 2, providing lower upper limits color scale coloring correlation. values positive; range used negative correlations. NULL (default), range inferred data. addIdentityLine Logical scalar, indicating whether identity line added (used pointsType = \"points\").","code":""},{"path":"https://fmicompbio.github.io/mutscan/reference/plotPairs.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Make pairs plot of selected assay from a SummarizedExperiment object — plotPairs","text":"ggplot object.","code":""},{"path":"https://fmicompbio.github.io/mutscan/reference/plotPairs.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Make pairs plot of selected assay from a SummarizedExperiment object — plotPairs","text":"Charlotte Soneson","code":""},{"path":"https://fmicompbio.github.io/mutscan/reference/plotPairs.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Make pairs plot of selected assay from a SummarizedExperiment object — plotPairs","text":"","code":"se <- readRDS(system.file(\"extdata\", \"GSE102901_cis_se.rds\",                            package = \"mutscan\"))[1:200, ] plotPairs(se)"},{"path":"https://fmicompbio.github.io/mutscan/reference/plotTotals.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot the column totals of a selected assay — plotTotals","title":"Plot the column totals of a selected assay — plotTotals","text":"Plot column totals selected assay","code":""},{"path":"https://fmicompbio.github.io/mutscan/reference/plotTotals.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot the column totals of a selected assay — plotTotals","text":"","code":"plotTotals(se, selAssay = \"counts\", groupBy = NULL)"},{"path":"https://fmicompbio.github.io/mutscan/reference/plotTotals.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot the column totals of a selected assay — plotTotals","text":"se SummarizedExperiment object, typically generated summarizeExperiment(). selAssay Character scalar specifying assay se use plotting. groupBy Character scalar indicating column rowData(se) group features calculating column sums.","code":""},{"path":"https://fmicompbio.github.io/mutscan/reference/plotTotals.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot the column totals of a selected assay — plotTotals","text":"ggplot object.","code":""},{"path":"https://fmicompbio.github.io/mutscan/reference/plotTotals.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Plot the column totals of a selected assay — plotTotals","text":"Charlotte Soneson","code":""},{"path":"https://fmicompbio.github.io/mutscan/reference/plotTotals.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plot the column totals of a selected assay — plotTotals","text":"","code":"se <- readRDS(system.file(\"extdata\", \"GSE102901_cis_se.rds\",                            package = \"mutscan\"))[1:200, ] plotTotals(se)"},{"path":"https://fmicompbio.github.io/mutscan/reference/plotVolcano.html","id":null,"dir":"Reference","previous_headings":"","what":"Construct a volcano plot — plotVolcano","title":"Construct a volcano plot — plotVolcano","text":"Construct volcano plot","code":""},{"path":"https://fmicompbio.github.io/mutscan/reference/plotVolcano.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Construct a volcano plot — plotVolcano","text":"","code":"plotVolcano(   res,   logFCCol = NULL,   pvalCol = NULL,   padjCol = NULL,   padjThreshold = 0.05,   pointSize = \"small\",   interactivePlot = FALSE,   nTopToLabel = 0 )"},{"path":"https://fmicompbio.github.io/mutscan/reference/plotVolcano.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Construct a volcano plot — plotVolcano","text":"res data.frame (typically output calculateRelativeFC()) columns corresponding log-fold change (logFC), p-value (PValue P.Value) significance (FDR adj.P.Val). logFCCol, pvalCol, padjCol Character scalars indicating columns res used represent logFC (x-axis), p-value (y-axis) adjusted p-value (used coloring). NULL (default), pre-specified values used depending available columns (\"logFC\", \"PValue\" \"P.Value\", \"FDR\" \"adj.P.Val\", respectively). padjThreshold Numeric scalar indicating adjusted p-value threshold use coloring points. features adjusted p-value treshold shown red. pointSize Either \"small\" \"large\", indicating two available plot styles used. interactivePlot Logical scalar, indicating whether interactive plot returned, one can hover individual points obtain information. nTopToLabel Numeric scalar, indicating number points labeled plot. points ranked pvalCol column, top nTopToLabel values labeled corresponding row names. used interactivePlot FALSE.","code":""},{"path":"https://fmicompbio.github.io/mutscan/reference/plotVolcano.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Construct a volcano plot — plotVolcano","text":"interactivePlot TRUE, plotly     object. interactivePlot FALSE, ggplot2     object.","code":""},{"path":"https://fmicompbio.github.io/mutscan/reference/plotVolcano.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Construct a volcano plot — plotVolcano","text":"Charlotte Soneson","code":""},{"path":"https://fmicompbio.github.io/mutscan/reference/plotVolcano.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Construct a volcano plot — plotVolcano","text":"","code":"se <- readRDS(system.file(\"extdata\", \"GSE102901_cis_se.rds\",                           package = \"mutscan\"))[1:200, ] design <- model.matrix(~ Replicate + Condition,                        data = SummarizedExperiment::colData(se)) res <- calculateRelativeFC(se, design, coef = \"Conditioncis_output\") plotVolcano(res, pointSize = \"large\", nTopToLabel = 3)"},{"path":"https://fmicompbio.github.io/mutscan/reference/relabelMutPositions.html","id":null,"dir":"Reference","previous_headings":"","what":"Relabel the positions of mutations in the designated ID — relabelMutPositions","title":"Relabel the positions of mutations in the designated ID — relabelMutPositions","text":"Relabel positions mutations designated ID","code":""},{"path":"https://fmicompbio.github.io/mutscan/reference/relabelMutPositions.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Relabel the positions of mutations in the designated ID — relabelMutPositions","text":"","code":"relabelMutPositions(se, conversionTable, mutNameDelimiter = \".\")"},{"path":"https://fmicompbio.github.io/mutscan/reference/relabelMutPositions.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Relabel the positions of mutations in the designated ID — relabelMutPositions","text":"se SummarizedExperiment object, row names form XX.AA.NNN, XX name reference sequence, AA position mutated codon, NNN mutated codon amino acid. . delimiter, specified mutNameDelimiter argument. rows corresponding sequences multiple mutated codons, row names contain multiple names form single string, separated \"_\". conversionTable data.frame least three columns: seqname reference sequence name (match XX mutation name) position codon position (match AA mutation name) name new name codon (replace AA mutation name, reference sequence matches seqname) mutNameDelimiter delimiter used mutation name (. ).","code":""},{"path":"https://fmicompbio.github.io/mutscan/reference/relabelMutPositions.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Relabel the positions of mutations in the designated ID — relabelMutPositions","text":"SummarizedExperiment object modified row names.","code":""},{"path":"https://fmicompbio.github.io/mutscan/reference/relabelMutPositions.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Relabel the positions of mutations in the designated ID — relabelMutPositions","text":"Charlotte Soneson","code":""},{"path":"https://fmicompbio.github.io/mutscan/reference/relabelMutPositions.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Relabel the positions of mutations in the designated ID — relabelMutPositions","text":"","code":"x <- readRDS(system.file(\"extdata\", \"GSE102901_cis_se.rds\",                          package = \"mutscan\")) conversionTable <- data.frame(seqname = \"f\", position = 0:32)  conversionTable$name = paste0((conversionTable$position - 1) %/% 7 + 1,                                c(\"\", rep(letters[1:7], 6))[1:33]) out <- relabelMutPositions(x, conversionTable)"},{"path":"https://fmicompbio.github.io/mutscan/reference/summarizeExperiment.html","id":null,"dir":"Reference","previous_headings":"","what":"Summarize and collapse multiple mutational scanning experiments — summarizeExperiment","title":"Summarize and collapse multiple mutational scanning experiments — summarizeExperiment","text":"Combine multiple sequence lists (returned digestFastqs SummarizedExperiment, observed variable sequences (sequence pairs) rows samples columns.","code":""},{"path":"https://fmicompbio.github.io/mutscan/reference/summarizeExperiment.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Summarize and collapse multiple mutational scanning experiments — summarizeExperiment","text":"","code":"summarizeExperiment(x, coldata, countType = \"umis\")"},{"path":"https://fmicompbio.github.io/mutscan/reference/summarizeExperiment.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Summarize and collapse multiple mutational scanning experiments — summarizeExperiment","text":"x named list objects returned digestFastqs. Names used link objects metadata provided coldata. coldata data.frame least one column \"Name\", used link objects x. potentially subset reordered version coldata stored colData returned SummarizedExperiment. countType Either \"reads\" \"umis\". \"reads\", \"count\" assay returned object contain observed number reads sequence (pair). \"umis\", \"count\" assay contain number unique UMIs observed sequence (pair).","code":""},{"path":"https://fmicompbio.github.io/mutscan/reference/summarizeExperiment.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Summarize and collapse multiple mutational scanning experiments — summarizeExperiment","text":"SummarizedExperiment x     assays(x)$counts containing observed number sequences         sequence pairs (countType = \"reads\"), observed number         unique UMIs sequence sequence pair (countType =         \"umis\"). rowData(x) containing unique sequences sequence pairs. colData(x) containing metadata provided coldata.","code":""},{"path":"https://fmicompbio.github.io/mutscan/reference/summarizeExperiment.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Summarize and collapse multiple mutational scanning experiments — summarizeExperiment","text":"Michael Stadler, Charlotte Soneson","code":""},{"path":"https://fmicompbio.github.io/mutscan/reference/summarizeExperiment.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Summarize and collapse multiple mutational scanning experiments — summarizeExperiment","text":"","code":"## Input sample inp <- digestFastqs(     fastqForward = system.file(\"extdata\", \"cisInput_1.fastq.gz\",                                 package = \"mutscan\"),      elementsForward = \"SUCV\", elementLengthsForward = c(1, 10, 18, 96),      constantForward = \"AACCGGAGGAGGGAGCTG\",      wildTypeForward = c(FOS = paste0(\"ACTGATACACTCCAAGCGGAGACAGACCAACTAGAAGATGAGAAGTC\",                                       \"TGCTTTGCAGACCGAGATTGCCAACCTGCTGAAGGAGAAGGAAAAACTA\")),     nbrMutatedCodonsMaxForward = 1 ) ## Output sample outp <- digestFastqs(     fastqForward = system.file(\"extdata\", \"cisOutput_1.fastq.gz\",                                 package = \"mutscan\"),      elementsForward = \"SUCV\", elementLengthsForward = c(1, 10, 18, 96),      constantForward = \"AACCGGAGGAGGGAGCTG\",      wildTypeForward = c(FOS = paste0(\"ACTGATACACTCCAAGCGGAGACAGACCAACTAGAAGATGAGAAGTC\",                                       \"TGCTTTGCAGACCGAGATTGCCAACCTGCTGAAGGAGAAGGAAAAACTA\")),     nbrMutatedCodonsMaxForward = 1 ) ## Combine se <- summarizeExperiment(     x = list(r1inp = inp, r1outp = outp),      coldata = data.frame(Name = c(\"r1inp\", \"r1outp\"),                           Condition = c(\"input\", \"output\"),                           Replicate = c(\"rep1\", \"rep1\")),     countType = \"umis\" ) se #> class: SummarizedExperiment  #> dim: 134 2  #> metadata(4): parameters errorStatistics countType mutNameDelimiter #> assays(1): counts #> rownames(134): FOS.0.WT FOS.1.AAT ... FOS.9.GAA FOS.9.GAG #> rowData names(19): mutantName sequence ... mutationTypes varLengths #> colnames(2): r1inp r1outp #> colData names(19): Name Condition ... f13_nbrTooManyBestConstantHits #>   nbrRetained"},{"path":"https://fmicompbio.github.io/mutscan/news/index.html","id":"mutscan-034","dir":"Changelog","previous_headings":"","what":"mutscan 0.3.4","title":"mutscan 0.3.4","text":"Allow use scattermore/scattermost plotPairs","code":""},{"path":"https://fmicompbio.github.io/mutscan/news/index.html","id":"mutscan-033","dir":"Changelog","previous_headings":"","what":"mutscan 0.3.3","title":"mutscan 0.3.3","text":"Bugfix mergeReadPairPartial situation specified minMergedLength/maxMergedLength larger total length two merged sequences","code":""},{"path":"https://fmicompbio.github.io/mutscan/news/index.html","id":"mutscan-031","dir":"Changelog","previous_headings":"","what":"mutscan 0.3.1","title":"mutscan 0.3.1","text":"Adapt summarizeExperiment include errorStatistics metadata(se) Modify plotPairs ignore NAs rather give error calculating correlations","code":""},{"path":"https://fmicompbio.github.io/mutscan/news/index.html","id":"mutscan-030","dir":"Changelog","previous_headings":"","what":"mutscan 0.3.0","title":"mutscan 0.3.0","text":"Collapsing variable sequences longer supported digestFastqs. Use collapseMutantsBySimilarity() instead","code":""},{"path":"https://fmicompbio.github.io/mutscan/news/index.html","id":"mutscan-0237","dir":"Changelog","previous_headings":"","what":"mutscan 0.2.37","title":"mutscan 0.2.37","text":"accommodate changes edgeR version 3.42 (Bioconductor 3.17) mutscan manuscript published available https://doi.org/10.1186/s13059-023-02967-0","code":""},{"path":"https://fmicompbio.github.io/mutscan/news/index.html","id":"mutscan-0236","dir":"Changelog","previous_headings":"","what":"mutscan 0.2.36","title":"mutscan 0.2.36","text":"Check reads don’t exceed maximal allowed length Add parameter specify maximal read length","code":""},{"path":"https://fmicompbio.github.io/mutscan/news/index.html","id":"mutscan-0235","dir":"Changelog","previous_headings":"","what":"mutscan 0.2.35","title":"mutscan 0.2.35","text":"Add alternative names variants (including HGVS identifiers)","code":""},{"path":"https://fmicompbio.github.io/mutscan/news/index.html","id":"mutscan-0234","dir":"Changelog","previous_headings":"","what":"mutscan 0.2.34","title":"mutscan 0.2.34","text":"Expand examples function documentation","code":""},{"path":"https://fmicompbio.github.io/mutscan/news/index.html","id":"mutscan-0233","dir":"Changelog","previous_headings":"","what":"mutscan 0.2.33","title":"mutscan 0.2.33","text":"Replace Matrix.utils::aggregate.Matrix (removed CRAN) DelayedArray::rowsum","code":""},{"path":"https://fmicompbio.github.io/mutscan/news/index.html","id":"mutscan-0232","dir":"Changelog","previous_headings":"","what":"mutscan 0.2.32","title":"mutscan 0.2.32","text":"Expand FASTQ file paths automatically Filter reads variable region longer best matching WT sequence","code":""},{"path":"https://fmicompbio.github.io/mutscan/news/index.html","id":"mutscan-0231","dir":"Changelog","previous_headings":"","what":"mutscan 0.2.31","title":"mutscan 0.2.31","text":"Add option include identity line pairs plots Select points label result plots based nominal p-value Add option manually set correlation range coloring pairs plots","code":""},{"path":"https://fmicompbio.github.io/mutscan/news/index.html","id":"mutscan-0230","dir":"Changelog","previous_headings":"","what":"mutscan 0.2.30","title":"mutscan 0.2.30","text":"Swap MIT license","code":""},{"path":"https://fmicompbio.github.io/mutscan/news/index.html","id":"mutscan-0229","dir":"Changelog","previous_headings":"","what":"mutscan 0.2.29","title":"mutscan 0.2.29","text":"Include degrees freedom output calculateRelativeFC","code":""},{"path":"https://fmicompbio.github.io/mutscan/news/index.html","id":"mutscan-0228","dir":"Changelog","previous_headings":"","what":"mutscan 0.2.28","title":"mutscan 0.2.28","text":"Rename calculatePPIScore calculateFitnessScore Add amino acid-related information (AA sequence, mutant name, number mutated amino acid) digestFastqs output, propagate summarizeExperiment collapseMutantsByAA.","code":""},{"path":"https://fmicompbio.github.io/mutscan/news/index.html","id":"mutscan-0227","dir":"Changelog","previous_headings":"","what":"mutscan 0.2.27","title":"mutscan 0.2.27","text":"Add linkMultipleVariants function","code":""},{"path":"https://fmicompbio.github.io/mutscan/news/index.html","id":"mutscan-0226","dir":"Changelog","previous_headings":"","what":"mutscan 0.2.26","title":"mutscan 0.2.26","text":"Use arithmetic instead geometric mean PPI calculations","code":""},{"path":"https://fmicompbio.github.io/mutscan/news/index.html","id":"mutscan-0225","dir":"Changelog","previous_headings":"","what":"mutscan 0.2.25","title":"mutscan 0.2.25","text":"add names WT sequences unnamed","code":""},{"path":"https://fmicompbio.github.io/mutscan/news/index.html","id":"mutscan-0224","dir":"Changelog","previous_headings":"","what":"mutscan 0.2.24","title":"mutscan 0.2.24","text":"Added function calculate nearest string distances","code":""},{"path":"https://fmicompbio.github.io/mutscan/news/index.html","id":"mutscan-0223","dir":"Changelog","previous_headings":"","what":"mutscan 0.2.23","title":"mutscan 0.2.23","text":"Changed default value forbidden codons “” Make result plots flexible Propagate information number mutated bases/codons summarizeExperiment()","code":""},{"path":"https://fmicompbio.github.io/mutscan/news/index.html","id":"mutscan-0222","dir":"Changelog","previous_headings":"","what":"mutscan 0.2.22","title":"mutscan 0.2.22","text":"Added argument specify title QC report. Internal refactoring argument checking.","code":""},{"path":"https://fmicompbio.github.io/mutscan/news/index.html","id":"mutscan-0221","dir":"Changelog","previous_headings":"","what":"mutscan 0.2.21","title":"mutscan 0.2.21","text":"Added NEWS.md file track changes package. Added generateQCReport() function. Added functions plot results calculateRelativeFC(). Added functions plot distributions counts well total counts.","code":""}]
