% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/digestFastqs.R
\name{digestFastqs}
\alias{digestFastqs}
\title{Read, filter and digest sequences from two fastq files.}
\usage{
digestFastqs(fastqForward, fastqReverse, mergeForwardReverse,
  revComplForward, revComplReverse, skipForward, skipReverse,
  umiLengthForward, umiLengthReverse, constantLengthForward,
  constantLengthReverse, variableLengthForward, variableLengthReverse,
  adapterForward = "", adapterReverse = "", primerForward = "",
  primerReverse = "", wildTypeForward = "", wildTypeReverse = "",
  constantForward = "", constantReverse = "",
  avePhredMinForward = 20, avePhredMinReverse = 20,
  variableNMaxForward = 0, variableNMaxReverse = 0, umiNMax = 0,
  nbrMutatedCodonsMaxForward = 1, nbrMutatedCodonsMaxReverse = 1,
  forbiddenMutatedCodonsForward = "NNW",
  forbiddenMutatedCodonsReverse = "NNW", mutatedPhredMinForward = 0,
  mutatedPhredMinReverse = 0, mutNameDelimiter = ".",
  verbose = FALSE)
}
\arguments{
\item{fastqForward, fastqReverse}{character(1), paths to gzipped FASTQ files
corresponding to forward and reverse reads, respectively.}

\item{mergeForwardReverse}{logical(1), whether to fuse the forward and
reverse variable sequences.}

\item{revComplForward, revComplReverse}{logical(1), whether to reverse
complement the forward/reverse reads, respectively.}

\item{skipForward, skipReverse}{numeric(1), the number of bases to skip in the
start of each forward and reverse read, respectively.}

\item{umiLengthForward, umiLengthReverse}{numeric(1), the length of the
barcode (UMI) sequence in the forward/reverse reads, respectively, not
including the skipped bases (defined by
\code{skipForward}/\code{skipReverse}).}

\item{constantLengthForward, constantLengthReverse}{numeric(1), the length of
the constant sequence in the forward/reverse reads, respectively.}

\item{variableLengthForward, variableLengthReverse}{numeric(1), the length of
the variable sequence in the forward/reverse reads, respectively.}

\item{adapterForward, adapterReverse}{character(1), the adapter sequence for
forward/reverse reads, respectively. If a forward/reverse read contains the
corresponding adapter sequence, the sequence pair will be filtered out.
If set to \code{NULL}, no adapter filtering is performed. The number of
filtered read pairs are reported in the return value.}

\item{primerForward, primerReverse}{character(1), the primer sequence for
forward/reverse reads, respectively. Only read pairs that contain both the
forward and reverse primers will be retained.}

\item{wildTypeForward, wildTypeReverse}{character(1) or named character
vector, the wild type sequence for the forward and reverse variable region.
If given as a single string, the reference sequence will be named 'f' (for
forward) or 'r' (for reverse).}

\item{constantForward, constantReverse}{character(1), the expected constant
forward and reverse sequences.}

\item{avePhredMinForward, avePhredMinReverse}{numeric(1) Minimum average Phred
score in the variable region for a read to be retained. If L contains both
forward and reverse variable regions, the minimum average Phred score has
to be achieved in both for a read pair to be retained.}

\item{variableNMaxForward, variableNMaxReverse}{numeric(1) Maximum number of
Ns allowed in the variable region for a read to be retained.}

\item{umiNMax}{numeric(1) Maximum number of Ns allowed in the UMI for a read
to be retained.}

\item{nbrMutatedCodonsMaxForward, nbrMutatedCodonsMaxReverse}{numeric(1)
Maximum number of mutated codons that are allowed.}

\item{forbiddenMutatedCodonsForward, forbiddenMutatedCodonsReverse}{character
vector. Codons (can contain ambiguous IUPAC characters, see
\code{\link[Biostrings]{IUPAC_CODE_MAP}}). If a read pair contains a
mutated codon matching this pattern, it will be filtered out.}

\item{mutatedPhredMinForward, mutatedPhredMinReverse}{numeric(1) Minimum Phred
score of a mutated base for the read to be retained. If any mutated base
has a Phred score lower than \code{mutatedPhredMin}, the read will be
discarded.}

\item{mutNameDelimiter}{character(1) Delimiter used in the naming of mutants.
Generally, mutants will be named as XX{.}YY{.}NNN, where XX is the closest
provided reference sequence, YY is the mutated codon number, and NNN is the
mutated codon. Here, {.} is the provided \code{mutNameDelimiter}. The
delimiter must be a single character (not "_"), and can not appear in any
of the provided reference sequence names.}

\item{verbose}{logical(1), whether to print out progress messages.}
}
\value{
A list with four entries:
\describe{
\item{summaryTable}{A \code{data.frame} that contains, for each observed
mutation combination, the corresponding variable region sequences (or pair of
sequences), the number of observed such sequences, and the number of unique
UMIs obseved for the sequence.}
\item{filterSummary}{A \code{data.frame} that contains the number of input
reads, the number of reads filtered out in the processing, and the number of
retained reads. The filters are named according to the convention
"fxx_filter", where "xx" indicates the order in which the filters were
applied, and "filter" indicates the type of filter. Note that filters are
applied successively, and the reads filtered out in one step are not
considered for successive filtering steps.}
\item{errorStatistics}{A \code{data.frame} that contains, for each Phred
quality score between 0 and 99, the number of bases in the extracted constant
sequences with that quality score that match/mismatch with the provided
reference constant sequence.}
\item{parameters}{A \code{list} with all parameter settings that were used in
the processing. Also contains the version of the package and the time of
processing.}
}
}
\description{
Read sequences for a pair of fastq files and digest them (extract umis,
constant and variable parts, filter, extract mismatch information from
constant and count the observed unique variable parts). Alternatively, primer
sequences could be specified, in which case the sequence immediately
following the primer will be considered the variable sequence.
}
\details{
The processing of a read pair goes as follows:
\enumerate{
 \item Search for perfect matches to forward/reverse adapter sequences,
 filter out the read pair if a match is found in either the forward or
 reverse read.
 \item If primer sequences are provided, search for perfect matches, and
 filter out the read pair if not all provided primer sequences can be found.
 \item Extract the variable sequence from forward and reverse reads. If the
 lengths of the UMI, constant and variable part of the read are given, they
 will be used to extract the variable part. Otherwise, a primer sequence must
 be provided, and the variable sequence is assumed to start immediately after
 the primer.
 \item If requested, collapse forward and reverse variable regions by
 retaining, for each position, the base with the highest reported base
 quality.
 \item Filter out read pair if the average quality in the variable region is
 below \code{avePhredMinForward}/\code{avePhredMinReverse}, in either the
 forward or reverse read (or the merged read).
 \item Filter out read pair if the number of Ns in the variable region
 exceeds \code{variableNMaxForward}/\code{variableNMaxReverse}.
 \item Filter out read pair if the number of Ns in the combined forward and
 reverse UMI sequence exceeds \code{umiNMax}
 \item If one or more wild type sequences (for the variable region) are
 provided, find the mismatches between the (forward/reverse) variable region
 and the provided wild type sequence (if more than one wild type sequence is
 provided, first find the one that is closest to the read).
 \item Filter out read pair if any mutated base has a quality below
 \code{mutatedPhredMinForward}/\code{mutatedPhredMinReverse}.
 \item Filter out read pair if the number of mutated codons exceeds
 \code{nbrMutatedCodonsMaxForward}/\code{nbrMutatedCodonsMaxReverse}.
 \item Filter out read pair if any of the mutated codons match any of the
 codons encoded by
 \code{forbiddenMutatedCodonsForward}/\code{forbiddenMutatedCodonsReverse}.
 \item Assign a 'mutation name' to the read. This name is a combination of
 parts of the form XX{.}YY{.}NNN, where XX is the name of the most similar
 reference sequence, YY is the mutated codon number, and NNN is the mutated
 codon. {.} is a delimiter, specified via \code{mutNameDelimiter}.
}

Based on the retained reads following this filtering process, count the
number of reads, and the number of unique UMIs, for each variable sequence
(or pair of variable sequences).
}
